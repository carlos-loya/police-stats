<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10100.17.0327.0758                               -->
<workbook source-build='10.1.7 (10100.17.0327.0758)' source-platform='mac' version='10.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='10.1'>
      <aliases enabled='yes' />
      <column caption='Per Capita Low' datatype='real' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='27000.0'>
        <calculation class='tableau' formula='27000.0' />
        <range max='27000.0' min='0.0' />
      </column>
      <column caption='Per Capita Med' datatype='real' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='34079.713356678338'>
        <calculation class='tableau' formula='34079.713356678338' />
        <range max='47675.0' min='21057.0' />
      </column>
    </datasource>
    <datasource caption='fatal-police-shootings-cleaned+ (Multiple Connections)' inline='true' name='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr' version='10.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='&quot;robin-stewart/s-17-dv-final-project&quot;' name='webdata-direct.1f1okcb0dpbleq18sq65w1w9daza'>
            <connection APIVersion='' authType='none' authentication='no' channel='https' class='webdata-direct' connectionData='{&quot;dataset&quot;:&quot;robin-stewart/s-17-dv-final-project&quot;,&quot;apiToken&quot;:&quot;eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OnJvYmluLXN0ZXdhcnQiLCJpc3MiOiJhZ2VudDpyb2Jpbi1zdGV3YXJ0OjpiMjlmYzcwMy0yYmZhLTQ3NzktYmJmYi04YTNhNjdjOWI1NmEiLCJpYXQiOjE0ODQ2OTcyNzMsInJvbGUiOlsidXNlcl9hcGlfd3JpdGUiLCJ1c2VyX2FwaV9yZWFkIl0sImdlbmVyYWwtcHVycG9zZSI6dHJ1ZX0.s0t13SAi0Pn7jm5cCWfzzb0n3MRDnpi2GGIQCH8soOt5OICuSyDGfpZNsQKHxKAOA8gOzU5PGKwokczVk_S4Zw&quot;}' connectionName='&quot;robin-stewart/s-17-dv-final-project&quot;' filename='' increment-key='' path='/' port='443' scriptVersion='' secondary_whitelist='' server='tableau.data.world' urlQuery='' username='' usernameAlias='' />
          </named-connection>
          <named-connection caption='census-income-data' name='textscan.1oggmmd19n1da814qil7d1a271xf'>
            <connection class='textscan' directory='/Users/robinstewart/Documents/Data Visualization (Spring 2017)/Projects/Final Project/01 Data' filename='census-income-data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation join='left' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[fatal-police-shootings-cleaned].[v_8]' />
              <expression op='[census-income-data.csv].[State]' />
            </expression>
          </clause>
          <relation connection='webdata-direct.1f1okcb0dpbleq18sq65w1w9daza' name='fatal-police-shootings-cleaned' table='[fatalpoliceshootingscleaned]' type='table' />
          <relation connection='textscan.1oggmmd19n1da814qil7d1a271xf' name='census-income-data.csv' table='[census-income-data#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='State' ordinal='1' />
              <column datatype='real' name='GINI' ordinal='2' />
              <column datatype='integer' name='Per_Capita_Income' ordinal='3' />
              <column datatype='integer' name='Median_Family_Income' ordinal='4' />
              <column datatype='integer' name='Median_Non_Family_Income' ordinal='5' />
              <column datatype='integer' name='Median_Income' ordinal='6' />
            </columns>
          </relation>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_0]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>0</ordinal>
            <caption>id</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[v_1]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>1</ordinal>
            <caption>date</caption>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;date&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_2</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_2]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>manner_of_death</remote-alias>
            <ordinal>2</ordinal>
            <caption>manner_of_death</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_3</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_3]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>armed</remote-alias>
            <ordinal>3</ordinal>
            <caption>armed</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_4</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_4]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>age</remote-alias>
            <ordinal>4</ordinal>
            <caption>age</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_5</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_5]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>gender</remote-alias>
            <ordinal>5</ordinal>
            <caption>gender</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_6</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_6]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>race</remote-alias>
            <ordinal>6</ordinal>
            <caption>race</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_7</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_7]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>city</remote-alias>
            <ordinal>7</ordinal>
            <caption>city</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_8</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_8]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>state</remote-alias>
            <ordinal>8</ordinal>
            <caption>state</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_9</remote-name>
            <remote-type>4</remote-type>
            <local-name>[v_9]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>signs_of_mental_illness</remote-alias>
            <ordinal>9</ordinal>
            <caption>signs_of_mental_illness</caption>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_10</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_10]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>threat_level</remote-alias>
            <ordinal>10</ordinal>
            <caption>threat_level</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_11</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_11]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>flee</remote-alias>
            <ordinal>11</ordinal>
            <caption>flee</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_12</remote-name>
            <remote-type>4</remote-type>
            <local-name>[v_12]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>body_camera</remote-alias>
            <ordinal>12</ordinal>
            <caption>body_camera</caption>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GINI</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GINI]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>GINI</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Per_Capita_Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Per_Capita_Income]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>Per_Capita_Income</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Median_Family_Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Median_Family_Income]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>Median_Family_Income</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Median_Non_Family_Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Median_Non_Family_Income]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>Median_Non_Family_Income</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Median_Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Median_Income]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>Median_Income</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='KPI - [Median Family Income]/[Per Capita Income]' datatype='real' name='[Calculation_1000432438419349504]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Median_Family_Income]/[Per_Capita_Income]' />
      </column>
      <column caption='Per Capita Range' datatype='string' name='[Calculation_1642758397928120320]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Per_Capita_Income] &lt;= [Parameters].[Parameter 1] THEN &quot;Low&quot;&#10;ELSEIF [Per_Capita_Income] &lt;= [Parameters].[Parameter 2] THEN &quot;Medium&quot; &#10;ELSE &quot;High&quot;&#10;END' />
      </column>
      <column caption='Gini' datatype='real' name='[GINI]' role='measure' type='quantitative' />
      <column aggregation='None' datatype='integer' name='[Median Income (bin)]' role='dimension' type='quantitative'>
        <calculation class='bin' decimals='3' formula='[Median_Income]' peg='0' size='2000' />
      </column>
      <column caption='Median Family Income' datatype='integer' name='[Median_Family_Income]' role='measure' type='quantitative' />
      <column caption='Median Income' datatype='integer' name='[Median_Income]' role='measure' type='quantitative' />
      <column caption='Median Non Family Income' datatype='integer' name='[Median_Non_Family_Income]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='None' datatype='integer' name='[Per Capita Income (bin)]' role='dimension' type='quantitative'>
        <calculation class='bin' decimals='3' formula='[Per_Capita_Income]' peg='0' size='1000' />
      </column>
      <column caption='Per Capita Income' datatype='integer' name='[Per_Capita_Income]' role='measure' type='quantitative' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='id' datatype='integer' name='[v_0]' role='measure' type='quantitative' />
      <column caption='threat_level' datatype='string' name='[v_10]' role='dimension' type='nominal' />
      <column caption='Fleeing' datatype='string' name='[v_11]' role='dimension' type='nominal' />
      <column caption='body_camera' datatype='boolean' name='[v_12]' role='dimension' type='nominal' />
      <column caption='date' datatype='date' datatype-customized='true' name='[v_1]' role='dimension' type='ordinal' />
      <column caption='manner_of_death' datatype='string' name='[v_2]' role='dimension' type='nominal' />
      <column caption='armed' datatype='string' name='[v_3]' role='dimension' type='nominal' />
      <column caption='age' datatype='integer' name='[v_4]' role='measure' type='quantitative' />
      <column caption='gender' datatype='string' name='[v_5]' role='dimension' type='nominal' />
      <column caption='race' datatype='string' name='[v_6]' role='dimension' type='nominal' />
      <column caption='city' datatype='string' name='[v_7]' role='dimension' type='nominal' />
      <column caption='state' datatype='string' name='[v_8]' role='dimension' type='nominal' />
      <column caption='signs_of_mental_illness' datatype='boolean' name='[v_9]' role='dimension' type='nominal' />
      <column-instance column='[Median_Income]' derivation='Attribute' name='[attr:Median_Income:qk]' pivot='key' type='quantitative' />
      <column-instance column='[GINI]' derivation='Avg' name='[avg:GINI:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Median_Income]' derivation='Avg' name='[avg:Median_Income:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Median_Non_Family_Income]' derivation='Avg' name='[avg:Median_Non_Family_Income:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Per_Capita_Income]' derivation='Avg' name='[avg:Per_Capita_Income:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Per_Capita_Income]' derivation='Count' name='[cnt:Per_Capita_Income:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1642758397928120320]' derivation='None' name='[none:Calculation_1642758397928120320:nk]' pivot='key' type='nominal' />
      <column-instance column='[Median_Income]' derivation='None' name='[none:Median_Income:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Per Capita Income (bin)]' derivation='None' name='[none:Per Capita Income (bin):ok]' pivot='key' type='ordinal' />
      <column-instance column='[v_5]' derivation='None' name='[none:v_5:nk]' pivot='key' type='nominal' />
      <column-instance column='[v_6]' derivation='None' name='[none:v_6:nk]' pivot='key' type='nominal' />
      <column-instance column='[v_1]' derivation='Quarter' name='[qr:v_1:ok]' pivot='key' type='ordinal' />
      <column-instance column='[GINI]' derivation='Sum' name='[sum:GINI:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Median_Income]' derivation='Sum' name='[sum:Median_Income:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Median_Non_Family_Income]' derivation='Sum' name='[sum:Median_Non_Family_Income:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Per_Capita_Income]' derivation='Sum' name='[sum:Per_Capita_Income:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Per Capita Income (bin),QUARTER(date))' hidden='true' name='[Action (Per Capita Income (bin),QUARTER(date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Per Capita Income (bin):ok]' />
          <groupfilter function='level-members' level='[qr:v_1:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (State)' hidden='true' name='[Action (State)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[State]' />
        </groupfilter>
      </group>
      <group name='[Highest Median Income Counts]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[Median Income (bin)]' member='23' />
          <groupfilter function='member' level='[Median Income (bin)]' member='24' />
          <groupfilter function='member' level='[Median Income (bin)]' member='26' />
          <groupfilter function='member' level='[Median Income (bin)]' member='30' />
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='/Users/robinstewart/Documents/My Tableau Repository/Datasources/federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr_0g1w4th1rg162k1gsw8z804nss9g.tde' schema='Extract' tablename='Extract' update-time='04/30/2017 08:09:06 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='2090' timestamp-start='2017-04-30 20:09:06.529' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>F1</remote-name>
              <remote-type>16</remote-type>
              <local-name>[F1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>F1</remote-alias>
              <ordinal>0</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>56131.0</statistic>
                <statistic aggregation='Avg' datatype='real'>26.856937799043063</statistic>
                <statistic aggregation='Min' datatype='integer'>2</statistic>
                <statistic aggregation='Max' datatype='integer'>52</statistic>
                <statistic aggregation='Stdev' datatype='real'>14.028628057328127</statistic>
                <statistic aggregation='StdevP' datatype='real'>14.025271524666774</statistic>
                <statistic aggregation='Var' datatype='real'>196.80240517085394</statistic>
                <statistic aggregation='VarP' datatype='real'>196.70824134062866</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1918627.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>13</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GINI</remote-name>
              <remote-type>5</remote-type>
              <local-name>[GINI]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>GINI</remote-alias>
              <ordinal>1</ordinal>
              <family>census-income-data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>50</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>984.93240000000367</statistic>
                <statistic aggregation='Avg' datatype='real'>0.47125952153110223</statistic>
                <statistic aggregation='Min' datatype='real'>0.41810000000000003</statistic>
                <statistic aggregation='Max' datatype='real'>0.53169999999999995</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.016004110522661538</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.016000281329994537</statistic>
                <statistic aggregation='Var' datatype='real'>0.00025613155362156574</statistic>
                <statistic aggregation='VarP' datatype='real'>0.00025600900263897169</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>464.69383037999739</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>12</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Median_Family_Income</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Median_Family_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Median_Family_Income</remote-alias>
              <ordinal>2</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>136482500.0</statistic>
                <statistic aggregation='Avg' datatype='real'>65302.631578947367</statistic>
                <statistic aggregation='Min' datatype='integer'>49274</statistic>
                <statistic aggregation='Max' datatype='integer'>90089</statistic>
                <statistic aggregation='Stdev' datatype='real'>8657.9062894310955</statistic>
                <statistic aggregation='StdevP' datatype='real'>8655.834772165068</statistic>
                <statistic aggregation='Var' datatype='real'>74959341.316570505</statistic>
                <statistic aggregation='VarP' datatype='real'>74923475.603021905</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>9069256478484.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>14</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Median_Income</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Median_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Median_Income</remote-alias>
              <ordinal>3</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>112789633.0</statistic>
                <statistic aggregation='Avg' datatype='real'>53966.331578947371</statistic>
                <statistic aggregation='Min' datatype='integer'>39665</statistic>
                <statistic aggregation='Max' datatype='integer'>74551</statistic>
                <statistic aggregation='Stdev' datatype='real'>7831.7906594879832</statistic>
                <statistic aggregation='StdevP' datatype='real'>7829.9168011863712</statistic>
                <statistic aggregation='Var' datatype='real'>61336944.934043214</statistic>
                <statistic aggregation='VarP' datatype='real'>61307597.11350061</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>6214975611113.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>15</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Median_Non_Family_Income</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Median_Non_Family_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Median_Non_Family_Income</remote-alias>
              <ordinal>4</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>69626390.0</statistic>
                <statistic aggregation='Avg' datatype='real'>33314.062200956934</statistic>
                <statistic aggregation='Min' datatype='integer'>21845</statistic>
                <statistic aggregation='Max' datatype='integer'>61466</statistic>
                <statistic aggregation='Stdev' datatype='real'>5943.9942335519418</statistic>
                <statistic aggregation='StdevP' datatype='real'>5942.5720552247194</statistic>
                <statistic aggregation='Var' datatype='real'>35331067.448498741</statistic>
                <statistic aggregation='VarP' datatype='real'>35314162.631537743</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>2393344487188.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>16</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Per_Capita_Income</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Per_Capita_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Per_Capita_Income</remote-alias>
              <ordinal>5</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>58942859.0</statistic>
                <statistic aggregation='Avg' datatype='real'>28202.324880382774</statistic>
                <statistic aggregation='Min' datatype='integer'>21057</statistic>
                <statistic aggregation='Max' datatype='integer'>47675</statistic>
                <statistic aggregation='Stdev' datatype='real'>3562.9804477221419</statistic>
                <statistic aggregation='StdevP' datatype='real'>3562.1279580705755</statistic>
                <statistic aggregation='Var' datatype='real'>12694829.670850273</statistic>
                <statistic aggregation='VarP' datatype='real'>12688755.589668049</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1688845158079.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>17</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>State</remote-name>
              <remote-type>129</remote-type>
              <local-name>[State]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>State</remote-alias>
              <ordinal>6</ordinal>
              <family>census-income-data.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>51</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;AK&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;WY&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_0</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_0]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_0</remote-alias>
              <ordinal>7</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2090</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>2516502.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1204.067942583732</statistic>
                <statistic aggregation='Min' datatype='integer'>3</statistic>
                <statistic aggregation='Max' datatype='integer'>2333</statistic>
                <statistic aggregation='Stdev' datatype='real'>654.42805388953298</statistic>
                <statistic aggregation='StdevP' datatype='real'>654.27147342219087</statistic>
                <statistic aggregation='Var' datatype='real'>428276.07771764148</statistic>
                <statistic aggregation='VarP' datatype='real'>428071.16093404457</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>3924708112.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>19</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_10</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_10]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_10</remote-alias>
              <ordinal>8</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;attack&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;undetermined&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_11</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_11]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_11</remote-alias>
              <ordinal>9</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>5</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Car&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Other&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2056</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_12</remote-name>
              <remote-type>11</remote-type>
              <local-name>[v_12]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_12</remote-alias>
              <ordinal>10</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>boolean</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='boolean'>false</statistic>
                <statistic aggregation='Max' datatype='boolean'>true</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_1</remote-name>
              <remote-type>133</remote-type>
              <local-name>[v_1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_1</remote-alias>
              <ordinal>11</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>723</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='date'>#2015-01-02#</statistic>
                <statistic aggregation='Max' datatype='date'>#2017-02-12#</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='Median' datatype='date'>#2016-01-21#</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;date&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_2</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_2]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_2</remote-alias>
              <ordinal>12</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;shot&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;shot and Tasered&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_3</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_3]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_3</remote-alias>
              <ordinal>13</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>65</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Taser&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;vehicle&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2084</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>10</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_4</remote-name>
              <remote-type>16</remote-type>
              <local-name>[v_4]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_4</remote-alias>
              <ordinal>14</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>72</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>74718.0</statistic>
                <statistic aggregation='Avg' datatype='real'>36.519061583577709</statistic>
                <statistic aggregation='Min' datatype='integer'>6</statistic>
                <statistic aggregation='Max' datatype='integer'>86</statistic>
                <statistic aggregation='Stdev' datatype='real'>12.886883394278133</statistic>
                <statistic aggregation='StdevP' datatype='real'>12.883733722131792</statistic>
                <statistic aggregation='Var' datatype='real'>166.0717636177215</statistic>
                <statistic aggregation='VarP' datatype='real'>165.99059462279592</statistic>
                <statistic aggregation='Count' datatype='integer'>2046</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>3068248.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>18</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_5</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_5]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_5</remote-alias>
              <ordinal>15</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;FEMALE&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;MALE&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_6</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_6]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_6</remote-alias>
              <ordinal>16</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>7</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;ASIAN&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;WHITE&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>1971</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_7</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_7]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_7</remote-alias>
              <ordinal>17</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1227</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Abingdon&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Zion&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>11</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_8</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_8]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_8</remote-alias>
              <ordinal>18</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>51</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;AK&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;WY&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_9</remote-name>
              <remote-type>11</remote-type>
              <local-name>[v_9]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_9</remote-alias>
              <ordinal>19</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>boolean</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='boolean'>false</statistic>
                <statistic aggregation='Max' datatype='boolean'>true</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.493648' group-percentage='0.0417423' measure-ordering='alphabetic' measure-percentage='0.388385' parameter-percentage='0.076225' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:v_5:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;FEMALE&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;MALE&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[cnt:Per_Capita_Income:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[attr:Median_Income:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:GINI:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Non_Family_Income:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Per_Capita_Income:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Median_Income:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[sum:GINI:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[sum:Median_Income:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[sum:Median_Non_Family_Income:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[sum:Per_Capita_Income:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:v_6:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;NATIVE AMERICAN&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;HISPANIC&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;WHITE&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;BLACK&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;OTHER&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;ASIAN&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_1642758397928120320:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;High&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Low&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Medium&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Per Capita Low' datatype='real' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='27000.0'>
          <calculation class='tableau' formula='27000.0' />
          <range max='27000.0' min='0.0' />
        </column>
        <column caption='Per Capita Med' datatype='real' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='34079.713356678338'>
          <calculation class='tableau' formula='34079.713356678338' />
          <range max='47675.0' min='21057.0' />
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='fatal-police-shootings-cleaned+ (Multiple Connections) (2)' inline='true' name='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy)' version='10.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data.world connector' name='webdata-direct.1hw30vy09s44fr10h2fw9191iob1'>
            <connection APIVersion='' authType='none' authentication='no' channel='http' class='webdata-direct' connectionData='{&quot;dataset&quot;:&quot;robin-stewart/s-17-dv-final-project&quot;,&quot;apiToken&quot;:&quot;eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OnJvYmluLXN0ZXdhcnQiLCJpc3MiOiJhZ2VudDpyb2Jpbi1zdGV3YXJ0OjpiMjlmYzcwMy0yYmZhLTQ3NzktYmJmYi04YTNhNjdjOWI1NmEiLCJpYXQiOjE0ODQ2OTcyNzMsInJvbGUiOlsidXNlcl9hcGlfd3JpdGUiLCJ1c2VyX2FwaV9yZWFkIl0sImdlbmVyYWwtcHVycG9zZSI6dHJ1ZX0.s0t13SAi0Pn7jm5cCWfzzb0n3MRDnpi2GGIQCH8soOt5OICuSyDGfpZNsQKHxKAOA8gOzU5PGKwokczVk_S4Zw&quot;}' connectionName='&quot;robin-stewart/s-17-dv-final-project&quot;' filename='' increment-key='' path='/' port='80' scriptVersion='' secondary_whitelist='' server='tableau.data.world' urlQuery='' username='' usernameAlias='' />
          </named-connection>
          <named-connection caption='census-income-data' name='textscan.0epp3nc0eowmid12u6g9h052kp8w'>
            <connection class='textscan' directory='/Users/robinstewart/Documents/Data Visualization (Spring 2017)/Projects/Final Project/01 Data' filename='census-income-data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation join='left' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[fatal-police-shootings-cleaned].[v_8]' />
              <expression op='[census-income-data.csv].[State]' />
            </expression>
          </clause>
          <relation connection='webdata-direct.1hw30vy09s44fr10h2fw9191iob1' name='fatal-police-shootings-cleaned' table='[fatalpoliceshootingscleaned]' type='table' />
          <relation connection='textscan.0epp3nc0eowmid12u6g9h052kp8w' name='census-income-data.csv' table='[census-income-data#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='State' ordinal='1' />
              <column datatype='real' name='GINI' ordinal='2' />
              <column datatype='integer' name='Per_Capita_Income' ordinal='3' />
              <column datatype='integer' name='Median_Family_Income' ordinal='4' />
              <column datatype='integer' name='Median_Non_Family_Income' ordinal='5' />
              <column datatype='integer' name='Median_Income' ordinal='6' />
            </columns>
          </relation>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_0]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>0</ordinal>
            <caption>id</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[v_1]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>1</ordinal>
            <caption>date</caption>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;date&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_2</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_2]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>manner_of_death</remote-alias>
            <ordinal>2</ordinal>
            <caption>manner_of_death</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_3</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_3]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>armed</remote-alias>
            <ordinal>3</ordinal>
            <caption>armed</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_4</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_4]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>age</remote-alias>
            <ordinal>4</ordinal>
            <caption>age</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_5</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_5]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>gender</remote-alias>
            <ordinal>5</ordinal>
            <caption>gender</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_6</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_6]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>race</remote-alias>
            <ordinal>6</ordinal>
            <caption>race</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_7</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_7]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>city</remote-alias>
            <ordinal>7</ordinal>
            <caption>city</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_8</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_8]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>state</remote-alias>
            <ordinal>8</ordinal>
            <caption>state</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_9</remote-name>
            <remote-type>4</remote-type>
            <local-name>[v_9]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>signs_of_mental_illness</remote-alias>
            <ordinal>9</ordinal>
            <caption>signs_of_mental_illness</caption>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_10</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_10]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>threat_level</remote-alias>
            <ordinal>10</ordinal>
            <caption>threat_level</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_11</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_11]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>flee</remote-alias>
            <ordinal>11</ordinal>
            <caption>flee</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_12</remote-name>
            <remote-type>4</remote-type>
            <local-name>[v_12]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>body_camera</remote-alias>
            <ordinal>12</ordinal>
            <caption>body_camera</caption>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GINI</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GINI]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>GINI</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Per_Capita_Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Per_Capita_Income]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>Per_Capita_Income</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Median_Family_Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Median_Family_Income]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>Median_Family_Income</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Median_Non_Family_Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Median_Non_Family_Income]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>Median_Non_Family_Income</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Median_Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Median_Income]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>Median_Income</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Calculated Difference from Average' datatype='real' name='[Calculation_4539558123198566400]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Median_Income])-WINDOW_AVG(sum([Median_Income]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Gini' datatype='real' name='[GINI]' role='measure' type='quantitative' />
      <column caption='Median Family Income' datatype='integer' name='[Median_Family_Income]' role='measure' type='quantitative' />
      <column caption='Median Income' datatype='integer' name='[Median_Income]' role='measure' type='quantitative' />
      <column caption='Median Non Family Income' datatype='integer' name='[Median_Non_Family_Income]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Per Capita Income' datatype='integer' name='[Per_Capita_Income]' role='measure' type='quantitative' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='id' datatype='integer' name='[v_0]' role='measure' type='quantitative' />
      <column caption='threat_level' datatype='string' name='[v_10]' role='dimension' type='nominal' />
      <column caption='flee' datatype='string' name='[v_11]' role='dimension' type='nominal' />
      <column caption='body_camera' datatype='boolean' name='[v_12]' role='dimension' type='nominal' />
      <column caption='date' datatype='date' name='[v_1]' role='dimension' type='ordinal' />
      <column caption='manner_of_death' datatype='string' name='[v_2]' role='dimension' type='nominal' />
      <column caption='armed' datatype='string' name='[v_3]' role='dimension' type='nominal' />
      <column caption='age' datatype='integer' name='[v_4]' role='measure' type='quantitative' />
      <column caption='gender' datatype='string' name='[v_5]' role='dimension' type='nominal' />
      <column caption='race' datatype='string' name='[v_6]' role='dimension' type='nominal' />
      <column caption='city' datatype='string' name='[v_7]' role='dimension' type='nominal' />
      <column caption='state' datatype='string' name='[v_8]' role='dimension' type='nominal' />
      <column caption='signs_of_mental_illness' datatype='boolean' name='[v_9]' role='dimension' type='nominal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='/Users/robinstewart/Documents/My Tableau Repository/Datasources/federated.1bagbgp18esit01h90c6x1ug6cla_0m5mdh811snuf713yu60h0kri4iy copy 3.tde' schema='Extract' tablename='Extract' update-time='05/03/2017 12:03:39 AM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='2090' timestamp-start='2017-05-03 00:03:39.446' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>F1</remote-name>
              <remote-type>16</remote-type>
              <local-name>[F1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>F1</remote-alias>
              <ordinal>0</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>56131.0</statistic>
                <statistic aggregation='Avg' datatype='real'>26.856937799043063</statistic>
                <statistic aggregation='Min' datatype='integer'>2</statistic>
                <statistic aggregation='Max' datatype='integer'>52</statistic>
                <statistic aggregation='Stdev' datatype='real'>14.028628057328127</statistic>
                <statistic aggregation='StdevP' datatype='real'>14.025271524666774</statistic>
                <statistic aggregation='Var' datatype='real'>196.80240517085394</statistic>
                <statistic aggregation='VarP' datatype='real'>196.70824134062866</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1918627.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>13</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GINI</remote-name>
              <remote-type>5</remote-type>
              <local-name>[GINI]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>GINI</remote-alias>
              <ordinal>1</ordinal>
              <family>census-income-data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>50</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>984.93240000000367</statistic>
                <statistic aggregation='Avg' datatype='real'>0.47125952153110223</statistic>
                <statistic aggregation='Min' datatype='real'>0.41810000000000003</statistic>
                <statistic aggregation='Max' datatype='real'>0.53169999999999995</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.016004110522661538</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.016000281329994537</statistic>
                <statistic aggregation='Var' datatype='real'>0.00025613155362156574</statistic>
                <statistic aggregation='VarP' datatype='real'>0.00025600900263897169</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>464.69383037999739</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>12</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Median_Family_Income</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Median_Family_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Median_Family_Income</remote-alias>
              <ordinal>2</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>136482500.0</statistic>
                <statistic aggregation='Avg' datatype='real'>65302.631578947367</statistic>
                <statistic aggregation='Min' datatype='integer'>49274</statistic>
                <statistic aggregation='Max' datatype='integer'>90089</statistic>
                <statistic aggregation='Stdev' datatype='real'>8657.9062894310955</statistic>
                <statistic aggregation='StdevP' datatype='real'>8655.834772165068</statistic>
                <statistic aggregation='Var' datatype='real'>74959341.316570505</statistic>
                <statistic aggregation='VarP' datatype='real'>74923475.603021905</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>9069256478484.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>14</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Median_Income</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Median_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Median_Income</remote-alias>
              <ordinal>3</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>112789633.0</statistic>
                <statistic aggregation='Avg' datatype='real'>53966.331578947371</statistic>
                <statistic aggregation='Min' datatype='integer'>39665</statistic>
                <statistic aggregation='Max' datatype='integer'>74551</statistic>
                <statistic aggregation='Stdev' datatype='real'>7831.7906594879832</statistic>
                <statistic aggregation='StdevP' datatype='real'>7829.9168011863712</statistic>
                <statistic aggregation='Var' datatype='real'>61336944.934043214</statistic>
                <statistic aggregation='VarP' datatype='real'>61307597.11350061</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>6214975611113.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>15</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Median_Non_Family_Income</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Median_Non_Family_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Median_Non_Family_Income</remote-alias>
              <ordinal>4</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>69626390.0</statistic>
                <statistic aggregation='Avg' datatype='real'>33314.062200956934</statistic>
                <statistic aggregation='Min' datatype='integer'>21845</statistic>
                <statistic aggregation='Max' datatype='integer'>61466</statistic>
                <statistic aggregation='Stdev' datatype='real'>5943.9942335519418</statistic>
                <statistic aggregation='StdevP' datatype='real'>5942.5720552247194</statistic>
                <statistic aggregation='Var' datatype='real'>35331067.448498741</statistic>
                <statistic aggregation='VarP' datatype='real'>35314162.631537743</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>2393344487188.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>16</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Per_Capita_Income</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Per_Capita_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Per_Capita_Income</remote-alias>
              <ordinal>5</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>58942859.0</statistic>
                <statistic aggregation='Avg' datatype='real'>28202.324880382774</statistic>
                <statistic aggregation='Min' datatype='integer'>21057</statistic>
                <statistic aggregation='Max' datatype='integer'>47675</statistic>
                <statistic aggregation='Stdev' datatype='real'>3562.9804477221419</statistic>
                <statistic aggregation='StdevP' datatype='real'>3562.1279580705755</statistic>
                <statistic aggregation='Var' datatype='real'>12694829.670850273</statistic>
                <statistic aggregation='VarP' datatype='real'>12688755.589668049</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1688845158079.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>17</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>State</remote-name>
              <remote-type>129</remote-type>
              <local-name>[State]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>State</remote-alias>
              <ordinal>6</ordinal>
              <family>census-income-data.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>51</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;AK&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;WY&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_0</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_0]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_0</remote-alias>
              <ordinal>7</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2090</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>2516502.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1204.067942583732</statistic>
                <statistic aggregation='Min' datatype='integer'>3</statistic>
                <statistic aggregation='Max' datatype='integer'>2333</statistic>
                <statistic aggregation='Stdev' datatype='real'>654.42805388953298</statistic>
                <statistic aggregation='StdevP' datatype='real'>654.27147342219087</statistic>
                <statistic aggregation='Var' datatype='real'>428276.07771764148</statistic>
                <statistic aggregation='VarP' datatype='real'>428071.16093404457</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>3924708112.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>19</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_10</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_10]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_10</remote-alias>
              <ordinal>8</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;attack&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;undetermined&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_11</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_11]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_11</remote-alias>
              <ordinal>9</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>5</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Car&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Other&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2056</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_12</remote-name>
              <remote-type>11</remote-type>
              <local-name>[v_12]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_12</remote-alias>
              <ordinal>10</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>boolean</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='boolean'>false</statistic>
                <statistic aggregation='Max' datatype='boolean'>true</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_1</remote-name>
              <remote-type>133</remote-type>
              <local-name>[v_1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_1</remote-alias>
              <ordinal>11</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>723</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='date'>#2015-01-02#</statistic>
                <statistic aggregation='Max' datatype='date'>#2017-02-12#</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='Median' datatype='date'>#2016-01-21#</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;date&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_2</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_2]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_2</remote-alias>
              <ordinal>12</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;shot&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;shot and Tasered&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_3</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_3]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_3</remote-alias>
              <ordinal>13</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>65</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Taser&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;vehicle&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2084</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>10</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_4</remote-name>
              <remote-type>16</remote-type>
              <local-name>[v_4]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_4</remote-alias>
              <ordinal>14</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>72</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>74718.0</statistic>
                <statistic aggregation='Avg' datatype='real'>36.519061583577709</statistic>
                <statistic aggregation='Min' datatype='integer'>6</statistic>
                <statistic aggregation='Max' datatype='integer'>86</statistic>
                <statistic aggregation='Stdev' datatype='real'>12.886883394278133</statistic>
                <statistic aggregation='StdevP' datatype='real'>12.883733722131792</statistic>
                <statistic aggregation='Var' datatype='real'>166.0717636177215</statistic>
                <statistic aggregation='VarP' datatype='real'>165.99059462279592</statistic>
                <statistic aggregation='Count' datatype='integer'>2046</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>3068248.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>18</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_5</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_5]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_5</remote-alias>
              <ordinal>15</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;FEMALE&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;MALE&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_6</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_6]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_6</remote-alias>
              <ordinal>16</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>7</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;ASIAN&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;WHITE&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>1971</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_7</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_7]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_7</remote-alias>
              <ordinal>17</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1227</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Abingdon&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Zion&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>11</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_8</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_8]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_8</remote-alias>
              <ordinal>18</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>51</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;AK&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;WY&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_9</remote-name>
              <remote-type>11</remote-type>
              <local-name>[v_9]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_9</remote-alias>
              <ordinal>19</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>boolean</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='boolean'>false</statistic>
                <statistic aggregation='Max' datatype='boolean'>true</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.391386' measure-ordering='alphabetic' measure-percentage='0.485019' parameter-percentage='0.123596' show-structure='true' user-set-layout='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='fatal-police-shootings-cleaned+ (Multiple Connections) (3)' inline='true' name='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy 2)' version='10.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data.world connector' name='webdata-direct.0y645vn1kbq0dj167f1da1wxxncq'>
            <connection APIVersion='' authType='none' authentication='no' channel='https' class='webdata-direct' connectionData='{&quot;dataset&quot;:&quot;robin-stewart/s-17-dv-final-project&quot;,&quot;apiToken&quot;:&quot;eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OnJvYmluLXN0ZXdhcnQiLCJpc3MiOiJhZ2VudDpyb2Jpbi1zdGV3YXJ0OjpiMjlmYzcwMy0yYmZhLTQ3NzktYmJmYi04YTNhNjdjOWI1NmEiLCJpYXQiOjE0ODQ2OTcyNzMsInJvbGUiOlsidXNlcl9hcGlfd3JpdGUiLCJ1c2VyX2FwaV9yZWFkIl0sImdlbmVyYWwtcHVycG9zZSI6dHJ1ZX0.s0t13SAi0Pn7jm5cCWfzzb0n3MRDnpi2GGIQCH8soOt5OICuSyDGfpZNsQKHxKAOA8gOzU5PGKwokczVk_S4Zw&quot;}' connectionName='&quot;robin-stewart/s-17-dv-final-project&quot;' filename='' increment-key='' path='/' port='443' scriptVersion='' secondary_whitelist='' server='tableau.data.world' urlQuery='' username='' usernameAlias='' />
          </named-connection>
          <named-connection caption='census-income-data' name='textscan.1mnoq1d1fmavxs169sdqb002vdes'>
            <connection class='textscan' directory='/Users/robinstewart/Documents/Data Visualization (Spring 2017)/Projects/Final Project/01 Data' filename='census-income-data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation join='left' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[fatal-police-shootings-cleaned].[v_8]' />
              <expression op='[census-income-data.csv].[State]' />
            </expression>
          </clause>
          <relation connection='webdata-direct.0y645vn1kbq0dj167f1da1wxxncq' name='fatal-police-shootings-cleaned' table='[fatalpoliceshootingscleaned]' type='table' />
          <relation connection='textscan.1mnoq1d1fmavxs169sdqb002vdes' name='census-income-data.csv' table='[census-income-data#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='State' ordinal='1' />
              <column datatype='real' name='GINI' ordinal='2' />
              <column datatype='integer' name='Per_Capita_Income' ordinal='3' />
              <column datatype='integer' name='Median_Family_Income' ordinal='4' />
              <column datatype='integer' name='Median_Non_Family_Income' ordinal='5' />
              <column datatype='integer' name='Median_Income' ordinal='6' />
            </columns>
          </relation>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_0]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>0</ordinal>
            <caption>id</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[v_1]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>1</ordinal>
            <caption>date</caption>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;date&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_2</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_2]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>manner_of_death</remote-alias>
            <ordinal>2</ordinal>
            <caption>manner_of_death</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_3</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_3]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>armed</remote-alias>
            <ordinal>3</ordinal>
            <caption>armed</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_4</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_4]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>age</remote-alias>
            <ordinal>4</ordinal>
            <caption>age</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_5</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_5]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>gender</remote-alias>
            <ordinal>5</ordinal>
            <caption>gender</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_6</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_6]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>race</remote-alias>
            <ordinal>6</ordinal>
            <caption>race</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_7</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_7]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>city</remote-alias>
            <ordinal>7</ordinal>
            <caption>city</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_8</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_8]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>state</remote-alias>
            <ordinal>8</ordinal>
            <caption>state</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_9</remote-name>
            <remote-type>4</remote-type>
            <local-name>[v_9]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>signs_of_mental_illness</remote-alias>
            <ordinal>9</ordinal>
            <caption>signs_of_mental_illness</caption>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_10</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_10]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>threat_level</remote-alias>
            <ordinal>10</ordinal>
            <caption>threat_level</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_11</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_11]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>flee</remote-alias>
            <ordinal>11</ordinal>
            <caption>flee</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_12</remote-name>
            <remote-type>4</remote-type>
            <local-name>[v_12]</local-name>
            <parent-name>[fatal-police-shootings-cleaned]</parent-name>
            <remote-alias>body_camera</remote-alias>
            <ordinal>12</ordinal>
            <caption>body_camera</caption>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GINI</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GINI]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>GINI</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Per_Capita_Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Per_Capita_Income]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>Per_Capita_Income</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Median_Family_Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Median_Family_Income]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>Median_Family_Income</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Median_Non_Family_Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Median_Non_Family_Income]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>Median_Non_Family_Income</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Median_Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Median_Income]</local-name>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias>Median_Income</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[census-income-data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='MedianFamilyIncome/PerCapitaIncome' datatype='real' name='[Calculation_455708052318572546]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Median_Family_Income]/[Per_Capita_Income]' />
      </column>
      <column caption='Gini' datatype='real' name='[GINI]' role='measure' type='quantitative' />
      <column caption='Median Family Income' datatype='integer' name='[Median_Family_Income]' role='measure' type='quantitative' />
      <column caption='Median Income' datatype='integer' name='[Median_Income]' role='measure' type='quantitative' />
      <column caption='Median Non Family Income' datatype='integer' name='[Median_Non_Family_Income]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Per Capita Income' datatype='integer' name='[Per_Capita_Income]' role='measure' type='quantitative' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column aggregation='Sum' caption='id' datatype='integer' name='[v_0]' role='dimension' type='ordinal' />
      <column caption='threat_level' datatype='string' name='[v_10]' role='dimension' type='nominal' />
      <column caption='flee' datatype='string' name='[v_11]' role='dimension' type='nominal' />
      <column caption='body_camera' datatype='boolean' name='[v_12]' role='dimension' type='nominal' />
      <column caption='date' datatype='date' name='[v_1]' role='dimension' type='ordinal' />
      <column caption='manner_of_death' datatype='string' name='[v_2]' role='dimension' type='nominal' />
      <column caption='armed' datatype='string' name='[v_3]' role='dimension' type='nominal' />
      <column caption='age' datatype='integer' name='[v_4]' role='measure' type='quantitative' />
      <column caption='gender' datatype='string' name='[v_5]' role='dimension' type='nominal' />
      <column caption='race' datatype='string' name='[v_6]' role='dimension' type='nominal' />
      <column caption='city' datatype='string' name='[v_7]' role='dimension' type='nominal' />
      <column caption='state' datatype='string' name='[v_8]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='signs_of_mental_illness' datatype='boolean' name='[v_9]' role='dimension' type='nominal' />
      <column-instance column='[HighStateIncomePeople]' derivation='InOut' name='[io:HighStateIncomePeople:nk]' pivot='key' type='nominal' />
      <group name='[HighStateIncomePeople]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[v_0]' member='52' />
          <groupfilter function='member' level='[v_0]' member='84' />
          <groupfilter function='member' level='[v_0]' member='98' />
          <groupfilter function='member' level='[v_0]' member='107' />
          <groupfilter function='member' level='[v_0]' member='110' />
          <groupfilter function='member' level='[v_0]' member='131' />
          <groupfilter function='member' level='[v_0]' member='149' />
          <groupfilter function='member' level='[v_0]' member='161' />
          <groupfilter function='member' level='[v_0]' member='197' />
          <groupfilter function='member' level='[v_0]' member='248' />
          <groupfilter function='member' level='[v_0]' member='254' />
          <groupfilter function='member' level='[v_0]' member='263' />
          <groupfilter function='member' level='[v_0]' member='282' />
          <groupfilter function='member' level='[v_0]' member='316' />
          <groupfilter function='member' level='[v_0]' member='339' />
          <groupfilter function='member' level='[v_0]' member='449' />
          <groupfilter function='member' level='[v_0]' member='455' />
          <groupfilter function='member' level='[v_0]' member='480' />
          <groupfilter function='member' level='[v_0]' member='485' />
          <groupfilter function='member' level='[v_0]' member='497' />
          <groupfilter function='member' level='[v_0]' member='507' />
          <groupfilter function='member' level='[v_0]' member='511' />
          <groupfilter function='member' level='[v_0]' member='533' />
          <groupfilter function='member' level='[v_0]' member='537' />
          <groupfilter function='member' level='[v_0]' member='545' />
          <groupfilter function='member' level='[v_0]' member='558' />
          <groupfilter function='member' level='[v_0]' member='567' />
          <groupfilter function='member' level='[v_0]' member='588' />
          <groupfilter function='member' level='[v_0]' member='599' />
          <groupfilter function='member' level='[v_0]' member='606' />
          <groupfilter function='member' level='[v_0]' member='616' />
          <groupfilter function='member' level='[v_0]' member='638' />
          <groupfilter function='member' level='[v_0]' member='705' />
          <groupfilter function='member' level='[v_0]' member='740' />
          <groupfilter function='member' level='[v_0]' member='750' />
          <groupfilter function='member' level='[v_0]' member='760' />
          <groupfilter function='member' level='[v_0]' member='771' />
          <groupfilter function='member' level='[v_0]' member='804' />
          <groupfilter function='member' level='[v_0]' member='816' />
          <groupfilter function='member' level='[v_0]' member='836' />
          <groupfilter function='member' level='[v_0]' member='859' />
          <groupfilter function='member' level='[v_0]' member='894' />
          <groupfilter function='member' level='[v_0]' member='898' />
          <groupfilter function='member' level='[v_0]' member='902' />
          <groupfilter function='member' level='[v_0]' member='903' />
          <groupfilter from='953' function='range' level='[v_0]' to='955' />
          <groupfilter function='member' level='[v_0]' member='975' />
          <groupfilter function='member' level='[v_0]' member='1000' />
          <groupfilter function='member' level='[v_0]' member='1018' />
          <groupfilter function='member' level='[v_0]' member='1022' />
          <groupfilter function='member' level='[v_0]' member='1033' />
          <groupfilter function='member' level='[v_0]' member='1088' />
          <groupfilter function='member' level='[v_0]' member='1159' />
          <groupfilter function='member' level='[v_0]' member='1166' />
          <groupfilter function='member' level='[v_0]' member='1216' />
          <groupfilter function='member' level='[v_0]' member='1219' />
          <groupfilter function='member' level='[v_0]' member='1242' />
          <groupfilter function='member' level='[v_0]' member='1244' />
          <groupfilter from='1254' function='range' level='[v_0]' to='1256' />
          <groupfilter function='member' level='[v_0]' member='1262' />
          <groupfilter function='member' level='[v_0]' member='1275' />
          <groupfilter function='member' level='[v_0]' member='1305' />
          <groupfilter function='member' level='[v_0]' member='1331' />
          <groupfilter function='member' level='[v_0]' member='1379' />
          <groupfilter function='member' level='[v_0]' member='1396' />
          <groupfilter function='member' level='[v_0]' member='1404' />
          <groupfilter function='member' level='[v_0]' member='1412' />
          <groupfilter function='member' level='[v_0]' member='1424' />
          <groupfilter function='member' level='[v_0]' member='1425' />
          <groupfilter function='member' level='[v_0]' member='1437' />
          <groupfilter function='member' level='[v_0]' member='1447' />
          <groupfilter function='member' level='[v_0]' member='1467' />
          <groupfilter function='member' level='[v_0]' member='1475' />
          <groupfilter function='member' level='[v_0]' member='1482' />
          <groupfilter function='member' level='[v_0]' member='1532' />
          <groupfilter function='member' level='[v_0]' member='1555' />
          <groupfilter function='member' level='[v_0]' member='1590' />
          <groupfilter function='member' level='[v_0]' member='1597' />
          <groupfilter function='member' level='[v_0]' member='1640' />
          <groupfilter function='member' level='[v_0]' member='1650' />
          <groupfilter function='member' level='[v_0]' member='1656' />
          <groupfilter function='member' level='[v_0]' member='1666' />
          <groupfilter function='member' level='[v_0]' member='1671' />
          <groupfilter function='member' level='[v_0]' member='1683' />
          <groupfilter function='member' level='[v_0]' member='1707' />
          <groupfilter function='member' level='[v_0]' member='1710' />
          <groupfilter function='member' level='[v_0]' member='1720' />
          <groupfilter function='member' level='[v_0]' member='1724' />
          <groupfilter function='member' level='[v_0]' member='1750' />
          <groupfilter function='member' level='[v_0]' member='1752' />
          <groupfilter function='member' level='[v_0]' member='1829' />
          <groupfilter function='member' level='[v_0]' member='1854' />
          <groupfilter function='member' level='[v_0]' member='1875' />
          <groupfilter function='member' level='[v_0]' member='1903' />
          <groupfilter function='member' level='[v_0]' member='1910' />
          <groupfilter function='member' level='[v_0]' member='1914' />
          <groupfilter function='member' level='[v_0]' member='1927' />
          <groupfilter function='member' level='[v_0]' member='1930' />
          <groupfilter function='member' level='[v_0]' member='1932' />
          <groupfilter function='member' level='[v_0]' member='1933' />
          <groupfilter function='member' level='[v_0]' member='1960' />
          <groupfilter function='member' level='[v_0]' member='1991' />
          <groupfilter function='member' level='[v_0]' member='1992' />
          <groupfilter function='member' level='[v_0]' member='1999' />
          <groupfilter function='member' level='[v_0]' member='2024' />
          <groupfilter function='member' level='[v_0]' member='2042' />
          <groupfilter function='member' level='[v_0]' member='2068' />
          <groupfilter function='member' level='[v_0]' member='2084' />
          <groupfilter function='member' level='[v_0]' member='2115' />
          <groupfilter function='member' level='[v_0]' member='2126' />
          <groupfilter function='member' level='[v_0]' member='2150' />
          <groupfilter function='member' level='[v_0]' member='2159' />
          <groupfilter function='member' level='[v_0]' member='2173' />
          <groupfilter function='member' level='[v_0]' member='2199' />
          <groupfilter function='member' level='[v_0]' member='2215' />
          <groupfilter function='member' level='[v_0]' member='2218' />
          <groupfilter function='member' level='[v_0]' member='2266' />
          <groupfilter function='member' level='[v_0]' member='2271' />
          <groupfilter function='member' level='[v_0]' member='2310' />
          <groupfilter function='member' level='[v_0]' member='2320' />
          <groupfilter function='member' level='[v_0]' member='2332' />
        </groupfilter>
      </group>
      <group name='[MediumStateIncomePeople]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='reorder-dimensionality'>
          <groupfilter function='crossjoin'>
            <groupfilter function='member' level='[io:HighStateIncomePeople:nk]' member='false' />
            <groupfilter function='union'>
              <groupfilter function='member' level='[v_0]' member='3' />
              <groupfilter function='member' level='[v_0]' member='4' />
              <groupfilter function='member' level='[v_0]' member='5' />
              <groupfilter function='member' level='[v_0]' member='8' />
              <groupfilter function='member' level='[v_0]' member='9' />
              <groupfilter function='member' level='[v_0]' member='13' />
              <groupfilter function='member' level='[v_0]' member='15' />
              <groupfilter function='member' level='[v_0]' member='16' />
              <groupfilter function='member' level='[v_0]' member='17' />
              <groupfilter function='member' level='[v_0]' member='19' />
              <groupfilter function='member' level='[v_0]' member='20' />
              <groupfilter function='member' level='[v_0]' member='21' />
              <groupfilter function='member' level='[v_0]' member='25' />
              <groupfilter function='member' level='[v_0]' member='32' />
              <groupfilter function='member' level='[v_0]' member='37' />
              <groupfilter function='member' level='[v_0]' member='42' />
              <groupfilter function='member' level='[v_0]' member='43' />
              <groupfilter function='member' level='[v_0]' member='45' />
              <groupfilter function='member' level='[v_0]' member='48' />
              <groupfilter function='member' level='[v_0]' member='49' />
              <groupfilter function='member' level='[v_0]' member='51' />
              <groupfilter function='member' level='[v_0]' member='54' />
              <groupfilter function='member' level='[v_0]' member='55' />
              <groupfilter function='member' level='[v_0]' member='57' />
              <groupfilter function='member' level='[v_0]' member='60' />
              <groupfilter function='member' level='[v_0]' member='63' />
              <groupfilter function='member' level='[v_0]' member='67' />
              <groupfilter function='member' level='[v_0]' member='68' />
              <groupfilter function='member' level='[v_0]' member='75' />
              <groupfilter function='member' level='[v_0]' member='78' />
              <groupfilter function='member' level='[v_0]' member='80' />
              <groupfilter function='member' level='[v_0]' member='85' />
              <groupfilter function='member' level='[v_0]' member='86' />
              <groupfilter function='member' level='[v_0]' member='88' />
              <groupfilter function='member' level='[v_0]' member='99' />
              <groupfilter function='member' level='[v_0]' member='100' />
              <groupfilter function='member' level='[v_0]' member='102' />
              <groupfilter function='member' level='[v_0]' member='108' />
              <groupfilter function='member' level='[v_0]' member='111' />
              <groupfilter function='member' level='[v_0]' member='114' />
              <groupfilter function='member' level='[v_0]' member='115' />
              <groupfilter function='member' level='[v_0]' member='118' />
              <groupfilter function='member' level='[v_0]' member='119' />
              <groupfilter function='member' level='[v_0]' member='124' />
              <groupfilter function='member' level='[v_0]' member='125' />
              <groupfilter function='member' level='[v_0]' member='126' />
              <groupfilter function='member' level='[v_0]' member='128' />
              <groupfilter function='member' level='[v_0]' member='132' />
              <groupfilter function='member' level='[v_0]' member='133' />
              <groupfilter function='member' level='[v_0]' member='135' />
              <groupfilter function='member' level='[v_0]' member='137' />
              <groupfilter function='member' level='[v_0]' member='138' />
              <groupfilter function='member' level='[v_0]' member='140' />
              <groupfilter function='member' level='[v_0]' member='141' />
              <groupfilter function='member' level='[v_0]' member='145' />
              <groupfilter function='member' level='[v_0]' member='146' />
              <groupfilter function='member' level='[v_0]' member='147' />
              <groupfilter function='member' level='[v_0]' member='153' />
              <groupfilter function='member' level='[v_0]' member='154' />
              <groupfilter function='member' level='[v_0]' member='155' />
              <groupfilter function='member' level='[v_0]' member='156' />
              <groupfilter function='member' level='[v_0]' member='158' />
              <groupfilter function='member' level='[v_0]' member='162' />
              <groupfilter function='member' level='[v_0]' member='165' />
              <groupfilter function='member' level='[v_0]' member='177' />
              <groupfilter function='member' level='[v_0]' member='179' />
              <groupfilter function='member' level='[v_0]' member='182' />
              <groupfilter function='member' level='[v_0]' member='185' />
              <groupfilter function='member' level='[v_0]' member='189' />
              <groupfilter function='member' level='[v_0]' member='192' />
              <groupfilter function='member' level='[v_0]' member='194' />
              <groupfilter function='member' level='[v_0]' member='195' />
              <groupfilter function='member' level='[v_0]' member='196' />
              <groupfilter function='member' level='[v_0]' member='198' />
              <groupfilter function='member' level='[v_0]' member='200' />
              <groupfilter function='member' level='[v_0]' member='201' />
              <groupfilter function='member' level='[v_0]' member='202' />
              <groupfilter function='member' level='[v_0]' member='203' />
              <groupfilter function='member' level='[v_0]' member='204' />
              <groupfilter function='member' level='[v_0]' member='207' />
              <groupfilter function='member' level='[v_0]' member='209' />
              <groupfilter function='member' level='[v_0]' member='212' />
              <groupfilter function='member' level='[v_0]' member='216' />
              <groupfilter function='member' level='[v_0]' member='221' />
              <groupfilter function='member' level='[v_0]' member='225' />
              <groupfilter function='member' level='[v_0]' member='231' />
              <groupfilter function='member' level='[v_0]' member='233' />
              <groupfilter function='member' level='[v_0]' member='234' />
              <groupfilter function='member' level='[v_0]' member='235' />
              <groupfilter function='member' level='[v_0]' member='237' />
              <groupfilter function='member' level='[v_0]' member='238' />
              <groupfilter function='member' level='[v_0]' member='241' />
              <groupfilter function='member' level='[v_0]' member='242' />
              <groupfilter function='member' level='[v_0]' member='244' />
              <groupfilter function='member' level='[v_0]' member='245' />
              <groupfilter function='member' level='[v_0]' member='246' />
              <groupfilter function='member' level='[v_0]' member='247' />
              <groupfilter function='member' level='[v_0]' member='249' />
              <groupfilter function='member' level='[v_0]' member='250' />
              <groupfilter function='member' level='[v_0]' member='256' />
              <groupfilter function='member' level='[v_0]' member='258' />
              <groupfilter function='member' level='[v_0]' member='261' />
              <groupfilter function='member' level='[v_0]' member='262' />
              <groupfilter function='member' level='[v_0]' member='266' />
              <groupfilter function='member' level='[v_0]' member='267' />
              <groupfilter function='member' level='[v_0]' member='269' />
              <groupfilter function='member' level='[v_0]' member='271' />
              <groupfilter function='member' level='[v_0]' member='273' />
              <groupfilter function='member' level='[v_0]' member='275' />
              <groupfilter function='member' level='[v_0]' member='279' />
              <groupfilter function='member' level='[v_0]' member='281' />
              <groupfilter function='member' level='[v_0]' member='286' />
              <groupfilter function='member' level='[v_0]' member='287' />
              <groupfilter function='member' level='[v_0]' member='288' />
              <groupfilter function='member' level='[v_0]' member='289' />
              <groupfilter function='member' level='[v_0]' member='290' />
              <groupfilter function='member' level='[v_0]' member='292' />
              <groupfilter function='member' level='[v_0]' member='294' />
              <groupfilter function='member' level='[v_0]' member='295' />
              <groupfilter function='member' level='[v_0]' member='296' />
              <groupfilter function='member' level='[v_0]' member='299' />
              <groupfilter function='member' level='[v_0]' member='300' />
              <groupfilter function='member' level='[v_0]' member='301' />
              <groupfilter function='member' level='[v_0]' member='304' />
              <groupfilter function='member' level='[v_0]' member='306' />
              <groupfilter function='member' level='[v_0]' member='309' />
              <groupfilter function='member' level='[v_0]' member='313' />
              <groupfilter function='member' level='[v_0]' member='324' />
              <groupfilter function='member' level='[v_0]' member='325' />
              <groupfilter function='member' level='[v_0]' member='329' />
              <groupfilter function='member' level='[v_0]' member='331' />
              <groupfilter function='member' level='[v_0]' member='335' />
              <groupfilter function='member' level='[v_0]' member='336' />
              <groupfilter function='member' level='[v_0]' member='338' />
              <groupfilter function='member' level='[v_0]' member='340' />
              <groupfilter function='member' level='[v_0]' member='341' />
              <groupfilter function='member' level='[v_0]' member='345' />
              <groupfilter function='member' level='[v_0]' member='346' />
              <groupfilter function='member' level='[v_0]' member='347' />
              <groupfilter function='member' level='[v_0]' member='348' />
              <groupfilter function='member' level='[v_0]' member='349' />
              <groupfilter function='member' level='[v_0]' member='351' />
              <groupfilter function='member' level='[v_0]' member='352' />
              <groupfilter function='member' level='[v_0]' member='353' />
              <groupfilter function='member' level='[v_0]' member='356' />
              <groupfilter function='member' level='[v_0]' member='359' />
              <groupfilter function='member' level='[v_0]' member='363' />
              <groupfilter function='member' level='[v_0]' member='367' />
              <groupfilter function='member' level='[v_0]' member='369' />
              <groupfilter function='member' level='[v_0]' member='371' />
              <groupfilter function='member' level='[v_0]' member='373' />
              <groupfilter function='member' level='[v_0]' member='374' />
              <groupfilter function='member' level='[v_0]' member='376' />
              <groupfilter function='member' level='[v_0]' member='377' />
              <groupfilter function='member' level='[v_0]' member='380' />
              <groupfilter function='member' level='[v_0]' member='381' />
              <groupfilter function='member' level='[v_0]' member='383' />
              <groupfilter function='member' level='[v_0]' member='391' />
              <groupfilter function='member' level='[v_0]' member='392' />
              <groupfilter function='member' level='[v_0]' member='393' />
              <groupfilter function='member' level='[v_0]' member='394' />
              <groupfilter function='member' level='[v_0]' member='395' />
              <groupfilter function='member' level='[v_0]' member='396' />
              <groupfilter function='member' level='[v_0]' member='397' />
              <groupfilter function='member' level='[v_0]' member='399' />
              <groupfilter function='member' level='[v_0]' member='401' />
              <groupfilter function='member' level='[v_0]' member='402' />
              <groupfilter function='member' level='[v_0]' member='406' />
              <groupfilter function='member' level='[v_0]' member='407' />
              <groupfilter function='member' level='[v_0]' member='408' />
              <groupfilter function='member' level='[v_0]' member='409' />
              <groupfilter function='member' level='[v_0]' member='411' />
              <groupfilter function='member' level='[v_0]' member='412' />
              <groupfilter function='member' level='[v_0]' member='416' />
              <groupfilter function='member' level='[v_0]' member='418' />
              <groupfilter function='member' level='[v_0]' member='419' />
              <groupfilter function='member' level='[v_0]' member='420' />
              <groupfilter function='member' level='[v_0]' member='422' />
              <groupfilter function='member' level='[v_0]' member='424' />
              <groupfilter function='member' level='[v_0]' member='425' />
              <groupfilter function='member' level='[v_0]' member='426' />
              <groupfilter function='member' level='[v_0]' member='427' />
              <groupfilter function='member' level='[v_0]' member='428' />
              <groupfilter function='member' level='[v_0]' member='429' />
              <groupfilter function='member' level='[v_0]' member='430' />
              <groupfilter function='member' level='[v_0]' member='431' />
              <groupfilter function='member' level='[v_0]' member='434' />
              <groupfilter function='member' level='[v_0]' member='435' />
              <groupfilter function='member' level='[v_0]' member='436' />
              <groupfilter function='member' level='[v_0]' member='437' />
              <groupfilter function='member' level='[v_0]' member='439' />
              <groupfilter function='member' level='[v_0]' member='443' />
              <groupfilter function='member' level='[v_0]' member='450' />
              <groupfilter function='member' level='[v_0]' member='453' />
              <groupfilter function='member' level='[v_0]' member='454' />
              <groupfilter function='member' level='[v_0]' member='457' />
              <groupfilter function='member' level='[v_0]' member='458' />
              <groupfilter function='member' level='[v_0]' member='460' />
              <groupfilter function='member' level='[v_0]' member='462' />
              <groupfilter function='member' level='[v_0]' member='463' />
              <groupfilter function='member' level='[v_0]' member='465' />
              <groupfilter function='member' level='[v_0]' member='466' />
              <groupfilter function='member' level='[v_0]' member='469' />
              <groupfilter function='member' level='[v_0]' member='472' />
              <groupfilter function='member' level='[v_0]' member='474' />
              <groupfilter function='member' level='[v_0]' member='475' />
              <groupfilter function='member' level='[v_0]' member='477' />
              <groupfilter function='member' level='[v_0]' member='486' />
              <groupfilter function='member' level='[v_0]' member='489' />
              <groupfilter function='member' level='[v_0]' member='490' />
              <groupfilter function='member' level='[v_0]' member='491' />
              <groupfilter function='member' level='[v_0]' member='492' />
              <groupfilter function='member' level='[v_0]' member='495' />
              <groupfilter function='member' level='[v_0]' member='499' />
              <groupfilter function='member' level='[v_0]' member='500' />
              <groupfilter function='member' level='[v_0]' member='503' />
              <groupfilter function='member' level='[v_0]' member='504' />
              <groupfilter function='member' level='[v_0]' member='505' />
              <groupfilter function='member' level='[v_0]' member='508' />
              <groupfilter function='member' level='[v_0]' member='509' />
              <groupfilter function='member' level='[v_0]' member='510' />
              <groupfilter function='member' level='[v_0]' member='512' />
              <groupfilter function='member' level='[v_0]' member='515' />
              <groupfilter function='member' level='[v_0]' member='517' />
              <groupfilter function='member' level='[v_0]' member='518' />
              <groupfilter function='member' level='[v_0]' member='519' />
              <groupfilter function='member' level='[v_0]' member='520' />
              <groupfilter function='member' level='[v_0]' member='522' />
              <groupfilter function='member' level='[v_0]' member='524' />
              <groupfilter function='member' level='[v_0]' member='526' />
              <groupfilter function='member' level='[v_0]' member='530' />
              <groupfilter function='member' level='[v_0]' member='531' />
              <groupfilter function='member' level='[v_0]' member='532' />
              <groupfilter function='member' level='[v_0]' member='535' />
              <groupfilter function='member' level='[v_0]' member='539' />
              <groupfilter function='member' level='[v_0]' member='540' />
              <groupfilter function='member' level='[v_0]' member='544' />
              <groupfilter function='member' level='[v_0]' member='547' />
              <groupfilter function='member' level='[v_0]' member='549' />
              <groupfilter function='member' level='[v_0]' member='550' />
              <groupfilter function='member' level='[v_0]' member='555' />
              <groupfilter function='member' level='[v_0]' member='556' />
              <groupfilter function='member' level='[v_0]' member='559' />
              <groupfilter function='member' level='[v_0]' member='563' />
              <groupfilter function='member' level='[v_0]' member='564' />
              <groupfilter function='member' level='[v_0]' member='565' />
              <groupfilter function='member' level='[v_0]' member='568' />
              <groupfilter function='member' level='[v_0]' member='569' />
              <groupfilter function='member' level='[v_0]' member='570' />
              <groupfilter function='member' level='[v_0]' member='574' />
              <groupfilter function='member' level='[v_0]' member='575' />
              <groupfilter function='member' level='[v_0]' member='576' />
              <groupfilter function='member' level='[v_0]' member='577' />
              <groupfilter function='member' level='[v_0]' member='579' />
              <groupfilter function='member' level='[v_0]' member='582' />
              <groupfilter function='member' level='[v_0]' member='583' />
              <groupfilter function='member' level='[v_0]' member='584' />
              <groupfilter function='member' level='[v_0]' member='585' />
              <groupfilter function='member' level='[v_0]' member='587' />
              <groupfilter function='member' level='[v_0]' member='589' />
              <groupfilter function='member' level='[v_0]' member='592' />
              <groupfilter function='member' level='[v_0]' member='593' />
              <groupfilter function='member' level='[v_0]' member='594' />
              <groupfilter function='member' level='[v_0]' member='596' />
              <groupfilter function='member' level='[v_0]' member='597' />
              <groupfilter function='member' level='[v_0]' member='598' />
              <groupfilter function='member' level='[v_0]' member='600' />
              <groupfilter function='member' level='[v_0]' member='601' />
              <groupfilter function='member' level='[v_0]' member='605' />
              <groupfilter function='member' level='[v_0]' member='607' />
              <groupfilter function='member' level='[v_0]' member='608' />
              <groupfilter function='member' level='[v_0]' member='609' />
              <groupfilter function='member' level='[v_0]' member='610' />
              <groupfilter function='member' level='[v_0]' member='611' />
              <groupfilter function='member' level='[v_0]' member='614' />
              <groupfilter function='member' level='[v_0]' member='615' />
              <groupfilter function='member' level='[v_0]' member='619' />
              <groupfilter function='member' level='[v_0]' member='620' />
              <groupfilter function='member' level='[v_0]' member='622' />
              <groupfilter function='member' level='[v_0]' member='623' />
              <groupfilter function='member' level='[v_0]' member='624' />
              <groupfilter function='member' level='[v_0]' member='625' />
              <groupfilter function='member' level='[v_0]' member='626' />
              <groupfilter function='member' level='[v_0]' member='627' />
              <groupfilter function='member' level='[v_0]' member='628' />
              <groupfilter function='member' level='[v_0]' member='632' />
              <groupfilter function='member' level='[v_0]' member='633' />
              <groupfilter function='member' level='[v_0]' member='635' />
              <groupfilter function='member' level='[v_0]' member='636' />
              <groupfilter function='member' level='[v_0]' member='637' />
              <groupfilter function='member' level='[v_0]' member='642' />
              <groupfilter function='member' level='[v_0]' member='644' />
              <groupfilter function='member' level='[v_0]' member='645' />
              <groupfilter function='member' level='[v_0]' member='646' />
              <groupfilter function='member' level='[v_0]' member='648' />
              <groupfilter function='member' level='[v_0]' member='650' />
              <groupfilter function='member' level='[v_0]' member='652' />
              <groupfilter function='member' level='[v_0]' member='654' />
              <groupfilter function='member' level='[v_0]' member='655' />
              <groupfilter function='member' level='[v_0]' member='656' />
              <groupfilter function='member' level='[v_0]' member='658' />
              <groupfilter function='member' level='[v_0]' member='660' />
              <groupfilter function='member' level='[v_0]' member='666' />
              <groupfilter function='member' level='[v_0]' member='669' />
              <groupfilter function='member' level='[v_0]' member='670' />
              <groupfilter function='member' level='[v_0]' member='672' />
              <groupfilter function='member' level='[v_0]' member='673' />
              <groupfilter function='member' level='[v_0]' member='674' />
              <groupfilter function='member' level='[v_0]' member='678' />
              <groupfilter function='member' level='[v_0]' member='683' />
              <groupfilter function='member' level='[v_0]' member='687' />
              <groupfilter function='member' level='[v_0]' member='688' />
              <groupfilter function='member' level='[v_0]' member='689' />
              <groupfilter function='member' level='[v_0]' member='690' />
              <groupfilter function='member' level='[v_0]' member='691' />
              <groupfilter function='member' level='[v_0]' member='695' />
              <groupfilter function='member' level='[v_0]' member='696' />
              <groupfilter function='member' level='[v_0]' member='697' />
              <groupfilter function='member' level='[v_0]' member='698' />
              <groupfilter function='member' level='[v_0]' member='699' />
              <groupfilter function='member' level='[v_0]' member='701' />
              <groupfilter function='member' level='[v_0]' member='702' />
              <groupfilter function='member' level='[v_0]' member='704' />
              <groupfilter function='member' level='[v_0]' member='706' />
              <groupfilter function='member' level='[v_0]' member='708' />
              <groupfilter function='member' level='[v_0]' member='711' />
              <groupfilter function='member' level='[v_0]' member='712' />
              <groupfilter function='member' level='[v_0]' member='713' />
              <groupfilter function='member' level='[v_0]' member='716' />
              <groupfilter function='member' level='[v_0]' member='721' />
              <groupfilter function='member' level='[v_0]' member='723' />
              <groupfilter function='member' level='[v_0]' member='724' />
              <groupfilter function='member' level='[v_0]' member='725' />
              <groupfilter function='member' level='[v_0]' member='726' />
              <groupfilter function='member' level='[v_0]' member='727' />
              <groupfilter function='member' level='[v_0]' member='729' />
              <groupfilter function='member' level='[v_0]' member='730' />
              <groupfilter function='member' level='[v_0]' member='731' />
              <groupfilter function='member' level='[v_0]' member='732' />
              <groupfilter function='member' level='[v_0]' member='733' />
              <groupfilter function='member' level='[v_0]' member='737' />
              <groupfilter function='member' level='[v_0]' member='738' />
              <groupfilter function='member' level='[v_0]' member='739' />
              <groupfilter function='member' level='[v_0]' member='742' />
              <groupfilter function='member' level='[v_0]' member='743' />
              <groupfilter function='member' level='[v_0]' member='744' />
              <groupfilter function='member' level='[v_0]' member='745' />
              <groupfilter function='member' level='[v_0]' member='746' />
              <groupfilter function='member' level='[v_0]' member='748' />
              <groupfilter function='member' level='[v_0]' member='749' />
              <groupfilter function='member' level='[v_0]' member='753' />
              <groupfilter function='member' level='[v_0]' member='756' />
              <groupfilter function='member' level='[v_0]' member='758' />
              <groupfilter function='member' level='[v_0]' member='759' />
              <groupfilter function='member' level='[v_0]' member='762' />
              <groupfilter function='member' level='[v_0]' member='763' />
              <groupfilter function='member' level='[v_0]' member='764' />
              <groupfilter function='member' level='[v_0]' member='765' />
              <groupfilter function='member' level='[v_0]' member='766' />
              <groupfilter function='member' level='[v_0]' member='767' />
              <groupfilter function='member' level='[v_0]' member='773' />
              <groupfilter function='member' level='[v_0]' member='775' />
              <groupfilter function='member' level='[v_0]' member='780' />
              <groupfilter function='member' level='[v_0]' member='781' />
              <groupfilter function='member' level='[v_0]' member='782' />
              <groupfilter function='member' level='[v_0]' member='783' />
              <groupfilter function='member' level='[v_0]' member='784' />
              <groupfilter function='member' level='[v_0]' member='785' />
              <groupfilter function='member' level='[v_0]' member='786' />
              <groupfilter function='member' level='[v_0]' member='787' />
              <groupfilter function='member' level='[v_0]' member='788' />
              <groupfilter function='member' level='[v_0]' member='789' />
              <groupfilter function='member' level='[v_0]' member='791' />
              <groupfilter function='member' level='[v_0]' member='792' />
              <groupfilter function='member' level='[v_0]' member='793' />
              <groupfilter function='member' level='[v_0]' member='795' />
              <groupfilter function='member' level='[v_0]' member='796' />
              <groupfilter function='member' level='[v_0]' member='799' />
              <groupfilter function='member' level='[v_0]' member='800' />
              <groupfilter function='member' level='[v_0]' member='802' />
              <groupfilter function='member' level='[v_0]' member='803' />
              <groupfilter function='member' level='[v_0]' member='806' />
              <groupfilter function='member' level='[v_0]' member='807' />
              <groupfilter function='member' level='[v_0]' member='808' />
              <groupfilter function='member' level='[v_0]' member='812' />
              <groupfilter function='member' level='[v_0]' member='813' />
              <groupfilter function='member' level='[v_0]' member='817' />
              <groupfilter function='member' level='[v_0]' member='818' />
              <groupfilter function='member' level='[v_0]' member='820' />
              <groupfilter function='member' level='[v_0]' member='821' />
              <groupfilter function='member' level='[v_0]' member='823' />
              <groupfilter function='member' level='[v_0]' member='824' />
              <groupfilter function='member' level='[v_0]' member='827' />
              <groupfilter function='member' level='[v_0]' member='829' />
              <groupfilter function='member' level='[v_0]' member='831' />
              <groupfilter function='member' level='[v_0]' member='832' />
              <groupfilter function='member' level='[v_0]' member='834' />
              <groupfilter function='member' level='[v_0]' member='835' />
              <groupfilter function='member' level='[v_0]' member='840' />
              <groupfilter function='member' level='[v_0]' member='843' />
              <groupfilter function='member' level='[v_0]' member='845' />
              <groupfilter function='member' level='[v_0]' member='848' />
              <groupfilter function='member' level='[v_0]' member='849' />
              <groupfilter function='member' level='[v_0]' member='850' />
              <groupfilter function='member' level='[v_0]' member='853' />
              <groupfilter function='member' level='[v_0]' member='855' />
              <groupfilter function='member' level='[v_0]' member='856' />
              <groupfilter function='member' level='[v_0]' member='857' />
              <groupfilter function='member' level='[v_0]' member='858' />
              <groupfilter function='member' level='[v_0]' member='861' />
              <groupfilter function='member' level='[v_0]' member='862' />
              <groupfilter function='member' level='[v_0]' member='863' />
              <groupfilter function='member' level='[v_0]' member='865' />
              <groupfilter function='member' level='[v_0]' member='867' />
              <groupfilter function='member' level='[v_0]' member='868' />
              <groupfilter function='member' level='[v_0]' member='871' />
              <groupfilter function='member' level='[v_0]' member='873' />
              <groupfilter function='member' level='[v_0]' member='875' />
              <groupfilter function='member' level='[v_0]' member='877' />
              <groupfilter function='member' level='[v_0]' member='879' />
              <groupfilter function='member' level='[v_0]' member='880' />
              <groupfilter function='member' level='[v_0]' member='883' />
              <groupfilter function='member' level='[v_0]' member='886' />
              <groupfilter function='member' level='[v_0]' member='888' />
              <groupfilter function='member' level='[v_0]' member='889' />
              <groupfilter function='member' level='[v_0]' member='890' />
              <groupfilter function='member' level='[v_0]' member='891' />
              <groupfilter function='member' level='[v_0]' member='892' />
              <groupfilter function='member' level='[v_0]' member='893' />
              <groupfilter function='member' level='[v_0]' member='896' />
              <groupfilter function='member' level='[v_0]' member='899' />
              <groupfilter function='member' level='[v_0]' member='904' />
              <groupfilter function='member' level='[v_0]' member='906' />
              <groupfilter function='member' level='[v_0]' member='907' />
              <groupfilter function='member' level='[v_0]' member='910' />
              <groupfilter function='member' level='[v_0]' member='914' />
              <groupfilter function='member' level='[v_0]' member='915' />
              <groupfilter function='member' level='[v_0]' member='919' />
              <groupfilter function='member' level='[v_0]' member='921' />
              <groupfilter function='member' level='[v_0]' member='922' />
              <groupfilter function='member' level='[v_0]' member='923' />
              <groupfilter function='member' level='[v_0]' member='924' />
              <groupfilter function='member' level='[v_0]' member='929' />
              <groupfilter function='member' level='[v_0]' member='930' />
              <groupfilter function='member' level='[v_0]' member='932' />
              <groupfilter function='member' level='[v_0]' member='934' />
              <groupfilter function='member' level='[v_0]' member='936' />
              <groupfilter function='member' level='[v_0]' member='939' />
              <groupfilter function='member' level='[v_0]' member='940' />
              <groupfilter function='member' level='[v_0]' member='941' />
              <groupfilter function='member' level='[v_0]' member='945' />
              <groupfilter function='member' level='[v_0]' member='947' />
              <groupfilter function='member' level='[v_0]' member='950' />
              <groupfilter function='member' level='[v_0]' member='952' />
              <groupfilter function='member' level='[v_0]' member='958' />
              <groupfilter function='member' level='[v_0]' member='962' />
              <groupfilter function='member' level='[v_0]' member='967' />
              <groupfilter function='member' level='[v_0]' member='968' />
              <groupfilter function='member' level='[v_0]' member='969' />
              <groupfilter function='member' level='[v_0]' member='972' />
              <groupfilter function='member' level='[v_0]' member='973' />
              <groupfilter function='member' level='[v_0]' member='978' />
              <groupfilter function='member' level='[v_0]' member='979' />
              <groupfilter function='member' level='[v_0]' member='981' />
              <groupfilter function='member' level='[v_0]' member='986' />
              <groupfilter function='member' level='[v_0]' member='988' />
              <groupfilter function='member' level='[v_0]' member='991' />
              <groupfilter function='member' level='[v_0]' member='994' />
              <groupfilter function='member' level='[v_0]' member='995' />
              <groupfilter function='member' level='[v_0]' member='996' />
              <groupfilter function='member' level='[v_0]' member='998' />
              <groupfilter function='member' level='[v_0]' member='1001' />
              <groupfilter function='member' level='[v_0]' member='1002' />
              <groupfilter function='member' level='[v_0]' member='1003' />
              <groupfilter function='member' level='[v_0]' member='1006' />
              <groupfilter function='member' level='[v_0]' member='1007' />
              <groupfilter function='member' level='[v_0]' member='1009' />
              <groupfilter function='member' level='[v_0]' member='1012' />
              <groupfilter function='member' level='[v_0]' member='1015' />
              <groupfilter function='member' level='[v_0]' member='1023' />
              <groupfilter function='member' level='[v_0]' member='1025' />
              <groupfilter function='member' level='[v_0]' member='1027' />
              <groupfilter function='member' level='[v_0]' member='1028' />
              <groupfilter function='member' level='[v_0]' member='1029' />
              <groupfilter function='member' level='[v_0]' member='1031' />
              <groupfilter function='member' level='[v_0]' member='1032' />
              <groupfilter function='member' level='[v_0]' member='1035' />
              <groupfilter function='member' level='[v_0]' member='1038' />
              <groupfilter function='member' level='[v_0]' member='1040' />
              <groupfilter function='member' level='[v_0]' member='1041' />
              <groupfilter function='member' level='[v_0]' member='1042' />
              <groupfilter function='member' level='[v_0]' member='1043' />
              <groupfilter function='member' level='[v_0]' member='1047' />
              <groupfilter function='member' level='[v_0]' member='1049' />
              <groupfilter function='member' level='[v_0]' member='1050' />
              <groupfilter function='member' level='[v_0]' member='1051' />
              <groupfilter function='member' level='[v_0]' member='1052' />
              <groupfilter function='member' level='[v_0]' member='1053' />
              <groupfilter function='member' level='[v_0]' member='1055' />
              <groupfilter function='member' level='[v_0]' member='1056' />
              <groupfilter function='member' level='[v_0]' member='1057' />
              <groupfilter function='member' level='[v_0]' member='1058' />
              <groupfilter function='member' level='[v_0]' member='1060' />
              <groupfilter function='member' level='[v_0]' member='1062' />
              <groupfilter function='member' level='[v_0]' member='1063' />
              <groupfilter function='member' level='[v_0]' member='1065' />
              <groupfilter function='member' level='[v_0]' member='1067' />
              <groupfilter function='member' level='[v_0]' member='1073' />
              <groupfilter function='member' level='[v_0]' member='1074' />
              <groupfilter function='member' level='[v_0]' member='1075' />
              <groupfilter function='member' level='[v_0]' member='1077' />
              <groupfilter function='member' level='[v_0]' member='1079' />
              <groupfilter function='member' level='[v_0]' member='1080' />
              <groupfilter function='member' level='[v_0]' member='1082' />
              <groupfilter function='member' level='[v_0]' member='1083' />
              <groupfilter function='member' level='[v_0]' member='1084' />
              <groupfilter function='member' level='[v_0]' member='1086' />
              <groupfilter function='member' level='[v_0]' member='1089' />
              <groupfilter function='member' level='[v_0]' member='1091' />
              <groupfilter function='member' level='[v_0]' member='1092' />
              <groupfilter function='member' level='[v_0]' member='1093' />
              <groupfilter function='member' level='[v_0]' member='1094' />
              <groupfilter function='member' level='[v_0]' member='1097' />
              <groupfilter function='member' level='[v_0]' member='1099' />
              <groupfilter function='member' level='[v_0]' member='1103' />
              <groupfilter function='member' level='[v_0]' member='1104' />
              <groupfilter function='member' level='[v_0]' member='1105' />
              <groupfilter function='member' level='[v_0]' member='1106' />
              <groupfilter function='member' level='[v_0]' member='1107' />
              <groupfilter function='member' level='[v_0]' member='1108' />
              <groupfilter function='member' level='[v_0]' member='1111' />
              <groupfilter function='member' level='[v_0]' member='1113' />
              <groupfilter function='member' level='[v_0]' member='1115' />
              <groupfilter function='member' level='[v_0]' member='1119' />
              <groupfilter function='member' level='[v_0]' member='1121' />
              <groupfilter function='member' level='[v_0]' member='1123' />
              <groupfilter function='member' level='[v_0]' member='1124' />
              <groupfilter function='member' level='[v_0]' member='1125' />
              <groupfilter function='member' level='[v_0]' member='1127' />
              <groupfilter function='member' level='[v_0]' member='1131' />
              <groupfilter function='member' level='[v_0]' member='1132' />
              <groupfilter function='member' level='[v_0]' member='1133' />
              <groupfilter function='member' level='[v_0]' member='1134' />
              <groupfilter function='member' level='[v_0]' member='1135' />
              <groupfilter function='member' level='[v_0]' member='1136' />
              <groupfilter function='member' level='[v_0]' member='1137' />
              <groupfilter function='member' level='[v_0]' member='1139' />
              <groupfilter function='member' level='[v_0]' member='1141' />
              <groupfilter function='member' level='[v_0]' member='1145' />
              <groupfilter function='member' level='[v_0]' member='1148' />
              <groupfilter function='member' level='[v_0]' member='1149' />
              <groupfilter function='member' level='[v_0]' member='1150' />
              <groupfilter function='member' level='[v_0]' member='1152' />
              <groupfilter function='member' level='[v_0]' member='1156' />
              <groupfilter function='member' level='[v_0]' member='1157' />
              <groupfilter function='member' level='[v_0]' member='1160' />
              <groupfilter function='member' level='[v_0]' member='1161' />
              <groupfilter function='member' level='[v_0]' member='1162' />
              <groupfilter function='member' level='[v_0]' member='1164' />
              <groupfilter function='member' level='[v_0]' member='1165' />
              <groupfilter function='member' level='[v_0]' member='1167' />
              <groupfilter function='member' level='[v_0]' member='1168' />
              <groupfilter function='member' level='[v_0]' member='1169' />
              <groupfilter function='member' level='[v_0]' member='1171' />
              <groupfilter function='member' level='[v_0]' member='1172' />
              <groupfilter function='member' level='[v_0]' member='1173' />
              <groupfilter function='member' level='[v_0]' member='1175' />
              <groupfilter function='member' level='[v_0]' member='1176' />
              <groupfilter function='member' level='[v_0]' member='1177' />
              <groupfilter function='member' level='[v_0]' member='1178' />
              <groupfilter function='member' level='[v_0]' member='1184' />
              <groupfilter function='member' level='[v_0]' member='1185' />
              <groupfilter function='member' level='[v_0]' member='1186' />
              <groupfilter function='member' level='[v_0]' member='1188' />
              <groupfilter function='member' level='[v_0]' member='1189' />
              <groupfilter function='member' level='[v_0]' member='1195' />
              <groupfilter function='member' level='[v_0]' member='1197' />
              <groupfilter function='member' level='[v_0]' member='1198' />
              <groupfilter function='member' level='[v_0]' member='1199' />
              <groupfilter function='member' level='[v_0]' member='1202' />
              <groupfilter function='member' level='[v_0]' member='1203' />
              <groupfilter function='member' level='[v_0]' member='1210' />
              <groupfilter function='member' level='[v_0]' member='1213' />
              <groupfilter function='member' level='[v_0]' member='1214' />
              <groupfilter function='member' level='[v_0]' member='1215' />
              <groupfilter function='member' level='[v_0]' member='1218' />
              <groupfilter function='member' level='[v_0]' member='1220' />
              <groupfilter function='member' level='[v_0]' member='1221' />
              <groupfilter function='member' level='[v_0]' member='1222' />
              <groupfilter function='member' level='[v_0]' member='1225' />
              <groupfilter function='member' level='[v_0]' member='1227' />
              <groupfilter function='member' level='[v_0]' member='1228' />
              <groupfilter function='member' level='[v_0]' member='1229' />
              <groupfilter function='member' level='[v_0]' member='1231' />
              <groupfilter function='member' level='[v_0]' member='1235' />
              <groupfilter function='member' level='[v_0]' member='1236' />
              <groupfilter function='member' level='[v_0]' member='1237' />
              <groupfilter function='member' level='[v_0]' member='1240' />
              <groupfilter function='member' level='[v_0]' member='1245' />
              <groupfilter function='member' level='[v_0]' member='1247' />
              <groupfilter function='member' level='[v_0]' member='1249' />
              <groupfilter function='member' level='[v_0]' member='1250' />
              <groupfilter function='member' level='[v_0]' member='1251' />
              <groupfilter function='member' level='[v_0]' member='1257' />
              <groupfilter function='member' level='[v_0]' member='1260' />
              <groupfilter function='member' level='[v_0]' member='1261' />
              <groupfilter function='member' level='[v_0]' member='1268' />
              <groupfilter function='member' level='[v_0]' member='1270' />
              <groupfilter function='member' level='[v_0]' member='1271' />
              <groupfilter function='member' level='[v_0]' member='1272' />
              <groupfilter function='member' level='[v_0]' member='1273' />
              <groupfilter function='member' level='[v_0]' member='1274' />
              <groupfilter function='member' level='[v_0]' member='1276' />
              <groupfilter function='member' level='[v_0]' member='1280' />
              <groupfilter function='member' level='[v_0]' member='1283' />
              <groupfilter function='member' level='[v_0]' member='1285' />
              <groupfilter function='member' level='[v_0]' member='1286' />
              <groupfilter function='member' level='[v_0]' member='1287' />
              <groupfilter function='member' level='[v_0]' member='1288' />
              <groupfilter function='member' level='[v_0]' member='1289' />
              <groupfilter function='member' level='[v_0]' member='1290' />
              <groupfilter function='member' level='[v_0]' member='1291' />
              <groupfilter function='member' level='[v_0]' member='1292' />
              <groupfilter function='member' level='[v_0]' member='1293' />
              <groupfilter function='member' level='[v_0]' member='1295' />
              <groupfilter function='member' level='[v_0]' member='1296' />
              <groupfilter function='member' level='[v_0]' member='1301' />
              <groupfilter function='member' level='[v_0]' member='1302' />
              <groupfilter function='member' level='[v_0]' member='1303' />
              <groupfilter function='member' level='[v_0]' member='1309' />
              <groupfilter function='member' level='[v_0]' member='1310' />
              <groupfilter function='member' level='[v_0]' member='1312' />
              <groupfilter function='member' level='[v_0]' member='1313' />
              <groupfilter function='member' level='[v_0]' member='1314' />
              <groupfilter function='member' level='[v_0]' member='1316' />
              <groupfilter function='member' level='[v_0]' member='1317' />
              <groupfilter function='member' level='[v_0]' member='1318' />
              <groupfilter function='member' level='[v_0]' member='1319' />
              <groupfilter function='member' level='[v_0]' member='1320' />
              <groupfilter function='member' level='[v_0]' member='1322' />
              <groupfilter function='member' level='[v_0]' member='1323' />
              <groupfilter function='member' level='[v_0]' member='1324' />
              <groupfilter function='member' level='[v_0]' member='1325' />
              <groupfilter function='member' level='[v_0]' member='1329' />
              <groupfilter function='member' level='[v_0]' member='1332' />
              <groupfilter function='member' level='[v_0]' member='1333' />
              <groupfilter function='member' level='[v_0]' member='1334' />
              <groupfilter function='member' level='[v_0]' member='1335' />
              <groupfilter function='member' level='[v_0]' member='1336' />
              <groupfilter function='member' level='[v_0]' member='1339' />
              <groupfilter function='member' level='[v_0]' member='1340' />
              <groupfilter function='member' level='[v_0]' member='1341' />
              <groupfilter function='member' level='[v_0]' member='1343' />
              <groupfilter function='member' level='[v_0]' member='1344' />
              <groupfilter function='member' level='[v_0]' member='1350' />
              <groupfilter function='member' level='[v_0]' member='1351' />
              <groupfilter function='member' level='[v_0]' member='1352' />
              <groupfilter function='member' level='[v_0]' member='1353' />
              <groupfilter function='member' level='[v_0]' member='1354' />
              <groupfilter function='member' level='[v_0]' member='1355' />
              <groupfilter function='member' level='[v_0]' member='1356' />
              <groupfilter function='member' level='[v_0]' member='1357' />
              <groupfilter function='member' level='[v_0]' member='1358' />
              <groupfilter function='member' level='[v_0]' member='1361' />
              <groupfilter function='member' level='[v_0]' member='1362' />
              <groupfilter function='member' level='[v_0]' member='1364' />
              <groupfilter function='member' level='[v_0]' member='1365' />
              <groupfilter function='member' level='[v_0]' member='1367' />
              <groupfilter function='member' level='[v_0]' member='1368' />
              <groupfilter function='member' level='[v_0]' member='1370' />
              <groupfilter function='member' level='[v_0]' member='1371' />
              <groupfilter function='member' level='[v_0]' member='1375' />
              <groupfilter function='member' level='[v_0]' member='1376' />
              <groupfilter function='member' level='[v_0]' member='1377' />
              <groupfilter function='member' level='[v_0]' member='1380' />
              <groupfilter function='member' level='[v_0]' member='1382' />
              <groupfilter function='member' level='[v_0]' member='1386' />
              <groupfilter function='member' level='[v_0]' member='1388' />
              <groupfilter function='member' level='[v_0]' member='1391' />
              <groupfilter function='member' level='[v_0]' member='1395' />
              <groupfilter function='member' level='[v_0]' member='1397' />
              <groupfilter function='member' level='[v_0]' member='1399' />
              <groupfilter function='member' level='[v_0]' member='1400' />
              <groupfilter function='member' level='[v_0]' member='1402' />
              <groupfilter function='member' level='[v_0]' member='1405' />
              <groupfilter function='member' level='[v_0]' member='1406' />
              <groupfilter function='member' level='[v_0]' member='1407' />
              <groupfilter function='member' level='[v_0]' member='1409' />
              <groupfilter function='member' level='[v_0]' member='1411' />
              <groupfilter function='member' level='[v_0]' member='1413' />
              <groupfilter function='member' level='[v_0]' member='1419' />
              <groupfilter function='member' level='[v_0]' member='1420' />
              <groupfilter function='member' level='[v_0]' member='1422' />
              <groupfilter function='member' level='[v_0]' member='1423' />
              <groupfilter function='member' level='[v_0]' member='1426' />
              <groupfilter function='member' level='[v_0]' member='1427' />
              <groupfilter function='member' level='[v_0]' member='1428' />
              <groupfilter function='member' level='[v_0]' member='1431' />
              <groupfilter function='member' level='[v_0]' member='1433' />
              <groupfilter function='member' level='[v_0]' member='1435' />
              <groupfilter function='member' level='[v_0]' member='1436' />
              <groupfilter function='member' level='[v_0]' member='1442' />
              <groupfilter function='member' level='[v_0]' member='1443' />
              <groupfilter function='member' level='[v_0]' member='1444' />
              <groupfilter function='member' level='[v_0]' member='1445' />
              <groupfilter function='member' level='[v_0]' member='1446' />
              <groupfilter function='member' level='[v_0]' member='1449' />
              <groupfilter function='member' level='[v_0]' member='1451' />
              <groupfilter function='member' level='[v_0]' member='1452' />
              <groupfilter function='member' level='[v_0]' member='1453' />
              <groupfilter function='member' level='[v_0]' member='1454' />
              <groupfilter function='member' level='[v_0]' member='1455' />
              <groupfilter function='member' level='[v_0]' member='1456' />
              <groupfilter function='member' level='[v_0]' member='1457' />
              <groupfilter function='member' level='[v_0]' member='1459' />
              <groupfilter function='member' level='[v_0]' member='1460' />
              <groupfilter function='member' level='[v_0]' member='1463' />
              <groupfilter function='member' level='[v_0]' member='1465' />
              <groupfilter function='member' level='[v_0]' member='1466' />
              <groupfilter function='member' level='[v_0]' member='1470' />
              <groupfilter function='member' level='[v_0]' member='1472' />
              <groupfilter function='member' level='[v_0]' member='1473' />
              <groupfilter function='member' level='[v_0]' member='1484' />
              <groupfilter function='member' level='[v_0]' member='1485' />
              <groupfilter function='member' level='[v_0]' member='1486' />
              <groupfilter function='member' level='[v_0]' member='1487' />
              <groupfilter function='member' level='[v_0]' member='1488' />
              <groupfilter function='member' level='[v_0]' member='1490' />
              <groupfilter function='member' level='[v_0]' member='1491' />
              <groupfilter function='member' level='[v_0]' member='1493' />
              <groupfilter function='member' level='[v_0]' member='1495' />
              <groupfilter function='member' level='[v_0]' member='1500' />
              <groupfilter function='member' level='[v_0]' member='1501' />
              <groupfilter function='member' level='[v_0]' member='1504' />
              <groupfilter function='member' level='[v_0]' member='1505' />
              <groupfilter function='member' level='[v_0]' member='1507' />
              <groupfilter function='member' level='[v_0]' member='1508' />
              <groupfilter function='member' level='[v_0]' member='1509' />
              <groupfilter function='member' level='[v_0]' member='1510' />
              <groupfilter function='member' level='[v_0]' member='1511' />
              <groupfilter function='member' level='[v_0]' member='1512' />
              <groupfilter function='member' level='[v_0]' member='1515' />
              <groupfilter function='member' level='[v_0]' member='1517' />
              <groupfilter function='member' level='[v_0]' member='1520' />
              <groupfilter function='member' level='[v_0]' member='1522' />
              <groupfilter function='member' level='[v_0]' member='1523' />
              <groupfilter function='member' level='[v_0]' member='1526' />
              <groupfilter function='member' level='[v_0]' member='1530' />
              <groupfilter function='member' level='[v_0]' member='1531' />
              <groupfilter function='member' level='[v_0]' member='1533' />
              <groupfilter function='member' level='[v_0]' member='1534' />
              <groupfilter function='member' level='[v_0]' member='1537' />
              <groupfilter function='member' level='[v_0]' member='1539' />
              <groupfilter function='member' level='[v_0]' member='1541' />
              <groupfilter function='member' level='[v_0]' member='1543' />
              <groupfilter function='member' level='[v_0]' member='1544' />
              <groupfilter function='member' level='[v_0]' member='1546' />
              <groupfilter function='member' level='[v_0]' member='1547' />
              <groupfilter function='member' level='[v_0]' member='1548' />
              <groupfilter function='member' level='[v_0]' member='1549' />
              <groupfilter function='member' level='[v_0]' member='1553' />
              <groupfilter function='member' level='[v_0]' member='1556' />
              <groupfilter function='member' level='[v_0]' member='1559' />
              <groupfilter function='member' level='[v_0]' member='1560' />
              <groupfilter function='member' level='[v_0]' member='1561' />
              <groupfilter function='member' level='[v_0]' member='1563' />
              <groupfilter function='member' level='[v_0]' member='1568' />
              <groupfilter function='member' level='[v_0]' member='1569' />
              <groupfilter function='member' level='[v_0]' member='1570' />
              <groupfilter function='member' level='[v_0]' member='1571' />
              <groupfilter function='member' level='[v_0]' member='1572' />
              <groupfilter function='member' level='[v_0]' member='1573' />
              <groupfilter function='member' level='[v_0]' member='1574' />
              <groupfilter function='member' level='[v_0]' member='1575' />
              <groupfilter function='member' level='[v_0]' member='1584' />
              <groupfilter function='member' level='[v_0]' member='1585' />
              <groupfilter function='member' level='[v_0]' member='1588' />
              <groupfilter function='member' level='[v_0]' member='1591' />
              <groupfilter function='member' level='[v_0]' member='1592' />
              <groupfilter function='member' level='[v_0]' member='1599' />
              <groupfilter function='member' level='[v_0]' member='1601' />
              <groupfilter function='member' level='[v_0]' member='1605' />
              <groupfilter function='member' level='[v_0]' member='1606' />
              <groupfilter function='member' level='[v_0]' member='1609' />
              <groupfilter function='member' level='[v_0]' member='1613' />
              <groupfilter function='member' level='[v_0]' member='1614' />
              <groupfilter function='member' level='[v_0]' member='1615' />
              <groupfilter function='member' level='[v_0]' member='1616' />
              <groupfilter function='member' level='[v_0]' member='1619' />
              <groupfilter function='member' level='[v_0]' member='1621' />
              <groupfilter function='member' level='[v_0]' member='1623' />
              <groupfilter function='member' level='[v_0]' member='1624' />
              <groupfilter function='member' level='[v_0]' member='1625' />
              <groupfilter function='member' level='[v_0]' member='1627' />
              <groupfilter function='member' level='[v_0]' member='1629' />
              <groupfilter function='member' level='[v_0]' member='1631' />
              <groupfilter function='member' level='[v_0]' member='1634' />
              <groupfilter function='member' level='[v_0]' member='1638' />
              <groupfilter function='member' level='[v_0]' member='1641' />
              <groupfilter function='member' level='[v_0]' member='1642' />
              <groupfilter function='member' level='[v_0]' member='1648' />
              <groupfilter function='member' level='[v_0]' member='1649' />
              <groupfilter function='member' level='[v_0]' member='1651' />
              <groupfilter function='member' level='[v_0]' member='1653' />
              <groupfilter function='member' level='[v_0]' member='1658' />
              <groupfilter function='member' level='[v_0]' member='1659' />
              <groupfilter function='member' level='[v_0]' member='1663' />
              <groupfilter function='member' level='[v_0]' member='1664' />
              <groupfilter function='member' level='[v_0]' member='1665' />
              <groupfilter function='member' level='[v_0]' member='1669' />
              <groupfilter function='member' level='[v_0]' member='1670' />
              <groupfilter function='member' level='[v_0]' member='1674' />
              <groupfilter function='member' level='[v_0]' member='1675' />
              <groupfilter function='member' level='[v_0]' member='1677' />
              <groupfilter function='member' level='[v_0]' member='1678' />
              <groupfilter function='member' level='[v_0]' member='1681' />
              <groupfilter function='member' level='[v_0]' member='1685' />
              <groupfilter function='member' level='[v_0]' member='1688' />
              <groupfilter function='member' level='[v_0]' member='1690' />
              <groupfilter function='member' level='[v_0]' member='1691' />
              <groupfilter function='member' level='[v_0]' member='1692' />
              <groupfilter function='member' level='[v_0]' member='1693' />
              <groupfilter function='member' level='[v_0]' member='1694' />
              <groupfilter function='member' level='[v_0]' member='1695' />
              <groupfilter function='member' level='[v_0]' member='1697' />
              <groupfilter function='member' level='[v_0]' member='1698' />
              <groupfilter function='member' level='[v_0]' member='1700' />
              <groupfilter function='member' level='[v_0]' member='1702' />
              <groupfilter function='member' level='[v_0]' member='1703' />
              <groupfilter function='member' level='[v_0]' member='1704' />
              <groupfilter function='member' level='[v_0]' member='1706' />
              <groupfilter function='member' level='[v_0]' member='1708' />
              <groupfilter function='member' level='[v_0]' member='1709' />
              <groupfilter function='member' level='[v_0]' member='1712' />
              <groupfilter function='member' level='[v_0]' member='1717' />
              <groupfilter function='member' level='[v_0]' member='1719' />
              <groupfilter function='member' level='[v_0]' member='1722' />
              <groupfilter function='member' level='[v_0]' member='1723' />
              <groupfilter function='member' level='[v_0]' member='1726' />
              <groupfilter function='member' level='[v_0]' member='1727' />
              <groupfilter function='member' level='[v_0]' member='1729' />
              <groupfilter function='member' level='[v_0]' member='1732' />
              <groupfilter function='member' level='[v_0]' member='1733' />
              <groupfilter function='member' level='[v_0]' member='1736' />
              <groupfilter function='member' level='[v_0]' member='1737' />
              <groupfilter function='member' level='[v_0]' member='1739' />
              <groupfilter function='member' level='[v_0]' member='1740' />
              <groupfilter function='member' level='[v_0]' member='1741' />
              <groupfilter function='member' level='[v_0]' member='1742' />
              <groupfilter function='member' level='[v_0]' member='1743' />
              <groupfilter function='member' level='[v_0]' member='1744' />
              <groupfilter function='member' level='[v_0]' member='1745' />
              <groupfilter function='member' level='[v_0]' member='1749' />
              <groupfilter function='member' level='[v_0]' member='1753' />
              <groupfilter function='member' level='[v_0]' member='1755' />
              <groupfilter function='member' level='[v_0]' member='1757' />
              <groupfilter function='member' level='[v_0]' member='1760' />
              <groupfilter function='member' level='[v_0]' member='1761' />
              <groupfilter function='member' level='[v_0]' member='1762' />
              <groupfilter function='member' level='[v_0]' member='1764' />
              <groupfilter function='member' level='[v_0]' member='1769' />
              <groupfilter function='member' level='[v_0]' member='1770' />
              <groupfilter function='member' level='[v_0]' member='1771' />
              <groupfilter function='member' level='[v_0]' member='1776' />
              <groupfilter function='member' level='[v_0]' member='1778' />
              <groupfilter function='member' level='[v_0]' member='1780' />
              <groupfilter function='member' level='[v_0]' member='1781' />
              <groupfilter function='member' level='[v_0]' member='1782' />
              <groupfilter function='member' level='[v_0]' member='1784' />
              <groupfilter function='member' level='[v_0]' member='1785' />
              <groupfilter function='member' level='[v_0]' member='1786' />
              <groupfilter function='member' level='[v_0]' member='1790' />
              <groupfilter function='member' level='[v_0]' member='1791' />
              <groupfilter function='member' level='[v_0]' member='1792' />
              <groupfilter function='member' level='[v_0]' member='1793' />
              <groupfilter function='member' level='[v_0]' member='1794' />
              <groupfilter function='member' level='[v_0]' member='1795' />
              <groupfilter function='member' level='[v_0]' member='1797' />
              <groupfilter function='member' level='[v_0]' member='1798' />
              <groupfilter function='member' level='[v_0]' member='1799' />
              <groupfilter function='member' level='[v_0]' member='1800' />
              <groupfilter function='member' level='[v_0]' member='1801' />
              <groupfilter function='member' level='[v_0]' member='1803' />
              <groupfilter function='member' level='[v_0]' member='1806' />
              <groupfilter function='member' level='[v_0]' member='1808' />
              <groupfilter function='member' level='[v_0]' member='1811' />
              <groupfilter function='member' level='[v_0]' member='1812' />
              <groupfilter function='member' level='[v_0]' member='1815' />
              <groupfilter function='member' level='[v_0]' member='1816' />
              <groupfilter function='member' level='[v_0]' member='1817' />
              <groupfilter function='member' level='[v_0]' member='1818' />
              <groupfilter function='member' level='[v_0]' member='1820' />
              <groupfilter function='member' level='[v_0]' member='1821' />
              <groupfilter function='member' level='[v_0]' member='1824' />
              <groupfilter function='member' level='[v_0]' member='1825' />
              <groupfilter function='member' level='[v_0]' member='1826' />
              <groupfilter function='member' level='[v_0]' member='1828' />
              <groupfilter function='member' level='[v_0]' member='1830' />
              <groupfilter function='member' level='[v_0]' member='1831' />
              <groupfilter function='member' level='[v_0]' member='1832' />
              <groupfilter function='member' level='[v_0]' member='1836' />
              <groupfilter function='member' level='[v_0]' member='1838' />
              <groupfilter function='member' level='[v_0]' member='1840' />
              <groupfilter function='member' level='[v_0]' member='1841' />
              <groupfilter function='member' level='[v_0]' member='1843' />
              <groupfilter function='member' level='[v_0]' member='1844' />
              <groupfilter function='member' level='[v_0]' member='1846' />
              <groupfilter function='member' level='[v_0]' member='1847' />
              <groupfilter function='member' level='[v_0]' member='1848' />
              <groupfilter function='member' level='[v_0]' member='1850' />
              <groupfilter function='member' level='[v_0]' member='1851' />
              <groupfilter function='member' level='[v_0]' member='1852' />
              <groupfilter function='member' level='[v_0]' member='1853' />
              <groupfilter function='member' level='[v_0]' member='1855' />
              <groupfilter function='member' level='[v_0]' member='1858' />
              <groupfilter function='member' level='[v_0]' member='1859' />
              <groupfilter function='member' level='[v_0]' member='1860' />
              <groupfilter function='member' level='[v_0]' member='1861' />
              <groupfilter function='member' level='[v_0]' member='1862' />
              <groupfilter function='member' level='[v_0]' member='1864' />
              <groupfilter function='member' level='[v_0]' member='1868' />
              <groupfilter function='member' level='[v_0]' member='1873' />
              <groupfilter function='member' level='[v_0]' member='1876' />
              <groupfilter function='member' level='[v_0]' member='1880' />
              <groupfilter function='member' level='[v_0]' member='1881' />
              <groupfilter function='member' level='[v_0]' member='1882' />
              <groupfilter function='member' level='[v_0]' member='1884' />
              <groupfilter function='member' level='[v_0]' member='1885' />
              <groupfilter function='member' level='[v_0]' member='1889' />
              <groupfilter function='member' level='[v_0]' member='1890' />
              <groupfilter function='member' level='[v_0]' member='1894' />
              <groupfilter function='member' level='[v_0]' member='1897' />
              <groupfilter function='member' level='[v_0]' member='1898' />
              <groupfilter function='member' level='[v_0]' member='1900' />
              <groupfilter function='member' level='[v_0]' member='1902' />
              <groupfilter function='member' level='[v_0]' member='1906' />
              <groupfilter function='member' level='[v_0]' member='1907' />
              <groupfilter function='member' level='[v_0]' member='1908' />
              <groupfilter function='member' level='[v_0]' member='1909' />
              <groupfilter function='member' level='[v_0]' member='1915' />
              <groupfilter function='member' level='[v_0]' member='1916' />
              <groupfilter function='member' level='[v_0]' member='1917' />
              <groupfilter function='member' level='[v_0]' member='1918' />
              <groupfilter function='member' level='[v_0]' member='1919' />
              <groupfilter function='member' level='[v_0]' member='1921' />
              <groupfilter function='member' level='[v_0]' member='1922' />
              <groupfilter function='member' level='[v_0]' member='1924' />
              <groupfilter function='member' level='[v_0]' member='1925' />
              <groupfilter function='member' level='[v_0]' member='1926' />
              <groupfilter function='member' level='[v_0]' member='1937' />
              <groupfilter function='member' level='[v_0]' member='1941' />
              <groupfilter function='member' level='[v_0]' member='1942' />
              <groupfilter function='member' level='[v_0]' member='1943' />
              <groupfilter function='member' level='[v_0]' member='1950' />
              <groupfilter function='member' level='[v_0]' member='1951' />
              <groupfilter function='member' level='[v_0]' member='1954' />
              <groupfilter function='member' level='[v_0]' member='1956' />
              <groupfilter function='member' level='[v_0]' member='1957' />
              <groupfilter function='member' level='[v_0]' member='1958' />
              <groupfilter function='member' level='[v_0]' member='1962' />
              <groupfilter function='member' level='[v_0]' member='1963' />
              <groupfilter function='member' level='[v_0]' member='1964' />
              <groupfilter function='member' level='[v_0]' member='1965' />
              <groupfilter function='member' level='[v_0]' member='1966' />
              <groupfilter function='member' level='[v_0]' member='1967' />
              <groupfilter function='member' level='[v_0]' member='1969' />
              <groupfilter function='member' level='[v_0]' member='1970' />
              <groupfilter function='member' level='[v_0]' member='1975' />
              <groupfilter function='member' level='[v_0]' member='1978' />
              <groupfilter function='member' level='[v_0]' member='1982' />
              <groupfilter function='member' level='[v_0]' member='1984' />
              <groupfilter function='member' level='[v_0]' member='1987' />
              <groupfilter function='member' level='[v_0]' member='1988' />
              <groupfilter function='member' level='[v_0]' member='1993' />
              <groupfilter function='member' level='[v_0]' member='1994' />
              <groupfilter function='member' level='[v_0]' member='1997' />
              <groupfilter function='member' level='[v_0]' member='2000' />
              <groupfilter function='member' level='[v_0]' member='2001' />
              <groupfilter function='member' level='[v_0]' member='2003' />
              <groupfilter function='member' level='[v_0]' member='2004' />
              <groupfilter function='member' level='[v_0]' member='2006' />
              <groupfilter function='member' level='[v_0]' member='2007' />
              <groupfilter function='member' level='[v_0]' member='2008' />
              <groupfilter function='member' level='[v_0]' member='2010' />
              <groupfilter function='member' level='[v_0]' member='2012' />
              <groupfilter function='member' level='[v_0]' member='2014' />
              <groupfilter function='member' level='[v_0]' member='2015' />
              <groupfilter function='member' level='[v_0]' member='2016' />
              <groupfilter function='member' level='[v_0]' member='2022' />
              <groupfilter function='member' level='[v_0]' member='2023' />
              <groupfilter function='member' level='[v_0]' member='2026' />
              <groupfilter function='member' level='[v_0]' member='2028' />
              <groupfilter function='member' level='[v_0]' member='2031' />
              <groupfilter function='member' level='[v_0]' member='2033' />
              <groupfilter function='member' level='[v_0]' member='2034' />
              <groupfilter function='member' level='[v_0]' member='2036' />
              <groupfilter function='member' level='[v_0]' member='2039' />
              <groupfilter function='member' level='[v_0]' member='2040' />
              <groupfilter function='member' level='[v_0]' member='2045' />
              <groupfilter function='member' level='[v_0]' member='2046' />
              <groupfilter function='member' level='[v_0]' member='2047' />
              <groupfilter function='member' level='[v_0]' member='2048' />
              <groupfilter function='member' level='[v_0]' member='2049' />
              <groupfilter function='member' level='[v_0]' member='2050' />
              <groupfilter function='member' level='[v_0]' member='2051' />
              <groupfilter function='member' level='[v_0]' member='2053' />
              <groupfilter function='member' level='[v_0]' member='2054' />
              <groupfilter function='member' level='[v_0]' member='2058' />
              <groupfilter function='member' level='[v_0]' member='2059' />
              <groupfilter function='member' level='[v_0]' member='2061' />
              <groupfilter function='member' level='[v_0]' member='2062' />
              <groupfilter function='member' level='[v_0]' member='2064' />
              <groupfilter function='member' level='[v_0]' member='2065' />
              <groupfilter function='member' level='[v_0]' member='2066' />
              <groupfilter function='member' level='[v_0]' member='2071' />
              <groupfilter function='member' level='[v_0]' member='2073' />
              <groupfilter function='member' level='[v_0]' member='2075' />
              <groupfilter function='member' level='[v_0]' member='2077' />
              <groupfilter function='member' level='[v_0]' member='2081' />
              <groupfilter function='member' level='[v_0]' member='2085' />
              <groupfilter function='member' level='[v_0]' member='2088' />
              <groupfilter function='member' level='[v_0]' member='2091' />
              <groupfilter function='member' level='[v_0]' member='2093' />
              <groupfilter function='member' level='[v_0]' member='2103' />
              <groupfilter function='member' level='[v_0]' member='2105' />
              <groupfilter function='member' level='[v_0]' member='2108' />
              <groupfilter function='member' level='[v_0]' member='2109' />
              <groupfilter function='member' level='[v_0]' member='2110' />
              <groupfilter function='member' level='[v_0]' member='2111' />
              <groupfilter function='member' level='[v_0]' member='2112' />
              <groupfilter function='member' level='[v_0]' member='2114' />
              <groupfilter function='member' level='[v_0]' member='2121' />
              <groupfilter function='member' level='[v_0]' member='2122' />
              <groupfilter function='member' level='[v_0]' member='2123' />
              <groupfilter function='member' level='[v_0]' member='2124' />
              <groupfilter function='member' level='[v_0]' member='2125' />
              <groupfilter function='member' level='[v_0]' member='2127' />
              <groupfilter function='member' level='[v_0]' member='2129' />
              <groupfilter function='member' level='[v_0]' member='2130' />
              <groupfilter function='member' level='[v_0]' member='2133' />
              <groupfilter function='member' level='[v_0]' member='2134' />
              <groupfilter function='member' level='[v_0]' member='2135' />
              <groupfilter function='member' level='[v_0]' member='2137' />
              <groupfilter function='member' level='[v_0]' member='2138' />
              <groupfilter function='member' level='[v_0]' member='2139' />
              <groupfilter function='member' level='[v_0]' member='2140' />
              <groupfilter function='member' level='[v_0]' member='2141' />
              <groupfilter function='member' level='[v_0]' member='2142' />
              <groupfilter function='member' level='[v_0]' member='2144' />
              <groupfilter function='member' level='[v_0]' member='2148' />
              <groupfilter function='member' level='[v_0]' member='2152' />
              <groupfilter function='member' level='[v_0]' member='2154' />
              <groupfilter function='member' level='[v_0]' member='2157' />
              <groupfilter function='member' level='[v_0]' member='2160' />
              <groupfilter function='member' level='[v_0]' member='2165' />
              <groupfilter function='member' level='[v_0]' member='2166' />
              <groupfilter function='member' level='[v_0]' member='2168' />
              <groupfilter function='member' level='[v_0]' member='2169' />
              <groupfilter function='member' level='[v_0]' member='2170' />
              <groupfilter function='member' level='[v_0]' member='2171' />
              <groupfilter function='member' level='[v_0]' member='2172' />
              <groupfilter function='member' level='[v_0]' member='2178' />
              <groupfilter function='member' level='[v_0]' member='2179' />
              <groupfilter function='member' level='[v_0]' member='2183' />
              <groupfilter function='member' level='[v_0]' member='2185' />
              <groupfilter function='member' level='[v_0]' member='2186' />
              <groupfilter function='member' level='[v_0]' member='2187' />
              <groupfilter function='member' level='[v_0]' member='2188' />
              <groupfilter function='member' level='[v_0]' member='2189' />
              <groupfilter function='member' level='[v_0]' member='2190' />
              <groupfilter function='member' level='[v_0]' member='2191' />
              <groupfilter function='member' level='[v_0]' member='2194' />
              <groupfilter function='member' level='[v_0]' member='2197' />
              <groupfilter function='member' level='[v_0]' member='2200' />
              <groupfilter function='member' level='[v_0]' member='2201' />
              <groupfilter function='member' level='[v_0]' member='2205' />
              <groupfilter function='member' level='[v_0]' member='2207' />
              <groupfilter function='member' level='[v_0]' member='2209' />
              <groupfilter function='member' level='[v_0]' member='2210' />
              <groupfilter function='member' level='[v_0]' member='2214' />
              <groupfilter function='member' level='[v_0]' member='2216' />
              <groupfilter function='member' level='[v_0]' member='2217' />
              <groupfilter function='member' level='[v_0]' member='2219' />
              <groupfilter function='member' level='[v_0]' member='2220' />
              <groupfilter function='member' level='[v_0]' member='2221' />
              <groupfilter function='member' level='[v_0]' member='2222' />
              <groupfilter function='member' level='[v_0]' member='2224' />
              <groupfilter function='member' level='[v_0]' member='2225' />
              <groupfilter function='member' level='[v_0]' member='2227' />
              <groupfilter function='member' level='[v_0]' member='2229' />
              <groupfilter function='member' level='[v_0]' member='2231' />
              <groupfilter function='member' level='[v_0]' member='2232' />
              <groupfilter function='member' level='[v_0]' member='2234' />
              <groupfilter function='member' level='[v_0]' member='2235' />
              <groupfilter function='member' level='[v_0]' member='2238' />
              <groupfilter function='member' level='[v_0]' member='2239' />
              <groupfilter function='member' level='[v_0]' member='2242' />
              <groupfilter function='member' level='[v_0]' member='2244' />
              <groupfilter function='member' level='[v_0]' member='2245' />
              <groupfilter function='member' level='[v_0]' member='2246' />
              <groupfilter function='member' level='[v_0]' member='2249' />
              <groupfilter function='member' level='[v_0]' member='2251' />
              <groupfilter function='member' level='[v_0]' member='2255' />
              <groupfilter function='member' level='[v_0]' member='2258' />
              <groupfilter function='member' level='[v_0]' member='2262' />
              <groupfilter function='member' level='[v_0]' member='2270' />
              <groupfilter function='member' level='[v_0]' member='2272' />
              <groupfilter function='member' level='[v_0]' member='2273' />
              <groupfilter function='member' level='[v_0]' member='2274' />
              <groupfilter function='member' level='[v_0]' member='2275' />
              <groupfilter function='member' level='[v_0]' member='2276' />
              <groupfilter function='member' level='[v_0]' member='2277' />
              <groupfilter function='member' level='[v_0]' member='2278' />
              <groupfilter function='member' level='[v_0]' member='2280' />
              <groupfilter function='member' level='[v_0]' member='2281' />
              <groupfilter function='member' level='[v_0]' member='2282' />
              <groupfilter function='member' level='[v_0]' member='2283' />
              <groupfilter function='member' level='[v_0]' member='2285' />
              <groupfilter function='member' level='[v_0]' member='2287' />
              <groupfilter function='member' level='[v_0]' member='2298' />
              <groupfilter function='member' level='[v_0]' member='2299' />
              <groupfilter function='member' level='[v_0]' member='2300' />
              <groupfilter function='member' level='[v_0]' member='2301' />
              <groupfilter function='member' level='[v_0]' member='2306' />
              <groupfilter function='member' level='[v_0]' member='2315' />
              <groupfilter function='member' level='[v_0]' member='2316' />
            </groupfilter>
          </groupfilter>
          <order>
            <hierarchy name='[v_0]' />
            <hierarchy name='[io:HighStateIncomePeople:nk]' />
          </order>
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='/Users/robinstewart/Documents/My Tableau Repository/Datasources/federated.0v7lcff1rocfu51a2syn01ev1r2i_0ftkit41uuxvna12qnq0m1u2em36 copy 1.tde' schema='Extract' tablename='Extract' update-time='05/03/2017 12:12:05 AM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_455708052318572546]' formula='[Median_Family_Income]/[Per_Capita_Income]' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='2090' timestamp-start='2017-05-03 00:12:05.532' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>F1</remote-name>
              <remote-type>16</remote-type>
              <local-name>[F1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>F1</remote-alias>
              <ordinal>0</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>56131.0</statistic>
                <statistic aggregation='Avg' datatype='real'>26.856937799043063</statistic>
                <statistic aggregation='Min' datatype='integer'>2</statistic>
                <statistic aggregation='Max' datatype='integer'>52</statistic>
                <statistic aggregation='Stdev' datatype='real'>14.028628057328127</statistic>
                <statistic aggregation='StdevP' datatype='real'>14.025271524666774</statistic>
                <statistic aggregation='Var' datatype='real'>196.80240517085394</statistic>
                <statistic aggregation='VarP' datatype='real'>196.70824134062866</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1918627.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GINI</remote-name>
              <remote-type>5</remote-type>
              <local-name>[GINI]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>GINI</remote-alias>
              <ordinal>1</ordinal>
              <family>census-income-data.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>50</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>984.93240000000367</statistic>
                <statistic aggregation='Avg' datatype='real'>0.47125952153110223</statistic>
                <statistic aggregation='Min' datatype='real'>0.41810000000000003</statistic>
                <statistic aggregation='Max' datatype='real'>0.53169999999999995</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.016004110522661538</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.016000281329994537</statistic>
                <statistic aggregation='Var' datatype='real'>0.00025613155362156574</statistic>
                <statistic aggregation='VarP' datatype='real'>0.00025600900263897169</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>464.69383037999739</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>13</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Median_Family_Income</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Median_Family_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Median_Family_Income</remote-alias>
              <ordinal>2</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>136482500.0</statistic>
                <statistic aggregation='Avg' datatype='real'>65302.631578947367</statistic>
                <statistic aggregation='Min' datatype='integer'>49274</statistic>
                <statistic aggregation='Max' datatype='integer'>90089</statistic>
                <statistic aggregation='Stdev' datatype='real'>8657.9062894310955</statistic>
                <statistic aggregation='StdevP' datatype='real'>8655.834772165068</statistic>
                <statistic aggregation='Var' datatype='real'>74959341.316570505</statistic>
                <statistic aggregation='VarP' datatype='real'>74923475.603021905</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>9069256478484.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Median_Income</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Median_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Median_Income</remote-alias>
              <ordinal>3</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>112789633.0</statistic>
                <statistic aggregation='Avg' datatype='real'>53966.331578947371</statistic>
                <statistic aggregation='Min' datatype='integer'>39665</statistic>
                <statistic aggregation='Max' datatype='integer'>74551</statistic>
                <statistic aggregation='Stdev' datatype='real'>7831.7906594879832</statistic>
                <statistic aggregation='StdevP' datatype='real'>7829.9168011863712</statistic>
                <statistic aggregation='Var' datatype='real'>61336944.934043214</statistic>
                <statistic aggregation='VarP' datatype='real'>61307597.11350061</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>6214975611113.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Median_Non_Family_Income</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Median_Non_Family_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Median_Non_Family_Income</remote-alias>
              <ordinal>4</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>69626390.0</statistic>
                <statistic aggregation='Avg' datatype='real'>33314.062200956934</statistic>
                <statistic aggregation='Min' datatype='integer'>21845</statistic>
                <statistic aggregation='Max' datatype='integer'>61466</statistic>
                <statistic aggregation='Stdev' datatype='real'>5943.9942335519418</statistic>
                <statistic aggregation='StdevP' datatype='real'>5942.5720552247194</statistic>
                <statistic aggregation='Var' datatype='real'>35331067.448498741</statistic>
                <statistic aggregation='VarP' datatype='real'>35314162.631537743</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>2393344487188.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Per_Capita_Income</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Per_Capita_Income]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Per_Capita_Income</remote-alias>
              <ordinal>5</ordinal>
              <family>census-income-data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>58942859.0</statistic>
                <statistic aggregation='Avg' datatype='real'>28202.324880382774</statistic>
                <statistic aggregation='Min' datatype='integer'>21057</statistic>
                <statistic aggregation='Max' datatype='integer'>47675</statistic>
                <statistic aggregation='Stdev' datatype='real'>3562.9804477221419</statistic>
                <statistic aggregation='StdevP' datatype='real'>3562.1279580705755</statistic>
                <statistic aggregation='Var' datatype='real'>12694829.670850273</statistic>
                <statistic aggregation='VarP' datatype='real'>12688755.589668049</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1688845158079.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>State</remote-name>
              <remote-type>129</remote-type>
              <local-name>[State]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>State</remote-alias>
              <ordinal>6</ordinal>
              <family>census-income-data.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>51</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;AK&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;WY&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_0</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_0]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_0</remote-alias>
              <ordinal>7</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2090</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>2516502.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1204.067942583732</statistic>
                <statistic aggregation='Min' datatype='integer'>3</statistic>
                <statistic aggregation='Max' datatype='integer'>2333</statistic>
                <statistic aggregation='Stdev' datatype='real'>654.42805388953298</statistic>
                <statistic aggregation='StdevP' datatype='real'>654.27147342219087</statistic>
                <statistic aggregation='Var' datatype='real'>428276.07771764148</statistic>
                <statistic aggregation='VarP' datatype='real'>428071.16093404457</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>3924708112.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>12</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_10</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_10]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_10</remote-alias>
              <ordinal>8</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;attack&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;undetermined&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_11</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_11]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_11</remote-alias>
              <ordinal>9</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>5</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Car&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Other&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2056</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_12</remote-name>
              <remote-type>11</remote-type>
              <local-name>[v_12]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_12</remote-alias>
              <ordinal>10</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>boolean</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='boolean'>false</statistic>
                <statistic aggregation='Max' datatype='boolean'>true</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_1</remote-name>
              <remote-type>133</remote-type>
              <local-name>[v_1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_1</remote-alias>
              <ordinal>11</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>723</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='date'>#2015-01-02#</statistic>
                <statistic aggregation='Max' datatype='date'>#2017-02-12#</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='Median' datatype='date'>#2016-01-21#</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;date&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_2</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_2]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_2</remote-alias>
              <ordinal>12</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;shot&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;shot and Tasered&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_3</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_3]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_3</remote-alias>
              <ordinal>13</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>65</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Taser&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;vehicle&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2084</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>10</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_4</remote-name>
              <remote-type>16</remote-type>
              <local-name>[v_4]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_4</remote-alias>
              <ordinal>14</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>72</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>74718.0</statistic>
                <statistic aggregation='Avg' datatype='real'>36.519061583577709</statistic>
                <statistic aggregation='Min' datatype='integer'>6</statistic>
                <statistic aggregation='Max' datatype='integer'>86</statistic>
                <statistic aggregation='Stdev' datatype='real'>12.886883394278133</statistic>
                <statistic aggregation='StdevP' datatype='real'>12.883733722131792</statistic>
                <statistic aggregation='Var' datatype='real'>166.0717636177215</statistic>
                <statistic aggregation='VarP' datatype='real'>165.99059462279592</statistic>
                <statistic aggregation='Count' datatype='integer'>2046</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>3068248.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_5</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_5]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_5</remote-alias>
              <ordinal>15</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;FEMALE&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;MALE&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_6</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_6]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_6</remote-alias>
              <ordinal>16</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>7</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>true</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;ASIAN&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;WHITE&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>1971</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_7</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_7]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_7</remote-alias>
              <ordinal>17</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1227</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Abingdon&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Zion&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>11</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_8</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_8]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_8</remote-alias>
              <ordinal>18</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>51</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='binary' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;AK&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;WY&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;binary&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_9</remote-name>
              <remote-type>11</remote-type>
              <local-name>[v_9]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_9</remote-alias>
              <ordinal>19</ordinal>
              <family>fatal-police-shootings-cleaned</family>
              <local-type>boolean</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='boolean'>false</statistic>
                <statistic aggregation='Max' datatype='boolean'>true</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Calculation_455708052318572546</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Calculation_455708052318572546]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Calculation_455708052318572546</remote-alias>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>4838.5562332463405</statistic>
                <statistic aggregation='Avg' datatype='real'>2.3150986761944212</statistic>
                <statistic aggregation='Min' datatype='real'>1.7896381751442056</statistic>
                <statistic aggregation='Max' datatype='real'>2.7876934294741957</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.090469491875109859</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.090447845866455698</statistic>
                <statistic aggregation='Var' datatype='real'>0.0081847289601405682</statistic>
                <statistic aggregation='VarP' datatype='real'>0.0081808128218821274</statistic>
                <statistic aggregation='Count' datatype='integer'>2090</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>11218.833029078603</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.461538' group-percentage='0.0828402' measure-ordering='alphabetic' measure-percentage='0.372781' parameter-percentage='0.0828402' show-hidden-fields='true' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter1' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source datasource='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr' type='datasource'>
        <exclude-sheet name='Income of Fatal Police Shootings Indiviudals vs. Fleeing Type During Shooting' />
        <exclude-sheet name='Average Median Income of Individuals in a Fatal Police Shooting Colored by the Level of Median Income' />
        <exclude-sheet name='Age of Fatal Police Shooting Individuals Against the Individuals Meidan Income, with Trendlines and Color showing the Threat Level' />
      </source>
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Age of Fatal Police Shooting Individuals Against the Individuals Meidan Income, with Trendlines and Color showing the Threat Level' />
      </command>
    </action>
    <action caption='Highlight 1 (generated)' name='[Action2]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Gender and Signs of Mental Illness of Fatal Police Shootings. Colors and Numbers represent the count of individuals in that per capita range. High being the top 25%, middle the middle 50% and low the bottom 25%.' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Per Capita Range' />
        <param name='target' value='Gender and Signs of Mental Illness of Fatal Police Shootings. Colors and Numbers represent the count of individuals in that per capita range. High being the top 25%, middle the middle 50% and low the bottom 25%.' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Age of Fatal Police Shooting Individuals Against the Individuals Meidan Income, with Trendlines and Color showing the Threat Level'>
      <table>
        <view>
          <datasources>
            <datasource caption='fatal-police-shootings-cleaned+ (Multiple Connections)' name='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr' />
          </datasources>
          <datasource-dependencies datasource='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr'>
            <column caption='Median Income' datatype='integer' name='[Median_Income]' role='measure' type='quantitative' />
            <column aggregation='None' datatype='integer' name='[Per Capita Income (bin)]' role='dimension' type='quantitative'>
              <calculation class='bin' decimals='3' formula='[Per_Capita_Income]' peg='0' size='1000' />
            </column>
            <column caption='Per Capita Income' datatype='integer' name='[Per_Capita_Income]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[Median_Income]' derivation='None' name='[none:Median_Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Per Capita Income (bin)]' derivation='None' name='[none:Per Capita Income (bin):ok]' pivot='key' type='ordinal' />
            <column-instance column='[v_10]' derivation='None' name='[none:v_10:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_4]' derivation='None' name='[none:v_4:qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_6]' derivation='None' name='[none:v_6:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_1]' derivation='Quarter' name='[qr:v_1:ok]' pivot='key' type='ordinal' />
            <column caption='threat_level' datatype='string' name='[v_10]' role='dimension' type='nominal' />
            <column caption='date' datatype='date' datatype-customized='true' name='[v_1]' role='dimension' type='ordinal' />
            <column caption='age' datatype='integer' name='[v_4]' role='measure' type='quantitative' />
            <column caption='race' datatype='string' name='[v_6]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[Action (Per Capita Income (bin),QUARTER(date))]'>
            <groupfilter function='reorder-dimensionality' user:ui-action-filter='[Action1]' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[qr:v_1:ok]' member='1' />
                <groupfilter function='union'>
                  <groupfilter function='member' level='[none:Per Capita Income (bin):ok]' member='30' />
                  <groupfilter function='member' level='[none:Per Capita Income (bin):ok]' member='31' />
                  <groupfilter function='member' level='[none:Per Capita Income (bin):ok]' member='32' />
                  <groupfilter function='member' level='[none:Per Capita Income (bin):ok]' member='33' />
                  <groupfilter function='member' level='[none:Per Capita Income (bin):ok]' member='34' />
                  <groupfilter function='member' level='[none:Per Capita Income (bin):ok]' member='36' />
                  <groupfilter function='member' level='[none:Per Capita Income (bin):ok]' member='38' />
                </groupfilter>
              </groupfilter>
              <order>
                <hierarchy name='[none:Per Capita Income (bin):ok]' />
                <hierarchy name='[qr:v_1:ok]' />
              </order>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[Action (State)]'>
            <groupfilter function='level-members' level='[State]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_6:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:v_6:nk]' />
              <groupfilter function='member' level='[none:v_6:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_6:nk]</column>
            <column>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[Action (State)]</column>
            <column>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[Action (Per Capita Income (bin),QUARTER(date))]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_10:nk]' />
            </encodings>
            <trendline enable-confidence-bands='true' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' exclude-panes='false' fit='linear' />
          </pane>
        </panes>
        <rows>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_4:qk]</rows>
        <cols>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Median_Income:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Average Median Income of Individuals in a Fatal Police Shooting Colored by the Level of Median Income'>
      <table>
        <view>
          <datasources>
            <datasource caption='fatal-police-shootings-cleaned+ (Multiple Connections)' name='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr'>
            <column caption='Median Income' datatype='integer' name='[Median_Income]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[Median_Income]' derivation='Avg' name='[avg:Median_Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[Longitude (generated)]' field-type='quantitative' max='-4034580.7349394653' min='-21525886.360136714' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[Latitude (generated)]' field-type='quantitative' max='11966630.791294727' min='-446107.45696629304' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]' />
              <lod column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:State:nk]' />
              <geometry column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[Latitude (generated)]</rows>
        <cols>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Barchart and Table Calculations'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Median Income of Race Broken up by Gender for Individuals from a Fatal Police Shootings. Color is a table calculation (the sum of the median income - the window average of the median income). </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='fatal-police-shootings-cleaned+ (Multiple Connections) (2)' name='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy)' />
          </datasources>
          <datasource-dependencies datasource='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy)'>
            <column caption='Calculated Difference from Average' datatype='real' name='[Calculation_4539558123198566400]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Median_Income])-WINDOW_AVG(sum([Median_Income]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Median Income' datatype='integer' name='[Median_Income]' role='measure' type='quantitative' />
            <column-instance column='[Median_Income]' derivation='Avg' name='[avg:Median_Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_5]' derivation='None' name='[none:v_5:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_6]' derivation='None' name='[none:v_6:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_4539558123198566400]' derivation='User' name='[usr:Calculation_4539558123198566400:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column caption='gender' datatype='string' name='[v_5]' role='dimension' type='nominal' />
            <column caption='race' datatype='string' name='[v_6]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy)].[none:v_6:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:v_6:nk]' />
              <groupfilter function='member' level='[none:v_6:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy)].[none:v_6:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy)].[usr:Calculation_4539558123198566400:qk]' palette='orange_blue_diverging_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy)].[usr:Calculation_4539558123198566400:qk]' />
              <text column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy)].[usr:Calculation_4539558123198566400:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy)].[none:v_6:nk] / [federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy)].[none:v_5:nk])</rows>
        <cols>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy)].[avg:Median_Income:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Gender and Race of Individuals in a Fatal Police Shooting. Larger Text Represents being Part of the mean of the top 25% Highest Median Incomes. Smaller text is the average of all remaining median incomes.'>
      <table>
        <view>
          <datasources>
            <datasource caption='fatal-police-shootings-cleaned+ (Multiple Connections)' name='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr' />
          </datasources>
          <datasource-dependencies datasource='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr'>
            <column aggregation='None' datatype='integer' name='[Median Income (bin)]' role='dimension' type='quantitative'>
              <calculation class='bin' decimals='3' formula='[Median_Income]' peg='0' size='2000' />
            </column>
            <column caption='Median Income' datatype='integer' name='[Median_Income]' role='measure' type='quantitative' />
            <column-instance column='[Median_Income]' derivation='Avg' name='[avg:Median_Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Highest Median Income Counts]' derivation='InOut' name='[io:Highest Median Income Counts:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_5]' derivation='None' name='[none:v_5:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_6]' derivation='None' name='[none:v_6:nk]' pivot='key' type='nominal' />
            <column caption='gender' datatype='string' name='[v_5]' role='dimension' type='nominal' />
            <column caption='race' datatype='string' name='[v_6]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[io:Highest Median Income Counts:nk]' field-type='nominal' max-size='1' min-size='0.2' reverse='true' type='catsize' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='size' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[io:Highest Median Income Counts:nk]' value='IN/OUT(Highest Median Income Counts)'>
              <formatted-text>
                <run>IN/OUT(Highest Median Income Counts)</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_6:nk]' />
              <size column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[io:Highest Median Income Counts:nk]' />
              <text column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='5.6847858428955078' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_6:nk]</rows>
        <cols>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_5:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Gender and Signs of Mental Illness of Fatal Police Shootings. Colors and Numbers represent the count of individuals in that per capita range. High being the top 25%, middle the middle 50% and low the bottom 25%.'>
      <table>
        <view>
          <datasources>
            <datasource caption='fatal-police-shootings-cleaned+ (Multiple Connections)' name='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Per Capita Low' datatype='real' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='27000.0'>
              <calculation class='tableau' formula='27000.0' />
              <range max='27000.0' min='0.0' />
            </column>
            <column caption='Per Capita Med' datatype='real' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='34079.713356678338'>
              <calculation class='tableau' formula='34079.713356678338' />
              <range max='47675.0' min='21057.0' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr'>
            <column caption='Per Capita Range' datatype='string' name='[Calculation_1642758397928120320]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Per_Capita_Income] &lt;= [Parameters].[Parameter 1] THEN &quot;Low&quot;&#10;ELSEIF [Per_Capita_Income] &lt;= [Parameters].[Parameter 2] THEN &quot;Medium&quot; &#10;ELSE &quot;High&quot;&#10;END' />
            </column>
            <column caption='Median Income' datatype='integer' name='[Median_Income]' role='measure' type='quantitative' />
            <column caption='Per Capita Income' datatype='integer' name='[Per_Capita_Income]' role='measure' type='quantitative' />
            <column-instance column='[Median_Income]' derivation='Count' name='[cnt:Median_Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1642758397928120320]' derivation='None' name='[none:Calculation_1642758397928120320:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_11]' derivation='None' name='[none:v_11:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_3]' derivation='None' name='[none:v_3:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_5]' derivation='None' name='[none:v_5:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_9]' derivation='None' name='[none:v_9:nk]' pivot='key' type='nominal' />
            <column caption='Fleeing' datatype='string' name='[v_11]' role='dimension' type='nominal' />
            <column caption='armed' datatype='string' name='[v_3]' role='dimension' type='nominal' />
            <column caption='gender' datatype='string' name='[v_5]' role='dimension' type='nominal' />
            <column caption='signs_of_mental_illness' datatype='boolean' name='[v_9]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <sort class='manual' column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Calculation_1642758397928120320:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;High&quot;</bucket>
              <bucket>&quot;Medium&quot;</bucket>
              <bucket>&quot;Low&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_11:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:v_11:nk]' />
              <groupfilter function='member' level='[none:v_11:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_3:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:v_3:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:v_3:nk]' member='%null%' />
                <groupfilter function='member' level='[none:v_3:nk]' member='&quot;ax&quot;' />
                <groupfilter function='member' level='[none:v_3:nk]' member='&quot;baseball bat&quot;' />
                <groupfilter function='member' level='[none:v_3:nk]' member='&quot;box cutter&quot;' />
                <groupfilter function='member' level='[none:v_3:nk]' member='&quot;crossbow&quot;' />
                <groupfilter function='member' level='[none:v_3:nk]' member='&quot;metal pipe&quot;' />
                <groupfilter function='member' level='[none:v_3:nk]' member='&quot;metal stick&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_3:nk]</column>
            <column>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_11:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_5:nk]' value='32' />
            <format attr='width' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_9:nk]' value='97' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Calculation_1642758397928120320:nk]' />
              <text column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[cnt:Median_Income:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_5:nk]</rows>
        <cols>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_9:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='ID Sets'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Inequality Index For High Income Individuals from 2015 Fatal Police Shootings. Each ID represents a person.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='fatal-police-shootings-cleaned+ (Multiple Connections) (3)' name='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy 2)' />
          </datasources>
          <datasource-dependencies datasource='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy 2)'>
            <column caption='Gini' datatype='real' name='[GINI]' role='measure' type='quantitative' />
            <column-instance column='[v_0]' derivation='None' name='[none:v_0:ok]' pivot='key' type='ordinal' />
            <column-instance column='[GINI]' derivation='Sum' name='[sum:GINI:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='id' datatype='integer' name='[v_0]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy 2)].[HighStateIncomePeople]' />
          <slices>
            <column>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy 2)].[HighStateIncomePeople]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy 2)].[sum:GINI:qk]</rows>
        <cols>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy 2)].[none:v_0:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Income of Fatal Police Shootings Indiviudals vs. Fleeing Type During Shooting'>
      <table>
        <view>
          <datasources>
            <datasource caption='fatal-police-shootings-cleaned+ (Multiple Connections)' name='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr' />
          </datasources>
          <datasource-dependencies datasource='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr'>
            <column caption='Median Family Income' datatype='integer' name='[Median_Family_Income]' role='measure' type='quantitative' />
            <column-instance column='[Median_Family_Income]' derivation='None' name='[none:Median_Family_Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_11]' derivation='None' name='[none:v_11:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_5]' derivation='None' name='[none:v_5:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_6]' derivation='None' name='[none:v_6:nk]' pivot='key' type='nominal' />
            <column caption='Fleeing' datatype='string' name='[v_11]' role='dimension' type='nominal' />
            <column caption='gender' datatype='string' name='[v_5]' role='dimension' type='nominal' />
            <column caption='race' datatype='string' name='[v_6]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_11:nk]' kind='hide'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:v_11:nk]' />
              <groupfilter function='member' level='[none:v_11:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_6:nk]'>
            <groupfilter from='&quot;ASIAN&quot;' function='range' level='[none:v_6:nk]' to='&quot;WHITE&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_6:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_5:nk]' />
              <lod column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_5:nk]' />
              <lod column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]' />
            </encodings>
            <reference-line axis-column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Median_Family_Income:qk]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-cell' symmetric='false' value-column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Median_Family_Income:qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Median_Family_Income:qk]</rows>
        <cols>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_11:nk]</cols>
        <pages>
          <column>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_6:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='KPI'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Income of Individuals from a Fatal Police Shooting. Broken up by if they were feeling and/or had signs of mental illness. The color is based upon the KPI factor (median family income/per capita income).</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='fatal-police-shootings-cleaned+ (Multiple Connections)' name='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr' />
          </datasources>
          <datasource-dependencies datasource='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr'>
            <column caption='KPI - [Median Family Income]/[Per Capita Income]' datatype='real' name='[Calculation_1000432438419349504]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Median_Family_Income]/[Per_Capita_Income]' />
            </column>
            <column caption='Median Family Income' datatype='integer' name='[Median_Family_Income]' role='measure' type='quantitative' />
            <column caption='Median Income' datatype='integer' name='[Median_Income]' role='measure' type='quantitative' />
            <column caption='Per Capita Income' datatype='integer' name='[Per_Capita_Income]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1000432438419349504]' derivation='Avg' name='[avg:Calculation_1000432438419349504:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Median_Income]' derivation='Median' name='[med:Median_Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_11]' derivation='None' name='[none:v_11:nk]' pivot='key' type='nominal' />
            <column-instance column='[v_9]' derivation='None' name='[none:v_9:nk]' pivot='key' type='nominal' />
            <column caption='Fleeing' datatype='string' name='[v_11]' role='dimension' type='nominal' />
            <column caption='signs_of_mental_illness' datatype='boolean' name='[v_9]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_11:nk]'>
            <groupfilter from='&quot;Car&quot;' function='range' level='[none:v_11:nk]' to='&quot;Not fleeing&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_11:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_9:nk]' value='42' />
            <format attr='text-format' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[med:Median_Income:qk]' value='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_11:nk]' value='200' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[med:Median_Income:qk]' value='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='text-format' id='refline0' value='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Calculation_1000432438419349504:qk]' value='AVG(KPI - [Median Family Income]/[Per Capita Income])'>
              <formatted-text>
                <run>AVG(KPI - [Median Family Income]/[Per Capita Income])</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Calculation_1000432438419349504:qk]' />
            </encodings>
            <reference-line axis-column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[med:Median_Income:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='value' probability='95' scope='per-pane' value-column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[med:Median_Income:qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_11:nk] / [federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_9:nk])</rows>
        <cols>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[med:Median_Income:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Per Capita Count and Avg. Median Income of Individuals in a Fatal Police Shooting from 2015'>
      <table>
        <view>
          <datasources>
            <datasource caption='fatal-police-shootings-cleaned+ (Multiple Connections)' name='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr' />
          </datasources>
          <datasource-dependencies datasource='federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr'>
            <column caption='Median Income' datatype='integer' name='[Median_Income]' role='measure' type='quantitative' />
            <column aggregation='None' datatype='integer' name='[Per Capita Income (bin)]' role='dimension' type='quantitative'>
              <calculation class='bin' decimals='3' formula='[Per_Capita_Income]' peg='0' size='1000' />
            </column>
            <column caption='Per Capita Income' datatype='integer' name='[Per_Capita_Income]' role='measure' type='quantitative' />
            <column-instance column='[Median_Income]' derivation='Avg' name='[avg:Median_Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Per_Capita_Income]' derivation='Count' name='[cnt:Per_Capita_Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Per Capita Income (bin)]' derivation='None' name='[none:Per Capita Income (bin):ok]' pivot='key' type='ordinal' />
            <column-instance column='[v_1]' derivation='Quarter' name='[qr:v_1:ok]' pivot='key' type='ordinal' />
            <column caption='date' datatype='date' datatype-customized='true' name='[v_1]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]' />
            </encodings>
            <reference-line axis-column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[cnt:Per_Capita_Income:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[cnt:Per_Capita_Income:qk]' z-order='1' />
          </pane>
          <pane id='1' y-axis-name='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[cnt:Per_Capita_Income:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[cnt:Per_Capita_Income:qk] + [federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk])</rows>
        <cols>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</cols>
        <pages>
          <column>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[qr:v_1:ok]</column>
        </pages>
        <show-full-range>
          <column>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[Per Capita Income (bin)]</column>
        </show-full-range>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='84000' x='0' y='0'>
              <zone h='50000' id='1' name='Per Capita Count and Avg. Median Income of Individuals in a Fatal Police Shooting from 2015' w='84000' x='0' y='50000' />
              <zone h='50000' id='8' name='Age of Fatal Police Shooting Individuals Against the Individuals Meidan Income, with Trendlines and Color showing the Threat Level' w='84000' x='0' y='0' />
            </zone>
            <zone fixed-size='160' h='100000' id='4' is-fixed='true' param='vert' type='layout-flow' w='16000' x='84000' y='0'>
              <zone h='8750' id='6' name='Per Capita Count and Avg. Median Income of Individuals in a Fatal Police Shooting from 2015' pane-specification-id='1' param='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]' type='color' w='16000' x='84000' y='0' />
              <zone h='13875' id='7' name='Per Capita Count and Avg. Median Income of Individuals in a Fatal Police Shooting from 2015' synchronized='1' type='currpage' w='16000' x='84000' y='8750' />
              <zone h='10750' id='9' name='Age of Fatal Police Shooting Individuals Against the Individuals Meidan Income, with Trendlines and Color showing the Threat Level' pane-specification-id='2' param='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_10:nk]' type='color' w='16000' x='84000' y='22625' />
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='72'>
    <window class='worksheet' name='Income of Fatal Police Shootings Indiviudals vs. Fleeing Type During Shooting'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_6:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_5:nk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>&quot;WHITE&quot;</bucket>
          </multibucket>
        </current-page>
      </viewpoint>
    </window>
    <window class='worksheet' name='Per Capita Count and Avg. Median Income of Individuals in a Fatal Police Shooting from 2015'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card type='currpage' />
            <card pane-specification-id='1' param='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>1</bucket>
          </multibucket>
        </current-page>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[qr:v_1:ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>70331.0</value>
                <value>38</value>
                <value>1</value>
                <value>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]&quot;</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[qr:v_1:ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>72401.21428571429</value>
                <value>36</value>
                <value>1</value>
                <value>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]&quot;</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[qr:v_1:ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>65132.599999999999</value>
                <value>34</value>
                <value>1</value>
                <value>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]&quot;</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[qr:v_1:ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>63344.692307692305</value>
                <value>33</value>
                <value>1</value>
                <value>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]&quot;</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[qr:v_1:ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>60659.034482758623</value>
                <value>32</value>
                <value>1</value>
                <value>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]&quot;</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[qr:v_1:ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>60798.875</value>
                <value>31</value>
                <value>1</value>
                <value>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]&quot;</value>
              </tuple>
            </tuple-reference>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Per Capita Income (bin):ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[qr:v_1:ok]</field>
                  <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[:Measure Names]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>61283.224137931036</value>
                <value>30</value>
                <value>1</value>
                <value>&quot;[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]&quot;</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
      </viewpoint>
    </window>
    <window class='worksheet' name='Age of Fatal Police Shooting Individuals Against the Individuals Meidan Income, with Trendlines and Color showing the Threat Level'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_10:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_10:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Average Median Income of Individuals in a Fatal Police Shooting Colored by the Level of Median Income'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Income:qk]</field>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_5:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
    </window>
    <window class='dashboard' name='Dashboard'>
      <viewpoints>
        <viewpoint name='Age of Fatal Police Shooting Individuals Against the Individuals Meidan Income, with Trendlines and Color showing the Threat Level'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Per Capita Count and Avg. Median Income of Individuals in a Fatal Police Shooting from 2015'>
          <current-page>
            <multibucket>
              <bucket>2</bucket>
            </multibucket>
          </current-page>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
    </window>
    <window class='worksheet' name='Gender and Race of Individuals in a Fatal Police Shooting. Larger Text Represents being Part of the mean of the top 25% Highest Median Incomes. Smaller text is the average of all remaining median incomes.'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_6:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[io:Highest Median Income Counts:nk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Median_Family_Income:qk]</field>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[io:Highest Counts Per Media Income:nk]</field>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[io:Highest Median Income Counts:nk]</field>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:State:nk]</field>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_10:nk]</field>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_11:nk]</field>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_2:nk]</field>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_3:nk]</field>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_5:nk]</field>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_6:nk]</field>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:v_9:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Gender and Signs of Mental Illness of Fatal Police Shootings. Colors and Numbers represent the count of individuals in that per capita range. High being the top 25%, middle the middle 50% and low the bottom 25%.'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Calculation_1642758397928120320:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[none:Calculation_1642758397928120320:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='KPI'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Calculation_1000432438419349504:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr].[avg:Calculation_1000432438419349504:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Barchart and Table Calculations'>
      <cards>
        <edge name='left'>
          <strip size='164'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1xtfhtr1hnywaa1e2hrnk1ulr5rr (copy)].[usr:Calculation_4539558123198566400:qk]' type='color' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' maximized='true' name='ID Sets'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='Age of Fatal Police Shooting Individuals Against the Individuals Meidan Income, with Trendlines and Color showing the Threat Level' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Average Median Income of Individuals in a Fatal Police Shooting Colored by the Level of Median Income' width='384'>
      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
      7GESEe2m/weRI9OH0+3DcgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Barchart and Table Calculations' width='384'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='Dashboard' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAgAElEQVR4nOydd3xUVdqAn3unT3oC6QkQegepUhQVEFZd177ruqvrqp+VVbGhq6KrLtgL
      u/a+lpWiKKx0RXoo0jsBQgpJSJ8+c+/5/phkkpCZFCAkmvv8kt/ces57yj3vqe+RhBACDQ0N
      DY12h9zaAmhoaGhotA6aAtDQ0NBop2gKQENDQ6OdoikADQ0NjXaKpgA0NDQ02imaAtDQ0NBo
      p2gKQENDQ6OdoikADQ0NjXaKpgA0NDQ02ikhFUBZSSE/rcmkJZcJlxbl8fxz/+CJmbNqXRXs
      3LqJzZs3s3nzZjZt2opyBoSYO/ereteOHNob8Ce/sLhRN5YvmEOZWwEE27ftPC15sg7sYcWK
      5WzZvhtF9Qdw2YI5lLuV03I3qF/7dmNz+U7LjeKCXMoqHE1+3l2Wz8IVPwFQlJdDXlFp6Gdt
      5ew7dDTovXnz6qdbU6hJq8YRipuffvqJskr3KfkFjYfxTHCq+ePIwYPN+ob2b9/AjoP+9Ggs
      74QKd+30by7BvtVgHDm0l4OHj9W5JhQvWzZtorisIuR7LZHfqvE4KjiWW3BabpxNQiqAhV99
      zKw3XmPX0RMt5vnH/3qFcyf9nicfuKPWVZVX//lPtm3bVvW/A18DmffVf/2rSX6tX7+m3rVP
      Zr1G5s/b2LZtKy/84zFe/7DhxN++eT12jwoINmRuaJK/wZj78b+Y9ck83G4Pq5d+y4w3PgRg
      x+b12DzqKbtbzclxsmf7Fsqdp6cANiydz9Y9wT+aYPiclWT+vAOAgpwsjuYVhnzWbSvj5137
      g95bt65+ujWFmrRqnH1b1jDr328xf+mpFVjQeBhDsXvrGhav+TnovZPT8VTzxyf/eh1HM/TG
      8ewsDufkA43nnVDhrp3+zSXYtxqMT2a9zhNPz6yj3PZtWcVj059kzdbdId9rifxWTenRPXw1
      f+lpuXE20Qe/rLJ+axaP3nMjS5cup98t1wXuHMvaz659h4jpmEhyUkfSUlIBwca1q8jKKWDY
      yDFkpCfVcU3xuvhh+XLK7B5Gn3c+SR1jydq3h6yjhZzjKWP7rr0MHtA38HxsQjo333xzHTdK
      Co+zdcdOfCoMHjKcjrGR7Nm1jZ+3bGHjxo0IycjQoQPxOu1s3rSJcpuT7r360a1LagPBN3DD
      TTcToQfETdz8p9vw3HQtOl99eesic+GFYwNnbkcl6zZsBJ2J4SOGYzUZOHxgN5lbttOlR3+G
      D+5b5+2la3Yx6+1/o5dg8uTJqGrNR+20lbNkTSYeVc+EiRdh0uuCxl+oeA0WJ/2HjqBjpAmA
      gwf3E2Exk7lpM1HxqZx37rBAmm/fvIncwhJS01JISEojPi46aKwdzdpPdFw8mevW4lZlJkyY
      gMmgAyDn6EF27z2EQbEFnk/t2gOfbOVEfg6KMZyEKneLj+cgzJHExHZkxCBd4PmK0iI2bdmG
      zmjB6fGXXNlZ+0ns1B2jTsJtK+d4mYNOqUm4m5Dehw/sYc+BLDokpDBk8EB0slTn/rKly5n2
      xBO889aH3HjlhMB1n8fJ+nXrcXgUUpIT6NqzL2a9zJGD+9h/6DAGUzjnjj4Xs0EXCGND8eN1
      O1i1eg2KkOk3cDBWvcLmzVvIsVuINfpISu1MalJHgKDpGCp/+NwOli9fgd0rGHfBRcRGWoOm
      W8Pp72955xaUknP4GB37dwEI5J2sfXtIyuiJxSAH4jQlo1edcIdK/1BpF+ybbl7a6RkzKJHM
      Pdmc2ycdgCWLlnP5JZNq0jBI3IQ1Ib+pqsLOrT+Te7yQuMQ0hp3TH6mBtA1GaVE+PtnEwT3b
      yS8sY8y4C4iPjQLg0L5dHDyaS5euvejRNR0Q/LxhLfsO59D/nGH07ZERSC8DKlu276Znv0HE
      R5lYt34jsUmdGT18kN+fE8f5ceVqLFEduOiC8zHopKDy7Nq9mz59+iABOdlZoI8I3gLIP7CN
      6C4DGTBiDDs3rKa6eFr1/Vyee/FNjBYrh7au5r0v5wMw+/1X+GHLfnp268ILT07jUF5JLddU
      pj9yH3nlHhLiIpk2dSrHiiooKzlBpdNJbu4xjuUeDypwbebM/RKnDySfk3unTMHhUyksOI6j
      opJjOTnk5vvdWL50IdmFpUSEW3jh6UfZfjCvUbcBkCT0skAVweU9mbfe8tfOvPYSbr99CkXl
      DspPHCNz6y72bl7JS29+RM+evVk++wPmL6/bWujTJYaZr/ybvAJ/t5Ms1yTDqy8+j6ozczxr
      K+999nXI+At1PViczP3kbYoc/lrcs49N5e2PviQ6Lp5F/32ftduyAJj1zN+Zv2ID4WFWvvn8
      A9bv2BsyquZ9+g6PPT0DRWem6Mgu3vl0HgAbf1jAP2bOQm8yk5ebG3h++7ofWLttN/aSHN54
      74vA9bdff4USh4qrOIePZvvzUnHeIe6ZMhWbS8FRdoJKp9cfhk/fCYSh7Nhe5ny7HGg8vQ/v
      zmTma+8TERnF3q3r2LbncJ37QnGx/aiNgX160cFg51iJEwDFY+ee227jYM4JjDp46dnpFDsV
      VFcJ/5nzHUZLGEXZu5k2/fk6YWwofp75+yMUVbiQhZevv56P2+mgsOAEpSeKOHbsGJU2Z0Cu
      YOnYUP6wCRMJkSYeuO9BvGroJnOo9H//5aeZs3gtFouZ3NyaOKzOO1s3rGDRyk3+OFM9PDvj
      dWRJqhPuUOkfKu2CfdPNSTuACRdPZvH3S/xy+ZzsLXDTO61D1d3gcdOU/LZvx0bW/LyLyKgo
      VnzzKR/PW9Jg2gZjx4YfuWvK/WQXlBNhkZj+9AwAFs/9iNffm4PZaOT7pYsB+PrjN/j6x810
      6ZzOR/96kaVrtwHwj2n3M/u75cTHd+Afj93Pa+98SlRcB756/zV2ZZfiKCvgwYcfIT61M7ac
      fTz70psh5Zn30VscLrQD8M5rz/Ovdz4O3gJYvnQZF024AllvpW+KmV2HC+nfJZ453y7hhVf/
      TbhJh71nEs9/vhRQ+THzAG+8/SYycNctf2DRkp+466bfAVB6dBee6J78+borAAjHyXf/+4E7
      b7ycLl/N5tLLr/TXwGtxPHs/06dPB0AflcDf77uD226fQl5uDiVlFXRLCSP7hJPzL7yYud8v
      48orrgi8+5vfXktZSRG5+YWMO28YO/YdZEC35BBR4mX+vNkYUdm6YTW9z5+I81hoeYOxetlC
      xl91A9dcflHg2sxH7+PBx56hU1wYfbtPY+pjr3H5RSMC9+956CmW/G8+zz35MIohiqkPP0y3
      1HgAHn3qOZLD9dj7pfL850tDxt8fxmWElPPkOKlNh/SuPPHYQwCIsmxOlBbiqTCxq9jAm6/c
      479ekUtZiBir5tGnnqkjJ8AXc79j5ouziLYaauWPGjr1GUbJy+/i9An0nhJy7EZ6JEdjz6/p
      Qpg/+wtufeApxgz010BX/LSiQTkaS++KshKiE5IYMOgcxo4ZU+/9vZvW0nPoKGRg/LjRLF+x
      kpuunsSWNcsZOP4abvrjbwH4edUiAGRzLNMe+BtHjhyhQ2wMi9e/1eT4KXM46Na9O4P79uQi
      yV9LGztmGPvLwrnyt+PqvB8sb/vdPSl/HNmFiO/PVZf4Wy4Hd2xi864cRvZPCypXsPT32sLJ
      POri7df+VhVp9dN/4sWX8OiLH3HF+OHs27iKPiPHoT+p+thY+p9MsG+6V2JY4H5jaQeQ2G0g
      5Vnv41EF+zN/YtCo85DwF3Kh4qZ/h5r3Q+W33gNH0qV7P44cPcakyRP4ZOlOuHIiEDxtQ/Gn
      2+7gsvP93/6SFSsAlfmLVvHqW+9h1EmcP24coLJk9Q7eeOdd9BIM7NWZB6f/mwmjBhLfuRsP
      3HcXAMvnzuH+Rx8hXAe5OzZgq3CxduNifnPd/zF6xFAYMZTV/3cnbhVMQar2Y8aMZO26TNIn
      9EdEdYPyvGAKQGXFipVEHipg4RcSJcePwbIf6H/rdRjDzYSbTmruqG4Kjh7h6SefRABer5uB
      I2oKw7KSchITarqEEjt0xLH7QIOR1jGlCw8/9BACkGQdqs/FQ/dOIbXnOaQld6S0zI5QgveF
      fvj6cxwogUF9e5CbV0RiXMN9pskpqVh1EiNGnU+n1EQO/7y6WfIWFpwgbdDIOtfKSsp457UX
      0EsCSRJ0TEmsc1/S6bn4squ4+LKrOLgjk5kzZvLurJcAONk6d6j4O5V49VO/duix20hITWjC
      u7VcCWJFXG+1EG01hH5J0nHh2IH8sH4HYaW7GDt+Ur1HysvK6No1eOEVjMbSe+C5E8gvquDZ
      6X/H7hbc+/A0ulcpW4BlS5ay61gpD+7fhNdZSbESwU1XT8Jht5GS2rWefydyD/DI4zM5d+x5
      REeF4wzRPx4sfh59ZBpffjWHd147SP/RE7j7pmubHM5Q7paVlLN/2waefLIIALutgoH6hkZ8
      g6R/ZRnJnRqO8/CEzoQrRRyvdPO/75dx6W0P13um0fSvRVO+6cbSzo/M6GE9WLNlPz8v+4mr
      7niUoxu+BZoWN6HyW+aKBXz09XJGnzsCo1JXtuZY0K/3rOpEkmMx1u6mUd0YjTHoqy6Zozti
      9FZ3odV9/2TnykrKWbbiv2xbswiQUIyWkAP+I0aPZtoLn9I7ysagEaNRjm2orwDy928lachk
      np3m1zqq185fb38Q9dbr0KseNu3MYmi/DA4erCpsZBOJyYnc+/BjRFuNAFTaavr/EtLT2f3h
      AlSuQwZ+3rmTpKSMkBEGoNMZsFhr+hWLD/1MRJch3HvP/wFwaOe6wD3F40ER4I9PlZ/35fJ6
      1eDZ8gVe8hss/w0MG3FunRZIc+Xt0bMbSzdv4Lzh3QF/ciWnJDLsyr8wsm+nevEBkJ19mPR0
      f40jvWsPDMIb0v1Q8jQkZ904aRxrXDIHtmZSVPpnOkRZOHgoiw5VNaLm4K6soKjCRcdIM4oS
      vGC8ePJlPD3rv5hd+dz39Ev17kdGR7FnzwGShvUGoaIEUfQud3V8NZ7eTreXSZdfy6TLr2Xf
      uuV8+90ypt5xPeDv/tl2tIL33nsr0Bf69/tuJ7vYQXqXDF78aBGTxg5DddvJruqm3LJmJb/7
      8+1cOm4ois/D98t+bHL8RHZM4W9THwZUpv7lNir/dC0g4XF7gj7flHTsmJJMh/hOPPnUU8iA
      4nPj9jVvdrcxIooj+w+g4p8VEirtLpkwjsULF3K4QtAjuf74UFPSvzrtSo/uCflNV9NQ2tVm
      wsTJPP/u17idOjp1DKN6qkKouBGlNV1JofLbssWLefyfr5AUrqcsfz9rD34XIvaaiWxFL5+g
      sMxJfLSlqpJrRvEUUmL3EBtmJO/gTqSYlCY5l5ySTH9jOnfd6G8p2mw2LDpQVRUhBDpdTYXd
      GtcJqSKHlWtVfn/3w6idDPUVwIrly7howm9r5DWE0SfFwq7DJ5g69SFmvvQ6s3V6EjrGgBwF
      yNz81z9wzx23M2hAX3KPHuLiq2/l4vMGV3mazvjBqdx73yOkJ0awP7eMV168CfDX7qUgmVs6
      6WJ0ajdyt73Cy6+6KMzJ4lj+cS6vGgw6r19n/vbANOI7xPPYtPvoFBfOk8/MQPJUUFhUwJhL
      /txA9Mn1/G9IXoCTxR08djKLlz/OA48+jkl1MeaS3/OHv97Kw9Me54c+/aksLSSp6zncc+sf
      Au/894N/c6DASee0JA7t38cNd0wN6r4kSSHlsRp1IeU8OU6CyV19UZZkZGMED93zF/7x5KOY
      TCasRkGHIM9Kklz7tI4bADf96Q/ce9ftDB3cj8P79xPbfWC95yMSumB2ZOGL6kmsRV/v/u+u
      /RP3P/AoW4YMoyA3h4Jyf+HYq08f/jHtUVLjrRTk5tBl4EWA3GB6S8CudSv44Oul9OqewZ4d
      27jprpqa677Na+g5bFSdgbALx41lxQ+ruenqiYw/ZydTp07FarXirqpW9Rk8nGlPvcqhbf3J
      zj5Gpctbx7/Q8aPw3LT7MXTshEm4kVIyCNNBnz6DeP3thyk+uo2Bw8Yx8fxhATcaS0dJkghP
      yOC8AXHcefd9dE1P4PCRozz495l0Sa5dE6+fz2vLZghPYOLQNO68+346JUazd/durr7t3nph
      GXnhxbx0xeVcffuTJzsDhE7/YGnX0DddTUNp5w+WP1xRyd1xZG9m6OV3BASSIGTcxEuN57cR
      o8/l6YcfpktqNKXlZciWmgI5WN6vfTPod0L1dYk7b7+dB++9mz69u5NT4uKNmdO59ZYbmXrP
      PZwzqA+btmzjsX/MqJ9ckhxwUJL9xyMnXMqChx/k0Se2Y5F9FDsMvPT8E3z7nzc57Irm/tv+
      WMeN4QO78/3Px7k/0gQRA0E0A7vDHjjesuJb8dp7swPnPq9HlJSUCK9PCfpueWmxyMk7LlS1
      OT7W4PN5RF5ennB7ffXdLisVdoez6kwVhcfzhS1wfmo0V167rbKWDEKoqiLKykqF0+UJ+rzX
      7RJlZeXCpwSPr6bKE/J6nThpgvy10vbdF54Uq3/OavK7tXHYKkT+8cIG483ldAiX2x3yvs/r
      Frm5ucJzUloXFxWKsgrbSU83nt5ej0vk5eUJpzt4WgSVweMSTo/ff1XxijtuvFnYff5AOe02
      kV9QKJRTyMulxSdE4YmSk+RzixPFJUIJEmlNTUe30yFKy8pP+fvyy1YkikvLG3zGbqsM+Y0L
      ETr9g6VdQ990NaeSdifTWNyEym9lJcWNxsepovi8orS0TCi1MpHLaRdHj2bXk6Mp2CorRKWt
      6htWfeKe/7tNFNtCf2PVSEI0vUPrq/ffZP3OAwjhwyuZePyJJ0mICW/q6xptFpXnpj1MsUfF
      47ITm9aHxx+eEuiTbI9U5B3hyedfRa/TUVZRzgWXXMP1v7u4tcXS0GgUn7Ocvdkn6Nez/hjW
      yTRLAWhoaGho/HrQbAFpaGhotFM0BaChoaHRTmkVBWCrmhYpVAWb3dnI062H7aTpm83lTIdP
      VXzYHW03vqqprKw8Y265XU483tOzY9QWsFWeXl7S0GgJ6imAV/75BHfddRd33HE7d9xxB3fd
      dRezFzS8GrO5TJ/+KAD24wd44a0PACg+vJtX3//yjPpzulTLWRuXrZSXZjzN3+67nylTprDu
      530h368dvjOBo+Agz7955twDhcf//tRpu7LvQN0FaE899Viz3QiV79YvnceiNZtOW8aTOVnm
      atYv+5ate7LPuH/Tn6qflzQ0Wpt66wDum/Y0AF+8+RJJ50xm3Ig+Z9zT6nn+tefLxqT34C/X
      pJ9xv06Hk9cjgODZx6cx7Lc3MfWCkXhcdnKOhzaaIJ08R/i05TnTDTYdUx/422m78q933uH1
      F14InNePt8YJle9+WvBFQ6+dMifLXE3J8RysEd3PuH+nEicaGi1NCGug1fgzrfNENl8u30y3
      SPhkzkKee+MtDmcu4j/fLMcoCQaNuZgbrprM1jVL+WHTbnKzs3HYbYy48LfceO0lIBQ+fesN
      thzMxaSTOHaivl15T3k+85Zu4i/XXcF/P5zFCYcg63A25aUl3DrlEUYM7E7+kd288No7mMwm
      zBGJPPrIvQhHGc88+098kh6ny83d9z1C17SOAXc/eusVdmYVICkeOvcfyV03XYvzRDYvvvMZ
      rspyXC4nhsgUnnvqIeRG5Cw7tpdSYwq/vcBv+sFoDiOjcxgg+PKDWazacgBULxN/dwOXTxxd
      512vq5IZzz5Lic2N16dy+5QH6Nc9jf9+OItRk6/h/VdfIG3QGP76e78NJY+ttF64EvWQc2gP
      jz7yEG6XC0NMOs89+QByCP9fmTGD/3vgYax6iS/eewM1pjt/vGoSzpIc3pu/mnv+8nu++OIT
      7rhjSsg4kVQv7896nZ1ZeRgNMmHxyTz54H2BcL39xvPs2fIz0x59FMkYzT+mP4SzsoyZzzxJ
      cbmDMpuTZ2e8QMcoC5k/LqiXZxrKd9VsWLmYld9+hcNuZ9SEy/nT1b+pF29/unwcM56bgVOR
      cbl8PPL3x0mIjWDNioXM+W45VosJRR/O439/hP+8/VI9mYPbc/QTLN/tzfyRrEojl0/wp/Pi
      rz8jvs95JJoq6z1rkLXCX6ONEmqBwOf/flH8sH63f5FB3j5x1TVXiceeelnYXR7hsZ0QN996
      l3+hjOoTD9x5m8g+YRcrv/tcvPDmx8LrU4Tqc4u777lbCCHETws+F8++9r7wL3lQxf333xNw
      94kXZ9U7fnn6VLF0/Q4hhBAFB7aIp15+UwghxAP3/J84crxYCCHEF2+/LL5etlGs/+Fb8ebn
      3wohhHA7K+st3MgvOF61OEIR0+6+RWSXuYUtb5/46z0PirJK/wKbfzx4p8i3eUPKWc2mVf8T
      b3zwdb242rf5B/HA068KVQjh8zjFXbf+ReQUO+qE6fN3XhRfLFwlhBCi5PhRcdOtU4RaFdab
      b7tLbNi6p46bwcJVLXe5zS/39Km3iwK7L6T/H7/xT7Fy8wEhVK94aOr94r77H/anx3dfiv/M
      X+GP0wemBOI/WJws/upD8eKbnwbiZOrUKfXCP+XBB+uc3/HXG8SR3AIhhBDfff62+N9PG0Pm
      mZOpne+EEP489dbHwqsoQvW5xF1VeerkePvPWy+Ib1ZkCiGE2L9ppfj7zLeEEEIUFB4XvqrF
      NnM+fF18vXxDUJmrWfjpv+r4L0TwfOeuLBS33vlA1ROKuPuW24TDqwR9tnY8a2i0JRppAdQQ
      mdCDpx6/D50ER/fsxRwWztJF/wPAGmbi0MFsZKBHrx7odTJgxFxlkm7zli388e5nqup1EnIT
      akS9+/QEICwsDEVVQLgozC9je+YatgNOnyB33z7G/u5c3vrgcSqPH2H0mLGcO2xQHXdyD+zh
      nTffQgBZuQXYbG5iZUjp1ImocHOVHxYUVTQqp0HWoyj2erLu3LqdSyZPRgJ0BjPjR57D/gNH
      GZ5e02Wzc/sRpt18PwAxCemkGlRsVWObf73rAYYP6FzHzW49+tYLl8N5nJROnYgM88sdGRGG
      V1FD+j96zGi+Wr2WnlE2EnuNQMnZRl6FmzXrN/KH+56uF45gcbJrz06u+9s/A3ESrCdDnLSU
      JCwmlk7J8VUyRlCm+Mg7EDzPpMX1qu/gSfTo2QO9LAMmLLXMHNaOt93b9jIooSffffcdCC8F
      h/xjMz5bOS+9/z52l5fivCOMjO0fVOaQhMh3xouG0jlK4WB+OZaKA8T1GoZF5wn6LBcNbZpf
      GhpnmSYrgLTOKQGjVEajAZ3RTFKS3xrlZdf+mW490tleFHxnIyCoUa/moUdv0AX8TEpKIiEp
      jbjkBN7/6BOyDuxj/pefcjC3hD//7kIA7EWHeefL+bw4cwYRVhNvvtL4gGdDcnbv1YsXPnwJ
      9Zar64yem80m7PaaWR4ur5tYnQGo2YbJbBTYnD7Cw/02WlyKEojPTl3qG36KS86oF66rRgTf
      3CaU/xn9h5H11lzWRdsZNfpS1Gw9a9esI7dSolNc6E1DaqM3GCktLSM1qmPjDzdAqDxzOtSO
      N6NRR3SHBGLM/pS59/47AcHMmc9y/xMv0im5I5k/LWB/Y3au6xE83wFcdslE/rdkOWElO7ns
      sr82+KyGRlvklEYVE3r0x553CJ9soXu3DIpyDlJY6gr5/DlDhvD2rFlU2OxkrlpOQVnoZ0Mi
      6emZkcjeY8X07NkTyWvjwOFctq3/iTWbdpDauSt9e3THUVGzeYuq+BDChITK1syf+Gn15ga9
      aExOS2waY3tE8dzLb5GTd5ztWzJZu3Enw8ZewFeffcjxojKOHdzN/9bs4pyTavTnjR/LG6+/
      hd3pYt2K7/BEp2BtoOO5oXCdTCj/JZ2ZjDgd3687wDk90xgyajSLPvs3XfoOaTAeavObyy5n
      xuMPM/+7Bbw481myi+q3gExuGz/vO0x+fn7IPaSbm2eay5jzx/DDj2vo0rU7sZEWdu6sagF4
      JPR6HccO72Pe3BqLjg3JfCRrf9V2pFupcKpB8x1Av5EXsHf9MrYerWRwj5SQeVRDo62im169
      80oQElM7Ex1hAUBvtNA5zV/jkmQDY0YNY8XS71m7fhPRiZ0Zfk4fdLJEdFwCHaL9W7vJso6M
      jK506t4XpSyH2fPmI4V14Jz+fejRo3s9d2uOBWmdu2LS+y3eGUxhdE5LZvioMezdup5lK37E
      4dNz/nmjiIuNZsOq5SxYuAgR3pE//+FKDDq/XjOFxxEmKvlyzjw8koXxEy6gS5cMLEZdHX+R
      JNI7d6V7r34h5axmyKjz8JTlsnT5Dxw/UcY5Q4eSkppOr7QOfPbZf9ix7yh33nc/iTERdcLU
      uXtfRHkun3/5X8o9Ru792+2YDfq6Ya2FNcxaL1x6nXyS3JDWuRsxsR1C+p8Y35HYpM707t4Z
      nSkcoXo4b9x4YqNqNt7o2rV+WlTHSWJSGmNGDsZmdzD2gvHs2rieiyf/po6sA/r0ZP68uezN
      Os7wYYOQarkJEjEd4ukQGxcyzzSU74A6eUqSJLp27VYv3jJ6D0B2FLFw0WKO5hZx3rhxxEZF
      0K1LKp9/9hlZuSeY+JvJpKakkRAXHVRm8JvzPnjoADk5OeTk5NKpe1/Gj7+wXr6zmIxIsp4w
      vYeeA0fStZM/3oLlUYvJWCeeNTTaCpotII0G2bZuJdmlbjI6pbBl9TKO2MN4/P5bWlssDQ2N
      M4CmADQaxGkrZ9Xq1RzLySexUzcuvuh89Nq0Rg2NXwWaAtDQ0NBop2jG4DQ0NDTaKZoC0NDQ
      0GinaApAQ0NDo52iKQANDQ2NdkqTVwK3BIriXylbexxaCNFmLSdqsp0ammynhibbqdFWZasu
      59qSbG1iFpCiKOh0/mWxbrcbk8nUyhIFR5Pt1NBkOzU02U6Ntiqbz+c3/qXXt2q9uw4t3gV0
      9OBeFi78H9l5hQBsXr+aFSvXoLS62tHQ0NBo37SsAhAe1mzYxsUTx7Nm5Q8c27+VMjWCjHgz
      qzbubFGvNTQ0NDQapmUVgGRA9lbw9Tfz0YdHkZ+bS7+BfencawCuIs1IloaGhpGMErYAACAA
      SURBVEZr0qIKQHVXQFQ611x9FYqtAoPJiNvpRvU68WJoSa81NDQ0NBqhRUcjJL0Zd2key5av
      wIOeHn0GMXv+XCw6wfALL2lJrzU0NDQ0GqHFZwEJoeJyeTBbzEiA1+NBBUxGY+AZbRbQ6aPJ
      dmposp0ammzNx+fzsSjzEEs2ZgEweUQ3Jo3o1qrTQlt8PpIkyVgs5sC5oVbBr6GhodFeWLLp
      MGt35nDftSMBePe7LQBMHtl6+0RoK4E1NDQ0zgKLNhzklksH0yUphi5JMdx62Tl8v+Fgq8qk
      KQANDQ2NdoqmADQ0NDTOApNGdOO9BT9zOL+Uw/mlvPvdFiaP6NaqMrWdNckaGhoav2ImDu2C
      qqq88tV6oGYQuDXRFICGhobGWWLS8K5cOqpna4sRQOsC0tDQ0GinaApAQ0NDo52iKQANDQ2N
      doqmADQ0NDTaKZoC0NDQ0GinaApAQ0NDo52iTQPVaDZCCLYfKqC00sWArgnERlpaWyQNDY1T
      QFMAGs3C61N49tNVuDw+4mPC+GTxNu66YhhDeia3tmgaGhrNRFMAGs1i8cZDRFpNPHnT+UiS
      RE5hBY9/8APvPXgZOp3Wo6ih8UtC+2I1mkVWXikDuyUEbJinxkeil2WKK5ytLJmGhkZz0RSA
      RrPISI5h28ECqvcRyimswKeq2jiAhsYvEK0LSKNZXDysK5v25jHtneXEx4SxM6uQu68Yhl7r
      /tHQ+MXR4ltCNgVtS8jT52zK5p8FVEhppbNJs4C0eDs1NNlOjbYqm8/nA0Cvbzv17rYjicYv
      BkmSGNgtobXF0NDQOE20druGhoZGO0VTABoaGhrtFK0LqI2glufi/ulFlMLd6OL7YDrvAeSo
      lNYWS0ND41eM1gJoAwivE8e8W9F1Ho316g/QdR6NY96tCK82t15DQ6Pl0BRAG8B3ZDW6uG4Y
      +1+NHJWCsf/V6OK64TuyurVF09DQ+BWjdQG1ASRjOMJVDkKAJIEQCFc5kjG8tUXTaCKqvRjv
      ts8R9iL0GePQd72wtUXS0GgUrQXQBtCljwC9CeeiR/Du+gbnokdAb/Zf12jzqPZiHP+9AYRA
      ThqIO/M93JnvtLZYGhqNorUA2gCSJGO5fBbeHXPw5WxClzQQQ/+rkaQzp5+F4sG7Y05gkNnQ
      /2oknTHos2WVLhau309ppYthvZIZ0Sf1jMnxa8S77XMMPSdjGj0FAEP3idg+mIRx8A1IBmsr
      S6ehEZoWVQCqz8P333+PTxWMHDMee9Ehtuw8QHKnnowa1r8lvf7FIemMGAdd3yJuC6HinH83
      kiUGffq5+LLX4ctaieWKN+spmbJKFw+/vYyxA9LpmRbHnJV7yC6s4JpxfVpEtl8Dwl6EnDQw
      cC6ZIpD0ZoSrQlMAGm2aFu0C2p65im6DRnP55b8jIS6czdv3c/XVV3P8yB58rW6Aov2gHMsE
      rxPLpBkY+v4Oy6QZ4HX4r5/EwvX7GTsgnRsmDmDCsK5M/8v5fLNqLy6Prwk+CXyHVuBa+gTu
      tW+gOorPfGDaIPqMcXh3zEW4KwHw7luEZIlBDtdWS2u0bVq0BVBYXImjeB1bVpYyePSFmCx+
      +xyJkeG4VVAVD+C3LVNtJ0NRFNxud0uKdcr8UmVTy/MR4Um4PZ7ANRGehLc8H+Wkd06U2+me
      EhtwSy+B0SBTWm5r1OaPb9P7kL0afd8rEZW52L+4HsOVH6Kaon+R8dZkUkejKzqA7f2LQW9G
      tsaiv/j5OvHdarK1EJpszUdVVcAvX1uhRRVAuNlI36Hnk2hxs/DHPfi8/kK+qNKJUQZDVR+0
      Zgzu9GlINrXLGBzr30Bvz0UXm0HWsQK+3xWG3h7JhDgHGckxgWdH9kljzso9nD+4C2FmI6u2
      ZxMdZiaxQ1RgD4BgCK8Dz/bPCL95EZIpAgAJCfbMRTfktl9kvDWHsr43sqBkECUnChlxzmBG
      dDz9cZNfan5rbdqqbO3OGNyQUaOZv2ABSBJjLryYsqMSc+fNIyYhBUPosqTd4lNUSiqdxEZY
      zqh5ZTm8I+bx03HOuYU9SlfeKbmQy8ZeCTojMz5bzT1XDad/hr+7YnjvVLILK7jthQWYDDqi
      wkw8dP3oBgt/wN/frTeDMZwT5Q7CLUbkqBTU/G382pO69rhJ7959tHETjV8MmjnoZtCSsm3a
      l8e/vt6IXpbwqYK7m7nPblNkE6qPaW8u4vcXD2VQt0QAth48zn+X7+Kf/3dRnWddHh82p4e4
      SEujhb/fcUHWJ7fxesklVLgl3F6FS6J2cO0lY1FSR/+q0/SzpdsRAm6YOAAAu8vDbS8s4P2H
      f4vZeOp1rPb6LZwubVW2dtcC0GgaJRVO/v31Rv5x8wWkxkeSU1jBEx/8wIt3TjyjO21Jsp5S
      JyTEhAWuJcSEUVJZ3+SE2ahvVuElgDcqruIy6wq6Ww8g+Zy85vwzXd09GHQmhG/DlFa66JkW
      FzgPMxsxGXTYnJ7TUgAaGi2NthCsDbD9UAH9MuJJjY8E/Pvs9suIZ/uhgjPu1/DeyXy7Zj+q
      KlBVwbdr9jO8d9NbGqEornCSX2JjgedCppfexCMltyGFdWTj3rwzIHXbZlivZJZsysLu8g/6
      rtqeTVSYiThtm0yNNo5WPamipfrfm0JMhJnCUjtCCCRJQghBYamdmIgzX4DcMGEAr83dwI3P
      fQNA/67x/O2q019xHG4x4nT7uOTcHowfmoHd5WHa28sJtwRfbPZr4lTHTTQ0WhtNAXD6/e+n
      y4CuCXy9ai+vfLWegd0S2XbwOGajngFd48+4Xyajnof+MJoKu3+aXGTYmekrtTk9yJLE4o2H
      EEJQUGrneIkNm/P0pkL+EpAkuGZcHy4b1aN54yYaGq1Mu1cAZ6v/vSEkSeKxP41l8cZD7Dpc
      SI/0OC4e1rVFC5EzVfBXE24xYjUb+M2Ibuw6UkRMhIXzBnZqkVZMW6W54yYthRCC4gon4RZj
      m5BHo+3S7nNHQ/3v4wZ3PmtyGPQ6Lj23x1nz70xjNur53dhe/G/DQSYOzaCg1M6OrEJm3j6+
      tUVrV+QXV/L852sot7txexV+N7aXNh1VIyTtXgGczf73XxLNngaKvxskPT6SjXvziImwMPP2
      8USHm9vkqsxfI0IInv98DVee34exA9KxuzxM/3Al6fGRmkE/jaC0ewVwNvvffwkIAXNW7uab
      VXvrDGgmxUU06f0RfVK1wqaVKK5wUm53M3ZAOuCfjjpxaAYb9+ZpaaIRlHavAFqj/70tk7kn
      h8w9ubzz4KWEmY2s3p7N85+v4eW7Lw7ESShz0UIINmw/yMbd2cREhXHJ6L7ERDVNcWicPuEW
      I26vgt3lIczsn31VoLVmNRpAWwdATf/7lKtHcOm5PTDoda0tUquxcW8eE4dmBAqQMQPSKbe7
      Ka7wLxarNnsgBAFz0bN/3A3A7CUbmfvTXnqmd0AIeOTf31NaXtlqYWlvVI/DTP9wJUs3HuI/
      S7azans2l5zbvbVF02ijtPsWQHskK6+UZZuzABg/JKOOMbiYCDMFpfbAud3lwe1VAvP5a5uL
      BhjVP43bXljAhMGpzF+zn7/+dgS7s0uJibDSPyOehat3cc34wWcxdO2bUOMw7RuB79AP+LJ+
      RArriGHQ9cjWuMZfawdoLYB2xo6sAv752WoSY8NJjA1nxmer2ZFVs+L4knN7sGp7Nv9Zsp2l
      Gw8x/cOV/G5sr8B0wtJKVx1TEtVmD44XleBQdHy/8Qg90+IQAn7aVUhpheOsh7G9M6JPKndf
      OZw/TuivFf6AO/Nd3Jnv+TftEQLHlze0m70qGkNrAbQzPl+6g7uuGBYwBpeeEMXnS3fyz//z
      WwONDjcz8/bxLFx3gH3Hirn6/N51BhCH9Upmzo+7KSyzU1rpIjbSQlSYiU5pKagCJg5KZMKw
      rtjtDjJ3HiYiOiaoHBoaZwPhdeDZ/HEdM+UA3q2fYxp1TytK1jbQFEA7o+SkGnwwY3DR4Wb+
      OCH4lp090zqQX2zj8PG9eH0qFpOeScO7YXd5sRj1LFx3kM+XbsfjEyR1jMbm9LZoeDQ0GqLa
      THntwl+qMlOuoSmANoPXp7B44yGy8krJSI7h4mFdW2QwutoY3K2XngPQbGNwC9fvZ9KIblw9
      rg82pweLSc9tLyzg9xf1IykugivP703vRAuSwcSMLzMZ1uvsmdRoTVR7Md5tnyPsRegzxqHv
      emFri9TqhJotdjaRwxOQLDF49y3C0HMSwl2Jd8dcTMNvOeuyNAWlcC/eXfMAMPS9El18rxb1
      TxsDaAMIIXj201Xszy6mb+eO7M8u5tlPV9ESWzXcMGEA5XYXNz73DTc+9w3ldhc3TBjQ5Per
      xwDMRj0doqx1TB8/dP1o5q3cw0MfrGPKrOUM753SLuafq/ZiHP+9AYRAThqIO/M93JnvtLZY
      rUpDs8XOKpKE5dKX8Wx8D9u7F2H7YBL6rm1TQfuOZeL87m/IUWnIUWk4v/sbviD7dp9JtBZA
      G2D7oQJcHh9P3nQ+kiRx4TldmPbOcrYfKmRgtzO7sbjJqGfqRXGURC5FAHHDfo+uGfZihvVK
      Zs7KPYzqnxbYMrK26ePrzuvKovX7SEvowPjBaWdU9raKd9vnGHpOxjR6CgCG7hOxfTAJ4+Ab
      kAzWVpaudQg1W+yyUT3Oun0iOTqdsD/ORrUVIJkj22yaeNbOwjx+OvpO5wIgx3XDs3YW+us+
      aTE/tRZAG6C00kV8TFhgoZUkScTHhFEaZKOW06W6lhGV1JXopK7NrmUM753K8N4p3PbCAm6e
      MZ95K3cHTB/PXrKRuSv3MrKzESOedrMOQNiLkKJSAueSKQJJb0a4KlpRqtYl1GyxVrMOK0nI
      EYlttvAHUO1FyLXykRyVgmovalE/m6WKlyxZQmVlJcnJyYwcObLdrpY90wzomsAni7eRU1gR
      sEi6M6uQmyad+b20TreWEcr0sdPpYP6qPbzaaTaWbCfC58JnGs/C1em/+nUA+oxxuDPfw9B9
      IpIpAu++RUiWGOTwM9t6+yXRWEtRoz76jHF4tnyKadwjAHi2fIo+Y1zL+tnUBw8fPozNZkNR
      FLKzs+nVqxcxMb+eKX5C9SFshUjh8Ujy2W2ixkZauOuKYTz+wQ/oZRmfqnL3FcNaxBx1dS2j
      ej+A8BC1DOF1IFwV/kIsiKI/2fSxrbISI26iz7uL8sTzCZPdJMx5l0MV9nrv/trQd70Apfgg
      tg8m+WecWGKwXPpy0HhrL2ib5DQf0+gpuJb8Hfs74wDQpQ3HPPGZFvWzyZvC22w23njjDUpK
      SjAajTz99NOBjdxPl9beFN53+CdcS6eDTg+KD/OEp9B3GVvvuZaWTVFUiiucxEY2f1eypspW
      8ePL/HtbFLsqYwHoG1HCnQPLiRx3f9UTAnfmu3g2f1ynMJOj0xt0V608zr3Pf4kvKgOXT+D2
      KlgMEn/pZ2fohGva5CbdcGbTtDGl2Vza6ubm0HTZTsWq7OnSVuOtqZvCq85SAGRLy1ewm1zV
      tVqt3H777RQWFhIfH/+r0eSqrQjXsulYrn4PXWwGSkkWzrm3Yv3Dl8jhHc+qLDqdTHytftOW
      YLZ9HJHyGmbEzgZgvnIJs+3j+GvVfd+hH/Ad+jGwcMa7bxHOBfcT9sfZDRZqkikSJBAeG8In
      wCcQkg7JHNWi4WlLSAZrm+5jbg3ayiY5vyTORsFfTZNTxmaz8cwzz9CjRw927NhBdHQ0Dz30
      EJGRkacthHC5UAE5rGULv2Aox9ajSx2OLjYDAF1sBrrUYSjH1iP3vuysy9PSZO7JIzayD48U
      +qdnpsVHUrwnj79e4l8X4Mv6EUP/qwILZww9J+H+6QVUWwFyRGJId4udUKDEkOgtx+XVASai
      fMVsqejKkBYPlYaGRlMQQuBwealwuKl0eJquAJxOJ3369OHmm2/mxRdfZNSoUWRnZ9OvX7/T
      F8rjwbZmLarDgeLz4Y6MxJjRBWPnzsjWlq1RSWEdERW5fkP4kgRCICpykcLObu0fzs7G9BFW
      I0mx4Tx7ywWAxKx5mXh8SuC+FNYRUZ4bOBfuSoTPhWRuWNGHmw24hJFLhnfgPP0GnJZUnszs
      TLjF0CLh0PhlcKa7xTRqUBSVSqeHSoebCof/t7KqYHd5fEHfkQCzz43VacfqsjVdASQkJNCh
      QwdmzpzJmDFjiIyMJCMj44wERI6MJPLSSwB//53B58Nz+DC25StQHX5jYnJYWIsoBV3acNj0
      Ac5Fj6BPPxdf9jowWP3XzyJna2P6SoeH7YcKWLjuAOBfg6CrpWwMA6/3L2rCv2Teu2MuxiE3
      Ntq1UVlegizB0iNGpKE3+jeFL9tLZVnpGQ+Dxi+BUxtLao8IIXB5fFQGCvGaQt3mdKOowYdp
      9bJMuNVIhNVIhNVEx0gLnS0S1jAFvc2GUlKCUlHpr9xCQAHrwsPRpcSii01pugIQQuByuTCZ
      TGzcuJG7774bg6FlandyWBjmfv0w12pdKDYbnsNHaikFCTnMirFzZ4xdOp9y95EkyVgun4V3
      xxx8OZvQJQ3E0P9qJOnsLZE4mxvTx0aYGd4nlfwSGwCXjOpB5u6aGr8cFof1uv/g3fY5av42
      TMNvadKqyfCICKw6hfhwmVlfbyTMKDG4SzQxkVqfeHvkVMeSful4fQo2p4dKh4cKhxtbdaHu
      9OB0++1iBRs/tRj1RFhNRFhNRFqNdEiKIcJqJNxiRKeTEV4vSmkpvpISf8FeUoLqdEEto6aS
      JCFHRaGPi0XXsSOmnj2RIyIaHK9tsgLIyclBkiRSU1NRVRVFUVpMAQRDFx6OpX8/LP1rlILq
      cPiVwo8/otod/qX4ZjOGTp0wdumMLqppA5CSzohx0PUtJHnjnM2N6a+f0J835mZy2Sj/BvTf
      rd3PPVfVbe3IYXHNtpRosVjp1yWe1XuK6B7t5bhdYv2BUn5/UXCjchq/bk51LKmtoCiqvyCv
      6mKxOWqOHS4fghC1cp0cqJFHWIzEx4TRNSWGCKsJfVWdss4sICFQnU6UkhJ8JaUohcdQSksR
      Ph8CqF5GKen16GJi0MXFYuzUCd3gwciW068cNlkBxMbGYjabOX78OIcOHWLy5MmYza1ra1y2
      WjH37YO5b5/ANdXlwnPkKI5161HKy0GSkPR6JJ0Ob14+xi6dCb/oQqSzqLwa42xuTN8/I4FH
      /jgmsCHMI38cU2dDmFPF6XSw83AhY3onsXpPEWFGiZHdo1mzI5trErTNN9obpzqWdKZRVYHd
      5QnUymt+3dicXlRV9ct30ns6WSLcUlOQR0eYSUuIIsJixGo2NGkWpFBV1PJyfMXHUQ6UYD9R
      jFpZWe9d2WJBFxuLLjYWc58+6GJikAwNF81CCITHXvVvA7fNPwPPYwePDeGuOhZKg+40eR1A
      Naqq4vV6z+g825ZcByCEoOifM5Aj/APL7n378OXnYxk+DENiIoZOnTGkJCM1YU1DS80vFkLw
      1EcribSaAhvTVzjcAdtATaG15z4XFRZw22sr6JbagYlDMygotfPt6r2M7d2B264c3SbnZUPr
      x1tD/JJlqzaQZ+g5OTCWpO86DtPw207Jv9pdKzZn3X+HyxswnCioW57IkkSY2UB4VUEebjUG
      fsMtRnTyqXX1qk4XSmkJSkkpSqm/9i48dc1cSLLs75KJjUEXEwtRkchhFnSqO1BwC48Nahfk
      HjvC46C+SqouB0TgXDJYwBiOZApHMoaDMSxwLBnD/OeNLGpt9gRdWZbbbKYMhnvXLlS3m/hp
      d/r7Hn8zmYLpT2Hq2Qt9hw54jh7BmZmJqKoJ6CIj/V1IndJbfAZSNW1tY/rGzPgqZeVULlmM
      UlqGZcg5WIcOJSIqFlVAn2Qrew8eISYqjIRok7YhTDtFDovDe8l7zP5kFmXOXIaf8xtGDLme
      cpurVuHtDRzbXR58ihp4v3bOF4BBJxNuNflr5RYjsREW0kPUyE9HcQpFQSkrqyrY/YW7WlmB
      UJwIRznC5a9ZS7IPXbgJOdyILsyIKcaEZAhWicwHN4jjoOapqLIB1RxRU2Abw5DM0UiRqf5j
      UzgYLGdtDLJNrNBQK3LxHViEZAhDkYx4rZF+DVa1sEYyWsAQhmS0gr55KwqV0jL0HTvWDDxJ
      ErqOHVHLyzEM6I8hOanu8+XleI4e9Q82O52AQNIbMKSkQFIiIjUV6RRrDQ1RvTF9a1Ntxnfs
      gPSAGd/swgquGefvZlPKyil4cjrWUedi6t6dim++xXssB++FEwGJxZuO4FR0GOQChJDoqW0I
      86uheraK3eWltMKORwF7VeFtc3pxuDyoqr933On2sXbnMTKSJxNhNTH3SBn/nbWYi4d3I9xi
      INxiJMxiJCE2jHCLvzZ+5qY+C//0U4/DX6P22msdO/zdI84KUFwoFRUIlwsQqA4nwuNBMpmQ
      LRbk8DCM4RaINvoLZ2Oqv8ZtDEMyhNUU4IHadsO9CE1dCXw2aROSyJEp6IfchPA4UO1lyHih
      KgFVZ2ngWHjt4PUnVtMc1iN73ai5K/HsSkM2RyCEDt+h9RgmDUetyEUyWPFJJpb8nMOhwGYs
      fbEMqLGRL7xevLl5OA4ewrMhMzCtShcZiSE9DUNaGrqIiFBS/KJozIxv5ZLFWEedS/R11wJg
      HTmCvCn3EjvuPEBwy2+HM6hTFJLBxFMfryLceOb3NNA4NRRVxeHyYnd5a/166pyr1T3Cwl+Q
      n1zVMpv0fsueeomoCCuxERbS4iMJr6qJV3epfLZ0O4O7JxITYaa00sVlo3rw3sKfuWhIl7or
      g4VAKG5wl6N6HQivo9b3Xn1s9/+G+PaF24NSVopSWoZSUYHvRDGgQxfVAckShRwZixwZhxwZ
      hy4qDjkiGV3HaOSYeEzm9m2crsUVgMdRzhffLOPG668ia+82tuw8QHKnnowaVnd2iKQzIlmM
      SLIF3ZmyzaL6wONAih1C8bvvI5yVyJEWov94JZJagnIsB9XjYM6yzYzo0ZHRcRbycitZvLGU
      8UMz6rU0jAYFXWqVlteZUJ0n8G7fgGPxCYQPJGskhpR09Mnp6OOT0UV3QLJEgN6MpNNT/3Nq
      e5RWuuiZVjNoW9uMr9moRyktw9S9e+C+bLUiGY1UFBRg0QkWrj/E58vduL0KSdFGKit//cbg
      WhpV9de8HW4vTre/sHa4fbWO/f+qKpAIXT3SyRJWkwGr2UiY2YDVbKBDtJVOtc5D9YkLxQte
      J8LrBJ8Tj6MCA2UInxNR6oRCJ4rXieJ1ILxOUrOzobCCjtFhdLYYqVjnYpLOgXvtMSTTScWO
      3lRjRsNg9bf0DVYknRVV8aD4PKgON4rNhbA76oVPNhrRxcZg7BqDLiYGJcyKOTr6Vz3d9EzR
      4gpg2ZIlGC3+vvTN2/dzzbXXMG/2V/iG9kffwukjyXowR2IeNJrEl0ailJSii42pM+C77eBx
      tlg7EhXf2b8dY0oMPxQcIS1+YL3NWAJ9i0L4Pwif/4MQXmedj0N4XYiKg7iPbUApyMOXfwxf
      4XF00dHoExMxJCcjmZug5CQdkt7kVyBVv+hNVccmpOpznQmhSqhqBJLO6H++geZoVl5pYBbQ
      +CEZdWYBNWbG1zLkHCq++RbryBHIViv2teuQIyNJ6NmLxJi9DO0Syf7DBaQlxrI3v5JhfdrH
      pjDVCCHw+lRcHh8urw+X2+c/9vhwevznTo83cL324OXJVA9mypKE2aT3F94mAxaTAatZT0yY
      AatexaJXsegUZNWD8LnA50b43OBz1fx6XTXnHg94BAS2K/B/iD4EIdePynr/oKPBjKS3ICQD
      whIBBiuyNQ5Jb6nqsrWAwcLh0h1sseXzVP9jWJw5/CQuZs6PxVxz7lUYfB5/P3tZmb/WXlyG
      cDoRwotfqHIAZJPJP/UxJhpjgr9wl6zWRruAVbdbK/ybSIsqgCN7fyYitQ9SaR6gYrL4C73E
      yHDcKqiKf9Tc61NwuLzoZH/9xetT0MkysnyGEzEyAsXnA19NNi8qtZGVV0pyrIX+CRI7jhSQ
      lVdKUWklbnd0ndcVRcHtdtdckMxgNIMx+ECnXPVvAFBV1BPFKPn5uPPzUQtdqKqKqqrIMTEY
      kpPRpySjq21bSSj+D1ZxB37xuUHxgNcNLlvVuRvV48SLUnNfKDVbSgr885YF5BVXsie7mMFW
      Hz5FsGO2DmO3BKIj/FN6+wi4SOTw3WvzCTMbKar0cPfgDGwbcpF0BpAN6KOLKHzseiRrOKLS
      Tvi11+E8+BOTU4pZtvEgPiGzs0jGIAl6hCfjKz6Mqjf4CxFZB5IMkg4Cx7J/0EuSQa76PcOt
      JZ+i4vUpeHwqHq9SdazgcnvxqQKP13/u8Sq4vdW/PjxexT+VTvWB4vXHrc8NPmcgniW16hmh
      IqleDLKKSScw6ap/BWadwKpTidEJzDoVs0GH2ahHkmovDJJqhqqQUIWKLMs1GwV5JPACNv99
      ZB3ojaAzoehMKHoT6PyVA3QmMESAuYP/XG8Cnbnq13hKcShq/QpFQalVkRKKglpejlJ2DKWs
      jOjtO+l7NIf5+xTCJAcW03IucxoomwOW6AjkqCjkqCik9DSM/fshNTKlXK36x9P4hjL1vtM2
      QvWU09JKv3WDSGvwSmCFo8pUu9mIV1Hw+vx51+tT8SoqvsBx9b2q+8pJvz4VX9Vz/vyv+n9r
      HbeoAsjNK8SDgYP7DrCzUwY+r7/gLap0YpTBUJURy+02MvcdR1EFHo8XJBlFVVFDLIE+kxwv
      sSFJEJG/kvyjJUQZo5Glnuw8coKi8podufzz81WMBj2yJCHLVf9SrV9JQqp1XH1dkiRkCf+9
      iGSkyBT/edV1tbQU5Ug+vnU7EJUVSDodhrhYDIkJGJKS0EdGIOvDkeQI/7oGHUj6qkLA/4fX
      68VoNAbOq+9B3aL0rdkbOE/3I1EVGxFAkWkYrx0dwpSrh/s/cAFlvmPM+2kPql2Q1sHK0G79
      KDCA8HlQFS/ensV4OYoqSiAhEr0ahu9YGSt3FxGuA0X1oUPFrBMs+N9SJcvD3QAAIABJREFU
      0uIjEEJF9XlRFB+q4kPx+VACv0rVsYJP8fnNMukMoDP4WzQ6g7/Q0hnrnFcfS5IOIev8LT65
      KnJknV/h6PR+pSWDQVIwyCoGScEoKxglFVn1YDFIRMoKRln1/xsFRrOKSVYxyCqSLFcpLr+b
      yAaQLf5rsr7qX4ckG2rOdQa/PFVKE53ef786XE2Y5dHa00CFoqBWVqKUl6OUlaOUl6GWlaO6
      3Si+/2fvvOOjOK+F/Uzbpt4FQkhI9A6mgwHb4JrYMU5u4tzkxnbiJDfNKc5Ncb7Y6eUm8U0c
      p8eJkzhObAPuBQym994lkEAIdVBbaeuU749ZrXalVQEksYZ5fj+Y0czszNmZ2XPe97znPUdF
      ihjMFCQJKSUFOTUVW3Y2w8e62O6YwdfuvwXdMDh+qpI1L73Jxz9wp+niGUQu5b4ZhoGqGSGl
      qoUUZ4TiDSvWkAKO3BehiFWt+/EdxwVUlZY2PyWV5vTdkdkpCCLRxwQ1PP7OwAlFFrHJEoos
      ocgiiiQhy2J4XZHFqH1Kl32yLOFUlM7jpIjjZWlwDcDCG28BIDE5mcljixHddaxctYq0nDyU
      CK2UnuzkjlAEzFC/9Bv2n6G0tJTtgSlmMZaATrajmemjc8OzcA3DfEG8Ph+yYjNb7oaBrhvd
      loZBjG0R2w3zb71jm25gZGViZGZiTJkc3m5goBmgGgZqoxv1/HmCtXWoDQ3oPj+GLCPnZCNl
      ZyNnZ6PKshldENHaj2U+G1raCY6fS0nqh0AAtek0DSfaOVPbjIDAoXKzB/TQ+6aC301DMJGf
      Pr+Pz6+YgyAo6Ge3ozfW4bjzz4gCGE0V+Hb+luDc/+Fo0Mt/3zGLgkQ/gj2ZP685gSYHmb9g
      Ng67DVEUkASzZyeJQriXJ0nmuiQKSJKIOITd9yutZIcaPRAwW+otreitraZyb22FQKB75Lko
      IiYnI6WkmMo9dxxSSgqiw9HnfZtS/jRliTl8/pdvhAvCPJT5Bob/gwg2V0jh6j22ZNUYCrTj
      uG77Qsq4Q2n7AkF0ne6t4VhKW+tsKQsCF6doI5SpHFauIjZFIsGhRCtaSeSNnacYmZPCfy6f
      giJLbDxwhpZ2Px+5eSqKJPKv9UexKxIfu3UasiTy1OsHkCUhnKl3MBiSKKC5s2YBMPG6BUyM
      s9zAE21n8Bl2HrtvCU67gtcf5LE/vskk2xmgECDcTZclEbsiAQNTCOfiGBP1l+71otbVodbV
      o9aWEmxrMye/hHocUmoqUlYWclYmUmYmos3sbR3ftIo1paNwtx0BICnRyfzE01w/9X0AHDhV
      y43O/Uzd8Z1wEq+X9LspzksnM8WF79whxOumYxvbET47jLaDj+Adbrbq5N1Pkm87hCdgYLR9
      jOQxExiZnXxNKdkhwzBMhd7aitbqRne3ore6zdBGrzdKoeuGgarqqKKEnpCInpCIlpCInjUC
      vTARVZTCLobIVm9YadbrBGsuEFTrUdWQkjXoosAjlGrzOAKqRqLTRrsvQEu7j0fdH0D9xZZO
      90NIYcpS7NZph0KVu+6LaOnKkoRdkUh02sL7BHScdltM5dxNmYeUsyKLlzwprL88s/Ywn7t7
      NnlZpps3LcnBY3/ZyIjQ38fONPDY/aYeArhz4Vge+8vGd78BiGfSkxx8POFlHvurM1yO8eMJ
      L5OW9IUrLVqviE6nmQivsBCIbskaum4OsDU0ECg/jbprN0YwCIbB+KoaFHcLgtNFs+ykuk4g
      tVDAUFUEWSbVJVJf5yDho6vB0HGf2Yf/eB2JTtOA9DTFPzEtA5ug8lzjbJ4JTsevCTgcCjNc
      Q5dU70rTkfpYSMxB040eXAJa74q2Y19QxecPYggCwaCGv81DwOMl6PPj9/gItLUTaGsnGFRR
      EVEFEVWxoTtdaDY7qiBHXUc3DGRJQpEFFMmLIgdQ5OYIV0HPLd2u+1xOhUSnjMNu6+5SCCva
      aQhnN2Hs/Q1ykoY9LY/EW76DLSUnfK7BmugYr7269CQHDc3tYQNQ19ROekS6l/QkB3VN7SQ4
      bDH3DwbXvAGQ8ucwszCR6fattKROJ6X5AKI/acjTQQ8kgigip6cjp6djHzcuat8zJQZfK3ye
      tHE3IDQ303poM6vLb6T1pZcxdJ0lp7azo1rh6KNfIt1o4IA0jXt0L/r+0QSyRyCOuAXfm58z
      rxORLlrRPSx37GK9ugCvakcRdISAyjJhPTC4CeGi3Am9+Gej3Ash5ej1+TEQzYGyWH7fjkG0
      HnzCanhdI+BxE9QFVGQEw0A29Oh/goHNbsPmdGBLSsDmsCOH3A42u4KiSCElbSpTEQOHXcFp
      U1BSXD0o2mil3VNrWhKFAVW4/VKyBSsw5t1q1QMIce+yyTyxajd39pCI8Z6lE/nRP7aEc/k7
      bDJfvXfBoMp00bmABgO1vQnOnwAMgsFgKMtopBM7QkTDiPF3T8d12W5EHxPO6KcFCB5+Af1C
      GWJGMcrke8zBuqjjDdRgMGIWXw/ydXO+x5Kpv3JG/230eJw5y1CWpT5len7tQZaM8JHSuAMw
      aEmfx6Zzdt5/01TzO55cS2PtWTZq8/D5g0x0tTDBsw8pfxlauxfd7UZtbSPo96MKGprNjjF8
      EprNzoHTVVRLwziv2UCx49NgcYFOYuEsDMlG0JBQDYmgIYaXPbaAuynaXnzCmoaMhixoKKih
      pYYsqJ3LiH0yGorQsd/cF/68aISUp4AiCSiSiCwYyIaKpAaRgwFkLYisq8gCyIaGrAaRAl5k
      QUSxyShCEJEAUsYIc55EggvJ5YoR6dI56arbdgM0Xeviloj1znWM9xi9HHMJ2/v4XemahiiK
      3c8VXvTv2ka/r21En7cX+XRdj5atmzz9kdXoUW7jEu+ZYRicb/HQ2u5HAJIT7GSmOMPHt3sD
      NDS3R50jK8VFgkOJ2napz9GIsT0uDECw9hjBrb8AzEFRMfzSCxEhLJ2pHKL+jjomcjtdWhyR
      ITERYXdRu7sc3+Xaum4gRiWNiyFfb9tjydOjnJ0y6rphKr+OFmdUuJfpTw2oOqouENQhqEFQ
      B1WDoG6Yf2ugGoKpeJFQDblzaUgEkMPrKhJBQ+6y7PyMIUjd/LACOg0tPgBSRTce3U4Qhcwk
      hdEjsrDb5IiBM/MziiSEFLGGrAeQVb+51EJLPYhsBJCNILKhohhBZNQoJa+IGrKgm61b0Qwj
      FUQJJNGMzJElMwJHlkMpPITOZy0IaJqOpMgdAz1Rz0Xo5/MNnngNMa0QKbczVbl/x++wTf8w
      gjM1+vOx3rMe3gFVU0MNjr7erY5osFi/iYF+L83/zAaH0q/fTfT2rr0AIeIy/flN9C13UFUj
      UtX3dN972xcpa+zv0+O70cu91DQNEMKJ6qKPF/ju3zbxubvnhGuANLb6+PXqXXz7viU9yNeT
      3D3LJHTZHhcuIDFrHK57/gRcOf+doasYbfUICdmmoozR2vR4/SBKnREHvfl1+3Ap9BTNEKul
      C0R372P4ZyUR7E6lS9ffVLQeX4DdJ6q5c+E407UgwPMbjjGjMIPrJozA6bRjl82oB46tQjx/
      FOfoJUjttSgOGWPfn0l98C0Uu7NHd4LX086Hvv8yn1mQwKTWDUhZ4/nhgXyuGz+Ce2+eHpc+
      WRiY983wNZstz0kfos0bIMOh4d/xW2yz7rusIvGG348tTu+b7vejxKlsmt+PHIeyGaH5R1IP
      uYACSeeoMnLJyjLrJVS11BJIKkLKHLwcYXFhAHTDwOcNENR02j1eBDHQZTLDJSjaqPCvCD9w
      xKBcpJIP+DwENQMVCUkApSN2NqKlK4lmiFd3H2tk2FjnPpsi4YoMB+s2yNYZoXCovI7n3zlG
      sstGUNV58D0zmTdpBIokhiYD9X4Pe1NkG/afwQA+dFNnC/V0bTMzxwzrVnDGd7qWYPtObNI4
      hHzTx69LHhIED6K951zu7qYmQOAvO914taUogo6BnzFNV39JSGXah3n2dz/h9TX/xqa1k+wQ
      +Mqij5N0Gcrf4tqjP8WaBpq4MAAnKs7zw39s7d7K7SE0LHbEgojTrpCcEHtf58BZ9DbJfwH1
      5c+QvOI32NPzEVsr8K16ENe9/0JMjC4MP1i9k8ZWL69vP8nPP3NzVEnIqcU5A1ISsmvBmfLq
      Jsqrm/D4gozMSYlKBSEkZCEXLiJw8Fnwu5HH3YbeXNFnIY+k5GTAIMMF59ygSAYORQptjw8M
      w0DTTHeaqmmomjm3QxSDqLrpStM0HU03B5U1XUfTDHOpG2i66V/uul7b2MZr7tksdBxGC/qp
      lYr56YFclnIsYt4HMXz9vROZ1z5Mby2BgfbmdkxgjJzMGFrXNQ0lYlKk0DH5USA8GVIQBM7V
      t9DS7mdsfgbJLnv05MmuEylDSym0r2OeSMe+rtul8PGdf1+pFOoDwZSiHD5442SeWLUTgM+v
      mMuUopw+PnV5xIUBmFiYxbOP3gMMvQsoeHwDauFUnDmF5oaMIqQRs9EqdyBOeO+QyDDYJSGn
      FuewevMJHn9uB6OGp/KPNYeZUJDJ1OIcfvzMFj5/z5zwiyaPuQXPzhUIzjSEYdNQS95AHr2s
      T1dGm9cLCJxzS4xJ9FLrlWj0SrR5fd2OVTUdf0DFH0q34A+nX1C7pWHo+Duo6T0rOIHuY3yh
      TdHDQwKyaM7nkEONDQwdh82suypLZi9P7piYJgnYFAlJkjsnqkUqn9C2v75xAE0zSL/u/eSk
      JVC9p5zKygssnJJPVmpCSBly0crpSoczRk5g7Lru8/tRFFt4omPHJEddNz/X6Pbyw39s5uZZ
      xYzLz2DNnnKGZyTx3oVjY06gVA1z5n/Hto5MAFrUtk6jq3cxwh37MQwzKKAfBZ6AToN6mcZT
      EMxJjB3viCQJyKGl+e6ICIIR9iKY71nn5EdJFKm54Oap1/dz65zRyJLI028eIDnBzviRGeF3
      U5IERKFvj0B/iQsD4D92nAs/+zmC04ngdCC5EhCdTgSX08zL7XIhOJ2ILiei09W53elEcLpC
      253m5y9yMoeQkEWgpYZ120vNZHDD07i+pQYlIavvDw8QaUkO6hvbCOz/J1rDMaTsidQ3Zg1Y
      ScjIgjPPrD3Mikkid2VsQw6IjFi0gH+uPcKPPmUaAPXkW8ijl6FW7kStPoQ25k4az+xFqGnA
      p4pmUjN/MLSMSHTW1oJT8JHtCNLm9ZMt+BmpBPBUVvHvv59EQAvn0pFQsUtgk8EugV0WsMsC
      NknAIUOyJGCXwRZSwDZFwmaTuo/h9f3NI9Zj/MD1UCvb6EtZhAaYBSkiZ1FHagiJ6cFzTB4j
      MtYWoKk+yEMzUniqroSE+kxwO9FFOZQKQu6SFqLjb6UzTYSohNJOXPmWrBAyXGKMGy+iY7f3
      nFNo7Z4ybp5V3C2t+H+/b1Z0OuhB4EoYTt0wwr3H8LKjVxnaFgiqaLqOgRDuZaq6gT8YRNN1
      /rHmEHcvHk9WigtVM3A5FH6zejcrloxH0zp7pQOZIicuDIB94gTyfv9bdI8Hf0srsqqiez0Y
      Hi+61/xneD1oTc0Eq2tC2z1mAQdvxLrPFy7mILhcIeMRbSTCxiRi/YWSsTQefp5JRSkcPtLE
      LvtcHvuPoZsHMLUomxeaT/L4aw1MK8jg4K6TKEozU4tuinm8oauhDI8dGR99GF43mqBjqH6C
      wSCeIHiDBp4g4XVnUCBDbMZXdoiVFaYC8gbfokmbwD/f2geqD63Cj94C0qiHkewJ2GoPY3Nn
      kXRgC06HHacMabKBQzZwKAYOp4FdAo/XQ5VyGlWTKEw3qGmXaAraGDUsjTuXzkCxOyNy5nTm
      6ulQpLGSxJnKdnAVYb+UhWFghJK9mU1cM/mboWuga5wt3cvWg6dJqwqQl+ni5I5zSEIKqi0V
      wSabz0sLmkVJdBVDD4Kmgh7ECC1N4xg09+kqIKBpKv7+tmS7IYRyKdm7ZJDtTAzXLatsOLus
      7bLve19pxa82REFAlCV6qzTeV0GYP726n4WT8xmWYdYWqbngZuOBCt67YFzM4weCuHkSosOB
      6HCgJSRcejk3Xcfw+Uyj4TGNRud6yJh4POgXLhAMGZGm+iZmNLeS65Iw9lQzxetB853g3Mf3
      IoWMiBDqeWC3IyUmIHZsDxuSLj0Rh4KoAKidqaLViJTR4b99Zjrptnq+nLyeg8pCgu0eZmSJ
      FPhf59izZ/DgwhMUaA/oeLx+PF6fmRbakWqWj5OdCLYEdNmF5ExGsCeh2FJwhfK7u5wKrjSZ
      bLuMy2HjREkpvpTbuH/YAQD+Vjudme4qPnyLOd3cv2k76pkKXHd/D8GeRPCIF9/ap0m86Q+9
      JvHSPe3sXmUwN6OJJncFKYpMqTEaT+oohOyJA1bj4YogCAhC6KcSGcEXWoqJORiJPsZNGoE/
      qFGQkM+2I5W48qcjXYayu6yWbEfK8o5MspEpokNZZQ1PW4z00T4zy2kfaKqGX468GaJpQBQn
      guxknqOFEwfbUHNnIShOSmrayXO0ka54MYKYKcuHqOzhu4U5E4bz8tZSHnyP+Vt8eWspcyYM
      H9Rrxo0BGAgEUTRb/i4XZPR9vKGrnNhXwvGTFXz8lvEQqkL02sYDFCRojEsV0FouoLdcQPfW
      ovv9CF4QfAKGoiDY7eiyjI4Bqobu86F7vLS3+Wnz6rSrEh4ceLDhwYFXSSSQnAmuFDNvuuHE
      UB1orSr4bkNIGY7sdJCUnkKZz0lywgRSJswnMzmBhFDRDqddiZkmu7/K4l77K/z+zAI+eSwb
      gEmuA3wqdxvwcfOe+FtAcdD21K3hXEDYEjD8rb0agLa2NpxCgLo2gdZgMYGAnRy5Dndbdt8P
      4l1OmzdARrKLDQcqwonPnHb5yrZ2BQFBtoFsQ7APfLW6ru+boWsRdQe8zMjxoR8t57t/3Yig
      +Rg/PJFv3liAWrom3PiJ6ZbrCVFBsHXUG+isO2AWkXF2FpQZ5Eyjg8lHlk/llyt38rEfvgjA
      lOJsHrpn7qBe811lAAwtaNb1DNX5JOAJrXsitnsiWjAdirKnwUOJWbKToxWlnD3qJj8vh3PN
      KrvOBpj7oaU0y07aVZl2VabNr9Hs9uILmr68joHHbhkUBQGXXSYhVOc0zaEwQhJw6kGcAS+2
      drfZM+nolXg86CnJBA6+gyAVQiADrewcemsTHK1GX/kq6DoBp5Ogy0lr1JhH57pusxFISorq
      sZg9E2dnj0VRsDtcfPG6NoILHwIMlK0/RL/Q+aORi5ainT8VzgWkVe8nsPvP5lT+XshMTSJb
      amLOtGmUlFWSn5dLSU0C12W2XfRzfrcxe/xwKupaeOKh28zUxxXnWbXxWLiIzrWAIErhGrkd
      jJ05goK2LCrrWyiaOxrnxBGXeHbDdJWFqo2ZpSLNpeFtwmip6iwfGfSg+X3RvZPekB2huuMd
      Bdk7DYkQrk6WYKYnH2TsNpn/uXchre1mPYDkhMHvNcfHTOCms+gnXgHMrqXU08MTlVAR5tBD
      sSWEHlRoW6hYsyArgEBA1WjzBGjzmv/cngBtXj9ubwCvTw1Pja6sb+V4RQNBVUeRRW6cMYqU
      REe4eHXHP5sM6cmJ2BR5wF3T6ulN+NY+Zg4M6iqOZd9BHnU9YE4g0b1eDE+nSytqjMTjQW1r
      Q/AHzO2xjvGatQ0EwY8gqoiuBATFgGATgsOGbdpdYUOhlqzGaKtATEgE3Y3r9u8iDRvX60C7
      7q7lT//3Q9b75+DVZbMoiuHnF4sbSF360NU9EcyAFzYe48XNJ8I9gP/58MKwL/dKyjZY9CVb
      s9vH137/NtdPHUlOWgJr9pQzZ0IeH1g68YrLFsYwMFR/RAOyLbTuCRWVbw/XJ0YP9n0+CFVO
      c0Xppo6lLjnA5kJ2JJvjL/Ew0B8PBiAy3rlb19IAf1DF7fFHKPFOZR4IauaNjPE1FNlME5vo
      spHUochd5tJlV8JheUFV4/Udp9hTUsWscXncPm80SgwjNNg/yPBs5MRsc6D0IuhTNsPAUFV8
      7/wCrfk8yowHMXw+fJt/g+AcjpAzO9wjaWpo4sjxs9jUAMmSwahUR8iIeDB8fgSbrXPcw9kZ
      gbX5+DnmTC/k3PnzpOflc6LqPEm5w5l13URsyclRPRLB4YiLmO2BeqbNbh8rNx2nsr6F2+aO
      Zu4lt3YHXrbBoC/Znll7iCa3L1wUflJhFn96bT9//tqdV2UUUAdmHfL2UFH79qh13deGEWhH
      0LxmVbn+IMqhRm9CZwO3Y71ju+K65B5KXLiA6pvaeedABWAag8gYXgNwKLKpxF12kpw2hmcm
      mQrdZcOu9O8rqJpOo9tLepLTjP/uOL9h8IO/bybZZWfp9EIOnqrjB3/fzKP3LRlyBaUZIo16
      CumGOPAPRhAQFAXHDV/At+ZbBNeZPn97wRwcN3/V9KliKrKf/P5trv/AEnLSEljdpeVmGAaG
      z4enxY37QjNpioDu9dJaXUVpuR/b6XKK1dOILccIthXibG6hvf4s7X5/OJpL93gxAoFwxFZ0
      mG+MCK5ejhHs9ituSCJbuwsn5/PCxuOcrW8dktZuvNLk9rHpYAV3LhzHuPwMXt95Co8veNVG
      AXVg1iFPQXCkdNvXVxRQLLq7vUPrbfUQDK0H2kORY92kIdpJLUR5TwRbQnwYgOy0BD68zEwZ
      PBjWe09JNU+u3o0sCqi6wefuns1148zR9UNldfgCaljh3zhzFN/4wzoOldV3Kwo/mPQm40Ai
      KE6cd/wc3WumaBCd0fWMX9tRyvVTR3aL337vgrGhH67Ayp2nu7k7UscUs31zM6XOAgzjOgKq
      gZiicNPMQmbEyAVk6DqG1xcRzuuJjt4Kua60+obwvk53VucYihEMIjgd5phHrIgsV0QvJYZh
      0WUJPSXFLJhziYak73t27ZHotJGbnsjdi8eT4LAhCAKllRfCdSUs+ocgKeBMjUgqeOkYhm6O
      nXQYjUB7fBiAwaSx1ctvVu/mew/cEJVm4WefuZn0ZCdNbh/ZaQloukGj20N6kpPstASa3N6+
      Tz5EMg4GXRV/B33Fb+86fo5dx6v4w1ffQ4LDxpZDZ/npP7fyzQ/OAATssojP68fQBOwOCXdb
      7EFgQRQRElyICZcXtWFoWoRxiDE3JDT+EWxpjTAyEeMkoXVD1ztDe7tOOIwM+40KDTb/+apq
      KC4ebvZqFOWqj3nvD23eAHZF5pP/+2r8REZd4wiC2G2g/qp/EofL65g0KjrNwqRR2Rwur2fJ
      9AKmFufw9JsHePB/Xwm3vjEM7rt1etzIOJTMn5zPyg3HKMhNJcll48CpOnLTE8MRLXtKqll2
      XVG4atGiqSP582v7aXJ3pHyQIFSbuKM85WAiSBJSYiIkJl7S5zt6nIaqdg6c9zCIbni8BJua
      OgfkfT7QDd4DnNh8nq1/E0lNtOP1B/mkbqD930HqBBHR6YjdK+noiTi6DwgKig1VlpFSkk33
      Vxy4ui6G+ZPzqT7v5uv/uRABgcqGVjYfrLimIqPeDVz1BqAgN5Vn1x3BH1Cx22T8AZVT5y5w
      z5IJALR6/NgUmQJnK+U1LYwZlkKFN5lWj3/QWt8XK+NA4wuo7CutAWDm2GFRLbLrxg7DJov8
      5fUDNLq9zJkwPGo8pCA3laOn67l5dlEo2VcrCDAiNwswEPHT6JNwyRqaGiQpceBj0AcDQZaR
      kpOQki9N3rqyOn78zBbafUEWzR3JF1bMwW6TOycndjMo5rrW3BLdI4k4Rmtvx/D5enF1dXdz
      9Zg2pWP7Zbi6LoaO9+ifa4/EfI8s4oOr3gAU5qayZFoBDz3xJhMKsjhR0cDiaQUU5po+tfLq
      Jsbqx/iUayPS9dPRql/l9+1LKK+eFD7mSss4kNQ1tfHoUxsYmWMOUv3trYN854Gl5KR1tqCn
      FOWEcwN15ZbZxew5Uc03/rCO7LQEjpTX87m7Z9Pa3I6ZDM78gXtUCY8KTY1X/zyAoKqxatNx
      RuakhO/JkdP1XDduePTkxP7MTowgqs6zpnWOmXR1Y0UYjWBtXcQYiidiBnxozETTYs9i71iP
      GjPpnE8S3XPpn9uut/fIIj646g0AwL3LpjB/cj7l1U3ctWhclGIdlRzk35405A/+G4crEZ+n
      jdKfPsuK5H7G/Q6BjAPJX14/wIrFE7h5djEAa3aX8ZfXD/D1/1zUr88rssSj9y3hUFk9TW4v
      9906nfRkJ36vObPzQ/PyOHGmiuIR2ew/3Upa+qW5Zt5NvLW7jCSXjbuvH0+T28ey64p4/Pkd
      /Omr70WSBibdgSBJCIkJiIkJfR/cC+E5JR2TELuMn3S4tzpdXdE9lg7jA8Q0FEKvYyauqJ6L
      6HIhXEREzOXQ2OrlUFkdaUkOphbnWD2RENeEAQCzlR1LqY4IHGdB0hm++NsN4db3wqTTjAhk
      A4NXiediZBxIyqubuP/2zvGN6aNzeWHDsYs6hyAI3SKkWlqbAYF/7agGBA7UNgBQ2NJyuSLH
      PeXVTRw4VUdDsyfcA2j3BrjQ6iU77fIU9kAjyDJSUhIkXZ5rztfejqJqPY+ZeDymIblwIXZe
      rpDxQRTDvY/oTL8x3Fcdx8Q4Xuglad6ekmp+s3o3k4uyqW9qZ/XmEzzy0etjzvW51rjqDMCZ
      2uZwWuf+KFMxawL3pP+BJcs+T3mDl7vmFpD59m8Rs+4bfGGvAEXD0zh4qo6bZ5st8wOnaqMK
      wvQHwzA4VFZHk9sXLlqTkpJCRw/geFktxflZHDjbRGpq93joq43UBAdZqS5+9MmbEASB3Seq
      +P7fNpOS2LUI/NWDIMtICQlIKZdR8Mcw0IPBiBnukcakc+a75nZj1NfHNjIhF5cgy51JGx0O
      pARXuMdxrrSer44dQZ5TQsxw8vyOU+x7yc/0yYXRvRGX65rrGVxVBuDZtw+z8WAFEwoyee6d
      oyyZVsC9ofkFPSFljUUZfzuZb3+cnOHT0Q4eQBl/O1LW0Lb+h4r7b5/Oo09tYE9JNQBn61r4
      zgNL+/35oKrxg79vxhdQyU5L4G9vHeSzd88mP9UsuG72AOBgQx1diKiuAAAgAElEQVQAhTlX
      fw+gud1HQ7MnalzErki0tPnirgcQVwiCOShtsyGlXnrP1zAMjI6Jhh4P/tZWpKCK4fXQcqGF
      hjI3N2SnorW0EKypYW7wPG2bymg6aI82Pn4/gsPR++TEbinlu887EWy2d40huWoMwJnaZjYe
      rOCXn7/VjKQJqjz0qzeZPzm/z56Aff5nkUcvR284jm3mx65a5Q+QnZrALXNG8/SbZjro+26d
      TnZq/5XUW7vLSHbZwxEd5+pb+X9PvcOTX1gOGOQn6VS6zSgghyJdEz2AouFpBIMay2YVRY0B
      DFUU2bWOIAim4nY4IC0NPTMzPHhu03S2HfJy2/XmHBvDMHj6uR2MHZnBnPnRv3NzoL1z0Dza
      vdXpugrW1fU678RQ1ZjhvoLDgaDIBE+fAcA5ZzZydnbP804UZdAjtq4aA1Be3cSEgkzsoZBG
      uyIzoSCL8uqmfrmCpKyxQ6b4wy+az2eGCPr8GH4fhs+P7vdjdPwLBDACEbnZDaPHBLqapuHt
      R/GQI6frSfQF+fU4s+LZsXfeYtv29Uwa1b+0zfbjVdyQ6qL1hSoMIEkUWdhQRuVqL9e1VeFr
      l7ktA854FOq9DjznGwa+Vm2c0REZ9ey6I1GRUfIADQBbXDqyJPK5u2fz7afeCY8BOGwyt4SC
      ICIxB9oTES9xTkkH0QPtnYakbf0GtMYLuBYtxPB68e0/gN7ejpI/oot7yzQmGEYvg+hdB9S7
      VkeMWFd6zhN01RiAouFpPPfO0ahY+hMVDdy1aGCr6Ri6bnYb29tD/zzono6lx4zbjqXwItJy
      CJIU7moKDjui3WEuU1ORHXZz0o/NZi4VG0KM/P9d6W8Kjed++QZf+ug8Rgwz/f7BmiYef24H
      v/rAbf36/v7tpbxz9gLT3z8PQRCorG1ib4nOXXOmUbnfzaftVdhOnWa5AVuyx5Fxto22l9rw
      xsggKgCE4u/F5BSk5GTE1BSklBSzNfcuoafIKIv44Lpxw/nZZ24ORQE5mVqcPagump4G2puf
      /Tfpn/lv7KMKAQjMm8eFJ39D1sNfiXkeIxiM6H3ETpVieL0xB9ojx0p6G2i/agzAxcbSG4aB
      ERpg0t1t6G3mUnO7MTyemEpc0zRkWTa7dglmSJ6YkIA8bDhigiuuslwOFrHmAXz2ngXYspw0
      2BL4pT6SyVNHU9fq46zqYPnEAhLfM6dH42SoKlqrG721Ba2llWBJLXpziznLtoPQ/RRdLqT0
      dOT0dKSMDKS01F6jP4aSWJFRFvFDerKTpTMKr7QYF4WgKEgpymUPtBvBYGc1xC5hv3GfDrq/
      GJqG7nZTXnqWkyfOUpgoke8S0dvbMXS94yg6i8QIpkVMSuR8UOQfW8uoC8DwglweuGcBOend
      w+QGM81sXVMbf3n9QDiC6f7bp0dNzuqL/sr2xo6TbD50lgffa5ad++Mr+7h+6khumzem39cy
      o4DM1m5HFJDmdvP9b/+Ouuw8qtwiLlnDpYh8cbSNsSvec/n3zTDMugeNjWiNjWgXGtGamiKe
      ramExdRU5Kws5Ows5MzMXru/8O5OuXwlsWS7eNxr1uLZvp20j30MgKann8Y1fz5JNy+/YjLF
      bQ8g3EJvaUFvaUULtRD11taoH30HgigiJieRl5xM/qxi052QnISYmBizgEkHvoDKj594kxW3
      LWLa6BwOnqrj0b9s5P8+f+uQJa3yBVQefWoDKxZP4P7bp5syPLVhUGS4de5oAB5/bgcAt80d
      Hd7WX3pr7aanJqMZbaQlJ3G+2XN5wkZfFDEhAVtCAuTnxzzE0HW05ma0hgYCp8rw7NiJoQY7
      XW+KYhqGnFzk3Bwzh5CFxRDhvPEGNF3jwpO/ASBx+TISly+7ojINuQHQdaNbTVu1oYG2zVsw
      iB7MFF0u0x+ckoyck4t97FjEpKQB7fbvK60h3+Xj+tpfox06xvXZE9mdsJD9pTXMnxxb0Qw0
      +0prGJmTEp6de/PsRPaUVA+KDIIgcNu8Mb22+A+X1/HPtYdpdPuYM2E4H1k+NTy43tN+n6Zy
      3JnNYiNIgy0RQXFQoNWz3TZuyKbTCaKIHHIR2cd1H/sxgkHU+nrU2jraS0vQ29rD75ugKMg5
      OSjDhiEPy31XjUFYvHtIXLaM1FtvvdJihBlUA3D62CH2HDuJ6mtj9pJbqT91gJrGNgR7Mive
      09ntkbOySPnA+4Er033TGo4jLVqIffHDqGe3o+0/jsHgFmOOV8qrm/jVyl189u7Z5KQl8PLW
      Un65cif/c+/CXvd/6raJeLGhI/KZ2h00a8P5izKceCoJLygKSl4eSl4eHUO04WygwSDB2lrU
      mhq8hw5h+DsrNkkpKSh5w1Hy8hBTU6/qMR6La4tBNQB5oycwauJUTh7cQd2FFs63+rjnnnt4
      46XV+HWQDQ0AXdfDg666rocr5wwFU+ST/FXNYoN3BlPVZA55Z3BOPc8U+SSqOizq2MGSbVpx
      Nk+/eYA1u8qYWpzNobJ6KmqbmVqc3e/rDZRsa/eUcce80UwuzATg/tum8sBPXqGp1UOSy9bj
      /hb/JADk7DQy3/dZ9GYvrNoLsnPIn+nFEJZNEBCHDcM2bBhdS5boLS0Eq6vx7dyF1hQqpCOK
      SAkJKHl5SHnDOdGq8+y6I+Fe0b03TcJ2makG3hX3LQ6JV9n0kOs6nmQbVANgs8lsXPMa7UIi
      ty0fzauVJQAk2WyoRnwMQNiEII+M2c+zJyfzwsZjFA1P45tj9mMTRg2ZDHZF4rH7l/LjZ7by
      5Iu7KcxN5bH7l2BX4iPCpb+4bDJGayuP/uoVUiUYP7a4c8z9XYyYkoI9JQX7hOj03IbXi1ZT
      w6n12zi+5zj/Ya/FlpLLzg0neKOynPfcswQp7eLSbFhYDCWDqoOP792KLXcMS6aaXmCPu5Wg
      plN5oYX5IkhCp4LriALqCLUcKqSixWRs+yVfnlWL/N75qBXbCeypxFa0uFumwsGUbcP+M/iD
      KjfOLOR4xXk27K/oM43FYMi2fFYxP3pmC4XD0sIunqnFOaQlu3rdPzInlekj0/Hs38MXs6Du
      vJtnjtn41menIorikD7Ti+Gy7ltSEkpSEltK3KRnr2FcgRsh2Ul+2U5+duo9LNi2C6e/cyBc
      Sk/HNjIfJT8f0dn3PIGh/i1cDJZsF8+l1AQebAa3B5CQxvmTJbxSUcKk6bO5cekiXn/lZWYu
      WIQUJy1DQXHiWvFH2p97GM+rP0DMHE/if/wxXCR9KLicNBaXghH0op7ZAoBcuCjquxYNT+Pz
      K+Z0FjeZOpKH7pkbtf8L98yJKvTx0D1zMTSN/9j7Eutu+jBPlJ8nfZKTB9wnyTq2D3KWDvh3
      iCs0FWnUYlzv/yAIAsr5Msof30DCjUtJTjLTbBiGgdbYRLDyLG1vrzMn6GBOGlLy8lAKRiJn
      Z/casWZhMdAMqgEoHj+J4vGTorbd9b6hLXHYH1rXbMdzdBj2cUvwHC1FX7uD1PffM2TXv9w0
      FheD3lKFZ9WDSBlm6Kd/y+O4VvwRMSUP6L24SQexCn2oDeexifCJFfP4RGhb20YZ/7ET2G4Y
      0K8Qdyyx7eJnJ/IYVVZn9oq2NTNRqSDRaAFMAyAIAnJGOnJGOs7pnem4jWCQYFU1/pJS2jdv
      AUMHBKS0NIThw1GKi6yIJItBI376IleIwNmzeLZuI/cnP0K029H9fmq/9g1cc2ZjGzlySGQY
      qjQWAP5NP8M26wFsU8yoq8DhF/Bv+hnO9z4O9Jzsra/iJlJ6GqgadcdOcMwdJD05geGHDuMY
      0/8JZu9WRg3P4JOVa/j3umQa3T5m5QT49LDtCInf7vOzgqJgKyzAVhjRMDIM1KYmPKfKcL+1
      JhyRJNrtKAXmsZeTPdPCogPLAJw+g33cWMRQ6Klot2MfN5bA6TNDZgCGsiSkVn8M++KHw3/L
      BfMJ7Ppj+O/y6iamje6smDQiOxlZFPssbiJIEhW3383v/7aVMb7zNMou7IrIdz5+fY8J7K4W
      lCnvZ1L5BiYFn0YYmYd2bjeOmx9DEC/x5yUI5lyGaQnY58wOb9Z9PoIVZ/Hs3IXWbKbZFmTJ
      dCEVFiLnDG6OG4urj2veANhGFdK6+kV0vz/cA/CXlJJ0x+1DKsdQlYSUsieint0e7gGoFduR
      sieG93cUjLlx5qhwD0DV9T6Tm6lqkD8euMB3/ut6si7UI6Wl8uSBOtbsOcXyuQPfk4knBMmG
      8+7foVXuwmhvwH79VxATswb8OqLDgX3cWOzjOqfWGapKsKoKf8kJ2jdtMjOviiJKTg62UaOQ
      hw+Lm3xJFvGHZQBGjsS1cAG1X/sG9nFj8ZeU4lq0cMha/5EMRUlI++KH8ax6EO30JgC0C6dw
      rejsAfRU9L2v1MaNFy4goVE4cSwdpTSnt+ocOV1/1RsAAEEQkUfOG/rryjK2ggJsBZ0uJEPX
      UevqCJw+TfuOnaBrZq8iKwvbqFEoI/KGrBavRXxjvQVA6gfej2vuHAKnz5B0x+1XRPkPFWJK
      HgkfWRmOAnJ0iQK61NTG6RkZaEhUVteTPzwbwzA4UN7AuJHxNBf42kAQRZRhw1CGdU5kNAzD
      zJF0+jTePXswNHMSppyViW1UEUr+CMsoXINcNdlAhwJLtt7Zc+QUT764lykF6dS1eHEoEt+6
      fzm6YVxx2XoiHu5bTwy2bIZhoJ0/T6D8NMFz5zBCM6LlzExsRSGj0IP76Fq+b5dKPM4DsAzA
      RWDJ1jeNTS0cLK0kPdnFlHGFiKIYN7LFwpItmh6NQnY2tqJRKHl5CJJk3bdLwDIAPWAZgMvH
      ku3SsGTrG8MwUOvrCZSXEzxXBbqOpus4RozAVlyEPGxYXEUfxct960o8GoD4kcTCwiIuEQQB
      JScHJadz8p/f50NsbCRQVk77lq1gGAiShNJhFDIzB72gucXlYxkACwuLi0cQUIYPRxneOUPc
      0DSC587hO3wE9fx58zBFMaOUiouQUlKulLQWPWAZAAsLiwFBkKTuIamBAIGKCjzbd6C1mJPX
      RJcLW9EobEVF/UqKZzF4WAbAwsJi0BBsNuxjxmCPSAmiezwEyk/TtvZtdJ8XEJBSU7AVF2Mb
      ObLPOs4WA0dcDAKrqhoeRAoGgyhx+gJYsl0almyXxrUkm9bcTKCsjEDFWTAMlBEjsI8uRsrI
      uOKyDRQdBWHEOMr4GhcGILIiWGREULxhyXZpWLJdGpZsl0a8ytah4+IpYiouXECRFjFeHx5Y
      sl0qlmyXhiXbpRGvsmmh2dfxJFv89EUsLCwsLIaUuHABWVhYWFgMPVYPwMLCwuIaJe4NgNVB
      6QHDiLo3RijCIB4wDCNui8C8m2SLp3c/nu9bFF1+Fxa9Iz322GOPXWkhOlj53LNUnqum1auR
      5pJ49vmVVFScITVzBPv2bKOgoJA1r64mNbcQl31ww7wqSg/y1oZdVFWeISuvgNdXPUtp2WmO
      nzxLYaad/afrSZJ8vL15L2NHFw6qLF1pqjvLytWvcfp0OXlFY9nw6ioOHjtOVUMrw5O4orId
      3budjdt3c7amnrw0Fy+8+AqnSo9T3+KlraYMKX0EZ4/soLJZY1jW0JY1jJRtTFEhuurj14//
      nNwxMzl3dEccyTaSF59/jtKycjRs1JcfiRvZRmQm8exzKyk7WUpju05rVekVlE1n09trOXHy
      FG++/ibTZk7lX397huPHDiMlZlJ38uAVk83b2sj6DZsoKytj87ZdpCoGb2/cwqF9u3GmDePI
      wT1Dqs96ki0uooAAMDR0QWb+goUkJyWy9e03mL1gCUkuOzkZiRz0eTl5eCdyRhEZ/chPf7nU
      VJ5j+tz5jMpJxybr+IMSt9+ymDffXoeha/h97bz82jZWfOg/B12WrmzfsY8lNy3FbnOSJPvx
      CUncc8/NrH7xRQx92BWVreRMFfNmzyI1IwebTeY/PvQhPM0NvLV5NykZCs2Ndew71cCHP7Dg
      isoGsGHtGibNmIauG6hBX9zI1nC2FFf2KMYW5pKfn8/h7afiRjZPcxXpOYXMnVLArkOlJCQa
      V1A2kcXLbibQ3oTbq9NwupTxc5Ywa2I+q19+k1GZ9ismmzM5nVtuuYWKY3tJzC4kb3QRoyZO
      5eTBHdRdaME3xPqsJ9niyAVkUDxqFPt3b2fly2to9/ioq63i1KGdbN17HG9rI29u2MWMKUNT
      Xapw/BRaa07zr3/8lerzbYiCxs5du5EUsy7u/h1bcKTm4rINfUhXwN9GVVUtOzeu4ejJM4g2
      Uya7w3nFZWtsqKGx2c0L/3oGPxJlR/fy8lsbue2W5QCseXk14yZPH3K5usp25nQpbsNFWoIN
      n9cXV7I1tHhoqK+j6XwNq19+I65kCyoJNNdVsmv3XpLTcq64bABbNm1k4ZLFeHxeEpyJIMjY
      Qi3qKyubwfaDJcybPg6bTWbjmtc4We9nwfSxQ67PepItbgyA6vcxvLCYRYsXE/C6yclMIS17
      JDOvm0FrixtncjoP3v8RXlq1GnUIXHwGIjOvm83U8UWcb6hBd2Zz883L8bc3YwAzFtxAjjPI
      odKKwRemC8lJKeSPGs3MyeNw+wVaG8+hawGaQ4XCr6hsqZmMnziRgpxUmi/Usu9UHf/5ofeT
      EPpBrvivByndu5ELrd4rKpvfsJGTnsiZiioqzp2NK9mS0jJxJSQxbfpMs5xjHMl2tuI0Y2cs
      4JbbbuNcxckrLpvqa6XeKzEsLYGc7GzKTp/E3VSLpstXXLaqU4fJKZqCJMDxvVux5Y7h9uVL
      EGDI9VlPssVNGKiu+tm0cTNtXh/TZ88nLyuFDevX0R4wuOGmm6itqqC4aDS1Z8tR7amMyEkf
      VHmqKk6x//AJXEkZLF0yn6P7dlJRfZ5RYyYyNj+dmpYAI4dlsHfPAa6bNXNQZemK6vew7p2N
      INm58aYbqC4/wf4jpcyct4hhyfIVla25oZotO/eRnjOCSaNy2bR9NwC5+UXkZzhJyilECbZR
      UlHHlIlj+jjb4Mm2YLbZKmyoPYuclIu/8VxcyXZo7w5OV9Vz3bxFyP7muJFt/sxJbNjwDh6v
      ynXzFoC38YrK1lBzFs2WSm5GMgC7t2+mtqmdG268ibaGyisq24ljRygePwlFFCg7cZRjJ8sB
      mDR9NkawbUj1WU+yxY0BsLCwsLAYWuLGBWRhYWFhMbRYBsDCwsLiGsUyABYWFhbXKJYBsLCw
      sLhGsQyAhYWFxTWKZQAsLAaJ1pYWdCvGziKOsQyAhcVFsG7V3/nEQ48AcGDrW9z5gQfRejj2
      /x79FhcaKvnN357v+8S6h+889vjACWph0Q/iJxeQhcW7AL/HDR43Z8572LRlP7mpieiaj598
      77u0elTuffDzeCv2s3LtNk6VVmJzubDbJI7v3ci/X9tEW5vKd7/9Of7nkR+R7JAYP+cG/uue
      2wGdpgstXDhzjO//6k/IAtz4ng+THDzLK+/sZe71ywnWH2XPiQqKJs1m8ZTh/PEfrxD0tTNs
      WC41tXV878c/4rf/+4OwHNPG5F/p22UR51g9AAuLi2Txonls3ryZVlUkyS5RcWgPNe0i100u
      5tXX3+Tfr67h+z/4ITPGjcTQA5ytqiFr+CjycrJorC3hdE0zUspwvvftL7P/0PGoc6teN3nF
      0/nKJz7IseMn+Pdrb/O9H3yf9906l017Kvjpj3/KqR1baWxpYubiW7lt3kQWLLubSaPS2bFh
      c5QcFhZ9YRkAC4uLZNz0+Wx98U8UTp4FgDMpAY8vyPjp81i2cA6ioVNdU8OFJnf4M8//669M
      WrCc/NwMDEDspTC4IIh07LWLBmfOnqOmrgHV76a+oY62oIYkgAAIGAgIIAjd5LCw6Iu4qgdg
      YfFuID2vgNz0JOYvuoFEp8K0uQtINNzsPXSMsRMmMXf6RF57/S3GTp3J1CkTkSUbs6dMYt3a
      NYwaO4mpU6eS7HJSVJCPpNgpLszHtAoSY8YVY3OmMGJEDnZXKncsX8yrr76GkpTF0rlTWP3i
      q9z1wQ9TkJtDcloGOZmpZOTmk56cwJipc8lSPGE5sjPTrvStsohzrFxAFhYWFtcolgvIwsLC
      4hrFMgAWFhYW1yiWAbCwsLC4RrEMgIWFhcU1imUALCwsLK5RLANgYWFhcY1iGQALCwuLaxTL
      AFhYWFhco1gGwMLCwuIaxTIAFhYWFtcolgGwsLCwuEaxDICFhYXFNYplACwsLCyuUSwDYGFh
      YXGNEsMAGBw5sIe9e/eyb99+3O2+y7pAQ10V77yznp179hHU9Iv/fPU5qhuaLkuGstJjrFu3
      jmMlp4j33Nf+5hpeW78p5r5D+3dz5lzdgF7vTNkJTp2ujNpmaEH27dnDhebWfp/n7VdfoMWv
      4W9roaSs4rJkCnhaqawa2O85WLz96kq++fWvs3lvZGUvg7JTpy7qPKtWPQfQr/tXXnKMNp8a
      QxbzGVws/pZaXn17Y9/HDcCz7SDgaWXv3r3hf8dOlF32OWN9j8jrHDpyrE8dFHmOy/2+hq6x
      f88u1r/zDifPnDPP2VzDq+ti/74vD4NDB49c9KdiGACdX/zwRxw8eJB9e3fxhc98gvU7D12S
      SNvfXs1Xv/V9mt0eju3fzqrXLv6L150rp6K6HoBjB7by1tb9F/X5P/3iUZ58eiV+v5/XVv6D
      g6X1Fy1DT7z476c4c94zYOcDsyTgrv2HY2xv4vH/+yVP/PYvA3q9v/36V3z7uz9Bi7CMJfs2
      88hjj7L1wLF+n+fw3h20BXT8bc3sP1p6WTI1VRznuZfWXtY5hgJ3TSnPvbmHR7/3fRbMGBex
      R+f3v3ryos61fftWgH7dv+OH9tHi7W4AOp7BxaJ6WtndD+UxEM+2g6aK4/zmD09z8OBBDh48
      SMnJ0z0eq3nP86un/tXnOWN9j6aK4zwZus7m9W/ysfseoLKhuV/nuKzva2g88tWH2LTnCN62
      Vp75wy9ZuWYnqtfN7gPdf98XS3ddaLBz186LPk/MovCZuSN54IEHALh3xe18+bE/cuPcqTSd
      r2XDxi04UzK56YYlKJJARXkpwwrGUFtxknZdZsLoIgA0v5sn//ISv/3zH0lyKFHnP3OqhNKy
      0yj2ROYvnI9DkWhqqMGn6hzavx9VcLBs+Q3YZYkRxWNRRRctTQ3s3buPc+1O0m0qw0YUMmJY
      VsxzdVBxdAcH6u088eNvIgC33357eN/ZshJ27NlPTn4R1y+YgwicLS8lt2AMNknA39ZCbbOH
      ghHDqCgvJTUjm13bt+HXRZYvX05DTQV79+1HSy6mIdPJ2AnTSEm0A6DrGkcO7Keqtp6M3Hxm
      z5yCADHPYw/Je67iFMdOlKFobTEf1O5N61l6539xcJ3ZykuxS5SXHGdY0TicimnHT588Tl7R
      eGySwaG9e6iqb2REfh45w/LJzkjt8RVYND2XXcfPMn/iSADWvLmOu+64NXyE6vewbt162oMG
      S2+4ifRkl/mMg352bN+ON6hT39gCQEJ6FnOnS5d8H7rS1FCDKto5dfwQNfXNLFp6A9npKQCc
      r6tm/6EjpKbnct3MKYgC7N+5jZLT55gyczaTxprv4qlTpSjo7Dt0jHGTp5OdYmf7jt2kDytk
      4Zzp5nVivNuRdH1fgm0tbNu2g9TUFA4d2MfIorHkxLjHqr+dyvpmAi0NHD1xignTZzFhdCEA
      rU0N7Nl3EMnmxBvQutw/g6NHjjNp8sTQmQxKTpxg3PgJTJk1l6xke4/PQPW3U1nXxKiRIwAo
      Lylh5NhxyELs314kQb+HzVu2ohkik6fNYFhWenhf5LPt7bn09uwjmThtDg888JGobV3lswsq
      u3fvYf++feyeUkxCSgYTxxb1+T0imRRxnZlrVvPyaxv57H130XKhno2bNiPaE7nhphtJsEfr
      qcjvC7Hft93bNlN+ro7Z8xZRNHJY+FjN08B5LZsfftrUo3e89y50XcdbdwpBEDhxeD/HSsqY
      OGM244sLAHqUp+u75+5BF9544/V9PpuWC/Xs2XcA0eYkLz+v7zEASRQBDU9zHV/92tfJHlFI
      27kSfvDz3wKw6u9/YOVzz/CTn/+OxubOGqhlR/Yxef6N3ZS/7mvkHy+8gs2ZQMPZY3zjsZ8C
      cHjnBh7+5g+QnMm4607xlUd+CMCh7e+w7eAx/F4P9XXnaTrfQGVlJe42b4/n6mDb1m3cdddd
      3V680gNb+O4vfsuIkYWc2L2On/767wCs/PsfaPCYLavmyhO88PK68Hd85Ls/RpMcNJw5yh/+
      vorW5iZam93UVp+jsvIcAbWz611yeDdb9x8lOSWF9S/+nadXrenxPAC733mV7/3k18h2B9VV
      VTGfw5r1W7jxhutZsnAm72w2Lf+Bnet5c+MeAAw9wA9+/CtEQeDX3/8WL63fSWKCixf/+RQ7
      Dp/o9Rkvv+U23nrDlNFQvZyo8zMhP7PjifHY179Em2EnJ9nOw1/6KkHdwND8fOWzn6TkbAOy
      oFNXfwEA34Vz/PX5ly7pPsTi8M4NfPYLX+ZsXQtJToHHvvtjACqO7+XLX/suhihzdM87VDb6
      WP30E6zesJdRhSP565M/Y+22gwB87xtf5vlX1pGdncn3Hvkyv/zD30nJyOS5P/+So2ebeny3
      O4j1vuhqgKraBtzuZiorz9Hibo8pv7+xik9/+tOs2bqfnNxsfvitR2gL6lyoLuPzX/gKbT4N
      T/N53N5gl/sn8M8/P0HlBbOHWX/mKH/+l1nofeXffk+DR+3xGfgbq8LPAOAfv3sSr9bzby+S
      73/r6zS0+hCNIKtXvxS1L/LZ9vRcOujp2fdGLPkMQ+VcZRWetlYqKyu5cKGpX9+jJyRRwkDD
      11LPFx/+KvbkDAR/M1/44jdRu/iHI79vrPft+T8/zjv7Shk3ehT/++g3KKtu7LyOMx39wlGe
      eeEV2jx+AETRVLfb336Nt7cfICc3i+8+8g3aVaNHeWK9e7F0IcDvfvdkr8+m9vRxPvfQw3gC
      Bj53Iz/8yU9j9wCaz1fz/PPPEwz62PD2Wj74ya+wbd0b3AlmDawAACAASURBVP7BT7Fw7iyY
      O4stn/oM/lBv89CpZn71618Q2WhqbneTnJze7dyiI51vPPwQZ86cITM9jbd2/C6870P3fYxl
      S+YCizn2pU9R7+1UqtnDC7h+0WxKmxNZcefS8PaeztUhQ1EMGVY/v4pvfPu7FOcks2D+HD73
      wKfx6x+NdSvCfPM732d4okz75BH89J9rmTj1A4wfP4qlt97JhLykqGMnTJvHqDGTOVNRya23
      Ledva4/Aiptjngfg2ZWv8JOf/ZpUl0L7uGHh7R2onkZqvXby050k33Ajjz7xPO9bNoubb7mD
      b/7sr9y9bA4luzczcd5S9LYqjl5Q+O3jnwfAaK2i5w6vSe7oabSU/5mAblC6axPTFyxGwFRo
      TWeOYmRP4Z47lgNw6vAe9h49h7PlCKPmvZcHPvJ+APZvfrPbeS/2PvTERz/537x3yVwA1qxf
      D8Dzzz7LN3/wA8bnZcBNNwI6P95ymCf+8EdkAaaNL+Srj/2G5QumkV04moe/9FkA1q18gS9/
      8+skSlB1eCdtrT627X4r5rttDzWPYr0v4mc+yh03LqJJOMmKFSt6lX/+Tbfx+U/dD8CudS/T
      4tN46/lnefDh77Bo2igA1m9a3+1z77llGW+sWccn730va19/nTvujL7Ooe3r+3wGkfT22+ug
      2eNh9JgxzJg0jpt6KVwPsZ9LB709+w52bF7DY/XmWMnoaXP5yN23dZNPVBK4+323s7W0Oeo+
      9/U9Ijl54iDPv+DA3Xye9Ru386Nf/JIt617ktg98gltuMlvNNeUn2Hv0HJMzYp8j1vv2010n
      eeL3v0UEPvuJe3lzzSY+e9/7zA+INn715O9Ytep5PvOJ+yiaMosvffELyMD8ZXfwuU92vA+v
      0OxVOb7u9ZjybIjx7qV85qMxdWFfz+bFlf/iC4/8iNkT8gBYv3F9bAMg///27jwwivJ+/Ph7
      9szmvsnBlUCI3JegiKCAF4qCVutVW+tPrPWgqF/vC2/bb1ur1rYeta3WrydSBRRE8OAQKuGM
      XDkJ5L43u5vsOb8/giEhx24Cu9kkn9df7DLPzOeZmTyfnZlnnsdgZMjgwSgaLRddvIjY6Ag+
      ev1rvtzwPrs3rwEU3AZTy33jO5beyglXzKTEJVCyZUe7dVcV5/DAo79lxqzZREeF09jqXmbr
      6YnjEmOwHftV1Jmu1tUSQ8kRGJvc5vu6OhfJCZHHPmlICDe2JLPOdGfq5P9uWMU/V6xn5owz
      MLitqK0ePHW0Hl2oiehQfbvvW9b39QbKywq59957AZUfdv1AfZObqEHDCXdXUtZg57PPv2TB
      LffjsJYzaPAgn2NtpmHmtFFs3nGInV9+y09+/RCHt30KQF1NPYd2b+PxxysBsFrMTNSp1NfV
      MWJE+indD53paNny8kaGJLX6a/XYMRhi0B07D0OiEzA4f7yd1rb8iaurq6nv9NyGnp0v3uJv
      3n9Duiw3fc4F/OPux1l8zXy27CnixV+P7GAdXR+D1rz9vQA89MCDvPfBR7z2Yi7jZ57PHTf+
      tNP1dXUMuzr2P5o64xyW3HwtADqd3qf4fK1Ha2ERkQxOTUWfPpLrfn4zIQYd22rqSZp8vF1I
      ik/AZm2AuI5vJXV0vpUfLuTJxx9HBZxOOxPPmNemTGhkDD+78RZ+duNiVr79Km++8yG3XHJ6
      h/utrpN4enrudbQNm9VC6gltQ4cJIDwyjjNnzGjzXUpqCuMNQ7n9F5cDYLFYMLXsq/YbSx09
      maPPvkB+yVWkpzTfTnA6nezY/A2Lfn4rC849HbfLwedfft1SRjl2s8bZWM+eA1XcGm2kqM1a
      FRx2R8unrtYFMHPuPJY+9icunD2FUKMO1ePG7YEhQyPJ2pvPrInpuOwWCuschJ5w3JvsXSef
      juL50Zdr1/Locy+QHK6jrvQQW3JXdrkWe4OZSnMTCZEhuN3tT+Z1X33LC6/8nWEJYQCseOvP
      bNi0g8vPm8Yl55/L2tWrKTCrjEqJxuPQkrPrv1TW/pz4KBO5efnET0wDVBwOFwZDx4nm/Avm
      87vXV2Bv1DIsIYwf+z4kpKYQnziMx594Ag3gdtmxuzQcqo5iW3YOC479yugo7u7uh+7IzExg
      a9Z+5k0fDYCqCcHtqKDG6iA2zEBJbjZKTKpP6+r63O78fGk8ifgjo6PYvz+H5GmjQfXg7qCB
      1BojGJds4rPVq0ibMrMlubVeh7djACr2Y+eyt78XgMiEVH5zz/2Ah3t+eQsNN/yUiM5vr3fK
      l2Ov1xkJDQ1t+dx5fN37uz9RSmoaM05oz4YMH8p3u3cye2pzUt2ZvZ+r5lwLVHa4jvbnm5Gk
      lCSW3v8w0aEGABosx5/fOW11VNlUkuNjAIWxY8ewd1NOpzF2Fk/nbVXHbU9Xhqals/LTz/nV
      9ZdSWVpEncXRcQJQOrj0O/P8Bay6/14eemwPJo2LapueP/zuseblO1qHxsCyhx/giQeXMiRt
      FPVVpZw9/2fMmDydB5/4E3m7x1NUdISGpuMN7btvvsb+77/h0L5srr5lKUaN0mb9Y8ZM4qVX
      76f68G4mTjuXMV2sCyB+cCY3Xz6HW265mdMyRlKQn8c9j/6ea268hfseWMb2SZPI+WE3V9z0
      K3QKnDZmDE89+BCDE0MpLz5K2sTjGV1p9Q+N0nxvYNaMs/nt0w8yduQQfvKLO8lIbX4IeMbM
      GTx5//2kDY6mtr4OjSm1y/XceMO1LL39Vk6fPI6CQ4eIzZjYsryrqZbiRkNL4w9w7tzzeOKV
      FVx+3jTOnHshf7h8IVfe+jgAGkME9935S556/CGMRiOhBpV4AI+NC2dezMqt3xDe+g9ao0FR
      IColA1tRFqcv/HVLfAoQPiid2RPiuO2OuxgxdBAFhYe595HfMnHGPP7v/SU89uRhFIeVXTsO
      cN0Jdezufmj9n0qr71qfXz9+f/WNt3LfA4+yeV061SWHWfrECyy++Rfcc+edTJk0hu07dvPw
      U23vS7eUP7ZCRdP8787O7R93U2fnCxoNSieP0Vr/DSlt/wONorDopzdw9/88xI6p0ygvPkp5
      vaPD5RdcNp8b73iE199dceIu6vQYhMQkkb99E3/4o4OSogLyDleiKHT599K8TTfPPng3+oRh
      GFU7Smo6YSc0/kpn/z7hGHZ17H8sfOK+6yw+bWgCEdYCnnjmOVKHZnDRmd7q0fV2AKbPuZhP
      77+XJ58pwFlfSsiw0zltaAzW0soO69jR+XbT/7uWO399K5MmjKX4cB4XXrmYC2dPBkB1OXji
      gQcIiYonLiKEwyXlPPLkc6BWtYtRUZRO40ns5Nw7sS284JxpJ1a73bFZdPWN/OkPv+OeezcS
      HZeIRgOK2p1rccBqaUBVtISHhXpfGFBVD2azmRBTGMZjvz6bbFbqLDYSExI41sbz7ap3qQsf
      zjmTRhMaEYFe2/HPDpfTQX2DlZiYaDSK0uG6TuR2OWmwWImIiESrbd4ZHreLkpISouMSCQ8N
      aVm2pqoSrTGUqIiwjld2gkabFYfLQ1Rk2+cA9bU1uBUdsdGRnZQ8YT3WBuotTQxKTMDLrdd2
      bFYLhpBQdMfqZmu0EWpqPj5v/H4Zo8/7BTMnpXVvpSdwNDViszuJiow8Hp/qoby8jPDIWMJa
      7cPWursfukVVMZvrMYWGo9c3/5axN9kor6gmOSUFva57P127Orc7O19OhtvloLyiioTEQZ3H
      qnqOnbsRnf5/R8fA5WiisrqOxEGJxzpyNPPl76WuphqnqiEhLqanVQN6duw7i09VPdTW1BIR
      FYVep/OpHt6pVJSVoTGEEt+qB1Pni7c/39wuJ+YGCxGRUS1/fyfWx+lWCY8I7/CHsi/xdHbu
      ndgWetPYaCPEFIoCWGtKuH/Zy91PAP7y7ap3qQ9P49Jzz+ztUPo4D88+eD/VDg+OJiuxQ8bw
      6P1L2t0+EEIMLLs3refNDz5Fp9VQZ2vi13feFTwJQAghRGDJWEBCCDFASQIQQogBShKAEEIM
      UO26gaoeF5988A7rvv0eg14hfvBI7r17CQatwn+/Xs0/PvgcDW7m//SXLDh3OgAuZxP/+fBd
      Dpa6ePiexS3r+sfLv2X7geae/Kqq8sBTf2BonMlrUKs/fodP120mRKeQODSDu5feiUmvpaTw
      EH/52xs0ujw02pq48dbbmD5hjNf1CSGEaK9dAqjK20+5PYw/vfQSep3CP1/5LWu+zeLCqYP5
      099X8JfX/kIojdx2y685ffI/SIrwcMcvFzPzkospPdz2ta2sQ0d5+ZVXunWZsWfjWtZuzePl
      l/+MQafh03de44W/vsVDS37JV2vX8/NblzJqeAr1VaX85uFnmf7qyye7D4QQYkBq1zYnZIzn
      V7+4Er1OAyhoFA0arYZd329j9vzLiDYZMJiiWDT/XL77ficoBv70xpvccPVl6Fp1KFLdFlTV
      1O17TKtWr+b2pUsw6JpLXnbdTeTt2IRLhet/9WtGDU8BQKfVoPS8A7AQQgx4nbbPbqed1158
      nt1HHFx49mTMNdWkph4fRyJxcArVNfWgaAkJMbQrb6+voqT8CPf8zz0s+c1dfPqF9wknAIqq
      XKQntxpWV9GRGqGhrun4wHC5+3Zyx5J7ufXW23xapxBCiPY6HAqipvwIDz74MDMvvpr//c0l
      aACtXofH02owL4+KVtdhcQBCYoez4sN3AbDUVfH04w8RlZDMOZNHAfDp+2/y7ff7iE4exiP3
      3NlSTqt6OHFUFJdbg+7YaHMr3nmdzzbt5Yn/fYGhSZ0M3SeEEMKrdi24x9XEQw88xK/+50mm
      jD0+fMCgpCS278iDOc2DKuUeOEDKxPk+bSQ8Op6LL5zLkaOlcCwBLLjqRi65Um037tDo9Biy
      fjjMWeOaJ0lw280UN2mIMmjY8sXHbPqhir++8iI6uf0jhBAnpd0toAM7NmMcNAqty9wyXVtJ
      RTWjTz+bfZs+Z+f+Agr272T1t9nMOn0MTTYLubm55OblY2lsIDc3l7KKKrZ+tYq//fMdjpSW
      U5Czj3/930qmThx9fMMaDVqttmWShB9dfvV1vPK7pziQV0RtZRnPLHuc+VdcjQJ88MFyLllw
      Pj/s3cPu3bvZtXdf0M/xK4QQwardUBBFefv4/MuNbRaacuYcpk0cRfmRXP757w9wo+Wq628k
      Y+ggqosL+WjV2jbLZ06YwjlnTObrdWvYvnsfilbHefMvY9KYtuOZdybvwB4+WrESm8NDwaGD
      3PHAY0wfP4oVH7xNRW2rOXj1kSy+6Vp5mUEIIXog6McCqq04yqtvvs+ddy0lzNiDgcmFEEJ0
      KOgTgBBCCP+QuydCCDFASQIQQogBShKAEEIMUJIAhBBigJIEIIQQA5QkACGEGKAkAQghxAAl
      CUCIIKWqKr68puPxyKs8omckAYh+4UD2TlauXMmW/+7wOj6Uy9HIpys+4sOPV+LqYuHK4kK2
      fL8HS30d1kZ7xwupLrZt29njuLvyp+eWsXvXDr74emvLd999/QUV5raxrP3wTVZ/k+WXGET/
      1vl4zkL0IV+t+5S4zHP45tN3aHDrGBEDhcW1nHPubIpyDhAaEYpHF0HqoFheen4ZsWNmMzw2
      DHuTjW3bt6MLjWT61Ens/+EHGupriEtJJz5EQaPVseLtv1JlSOHqRZdiqTxCcUUtk04/g5gI
      E6hNvPvvTzgtYzBFpZVUVZQzfcbZ6Dw2vtuWxfCRY4gM8fDfHXuYNPUMTBoXBUUl1NSZGZaa
      SHGVmVkzppF3YE9LvHqtQmnubuyR6SSHuPho1SZ0nkbOnDkLNApGg5b92Xuor6sjfvAILrrq
      59x198PMP2eq/KIT3SLni+g3Bg1KIio6kurDB3j59fewVuTwrw9W886rL/HcH/9MndkCqORX
      1HPjlZdw7txzsVWXU2tpYs27b/D9D0d56eXfU2dt4snHHsNcU8aO7DwarXacjiacLjcFhXlY
      qo/ywl//1WbbB7O38frbH3Fwz1ZWfrWV5558jAa7h5raKp589FEMBj0PP/YkB7K38dZHq/nv
      hk/5YOUGVv7f39i1Z2+beAF2b9/GWWedDUBFeSW1JYd44bW32ZW1BYvTxe+WPUaNxcoff/8i
      ikZPZqqJI7WdXKUI0QlJAKLf2LjhC5JPO4spIwZhbqinuNpGVIQB0PDoU88yNmMooKBxe7A5
      m6cdKi7MYfPmbVgdDmyWBgwR8Vx4/vmMTo3G6lRBVTht7ChGj5/E0IRQ1nz5DcXllTRYre22
      P/2s2UyZPB6X0029Ey696DymjEsDYypz58wjRa/DrsKU6WcxYVQaM2aeS3r6UIoKik6IF5wO
      J0ajCYDMMeNZePkizDW1LdtKSEnj4osuIFzjBMAQEoLD4fLvDhb9jiQA0W9cdcP/4/IF55M+
      ZjwGjRNbYxNGvRGNxojJqG9Z7prLL+Y3t9/G3XfdR7W5HofLgdnSiKJoaKop5qknl1GpxBJt
      UECB5MHD+eSdf/DdzmzqaizU19WhbT0hkULz3NkaBVDQaBTOOG0Y9z30KB+u3khiVCNPP/MU
      jph4QjXHllMUFI0GBYW0E+IFGJI2nEM5+1E0WnZv38jd9z3O7Nmzjm2u+dYUgKI0/wkXHq0i
      Jc4UkP0s+g8ZDVT0Sx6PG5fbg0Gv7/D/3W4Xqqqg02mx2WyYQkNRgCX33ssfnn0Gnd5A6znn
      nE4nGq0Wt8uBotGj13kfmtzpdKLV6dAAFouFsIgIOpvH7sR4Pa5G7nvgcZ55/nkMGnB5POg7
      mYL1yIEs3l2zh/uW/tJrTEK0JglAiFbKykpJSkru7TAAKC7IQROeQHJCdJfL/bA7i+GnTSTM
      KH06RPe0SwBms7m3YmnhdrvRamXyFyGE8Be32x2cVwBms5nIyMjeDkMIIfqt4uJieQgshBAD
      lSQAIYQYoCQBCCHEACUJQAghBihJAEIIMUBJAhBCiAFK3hwRog9Q3U5ch9agWirQpZ+LJm5E
      b4ck+gFJAEIEO1WlceUS3AUbAbB/92dMP3kDXerUXg5MBDO1sRbngc8A0J92MYoppt0ykgCE
      CHLu6pyWxr/5CyfOHW+f8gSguppo+vIJXDlfoIQlEjL3EXTDZ57SbYjAUBtrsb5zFWpDGQCO
      rH8Qdv2H7ZKAPAMQQgDg2PY6rv0rwWVHrT9C46q7UJt6f2gY0X3OA5+1NP4AakNZy9VAa5IA
      hAhy2rgMtGmzWn2hRz/lhlO+HXfZ3rZfOG14avJP+XZE8PD7LSBHk5UDuYVMGDcWt93Clv82
      z586ZsJk9G4bGzdvY/zUMxmakuDvUITomxQF06UvtTwE1qafi9YPD4G1SeNxF205/oU+FE1s
      +infjvA//WkX48j6R8tVgBKRhP60i9st5+cE4OGLz9dRY21kwrixVBwtRBeewIRRQzCGhPDR
      +59w2RU/YfmHH3P9DdfJ5YgQnVC0evSjL/XrNgxnLMbTUNLmGYASIoMy9kWKKYaw6z/s7YfA
      GhZcvoj/rFgBQIPVSklhBTWlhcyZN4+wyEhCQ0IYHh9Joxv0bgcALpcLu13mNxUisBQ0c5Zh
      mLMMADfglr/DvksTCmOuBMABcMKxVFU1sL2ARk04g1EToKLwB7bs3IfqaZ6X1eZwo1XAYGie
      D1Wn02E0GgMZmhBCDCiKovg3AXicNtas+5q8vHzWfb2JwTEh5BdXYa4u44x5CzhcU8Dna9di
      dkKI3P8RQoiACviEME6HA0WrRXdsxi+r1UpoaBhKq8lSZUIY0Zd4qvNw5X+NEp6IbtRFKNqO
      5yEWIpgUFxcH/kUw/bHbPD8KCwsLdAhCnDLu4ixsy28GtxMA7cHPCF34F9r8ohEiSMmNFyFO
      gmPH2y2NP4C7YCPu6pxejEgI30kCEEKIAUoSgBAnQT/lBmh1z1+bNhttXEYvRiSE7wL+ENgX
      8hBY9CXu6nzc+V/JQ2DRp/TKQ2Ah+httXDraOBkyQfQ9cgtICCEGKJ+vAFRV5f3338fpdJKc
      nMy8efNQpKub6AFX4WaaNjyNaq1Al3EBIec9jqILOaVlZGx7Ibzz+QogNzeXmJgYjEYjVVVV
      1NbW+jMu0U+pTebmcebrj4DLjmv/ShzbXj/lZXoytr3qaqJxzYM0vDwVy5vzcRVu7nb9hOhL
      fE4AQ4cOZc+ePXz11Vfk5OQQHR3tz7hEP+WpyQenrc137cahPwVlejK2vUyIIgYan28BGY1G
      rrjiCiwWC9pjwzgI0d3JyjWx6aAPbdOga5PGn/IyPRnbvrOkoU2Z1GU5Ifoqn68AioqKeOut
      tzhy5AiFhYUEYe9REWjHJitvWvMg9k0vYH3nSlzFWV0WUUIiMS14ASVqCOiM6EZfiuGMxae8
      jOGMxehGXwo6I0rUkObyXsa2b5dUZEIU0c/5fAWQlJSE0WhsGbJZiJ5OVq4bPpPwmz7v1ra6
      W0bRhWC66Dm46Dmfy8iEKGKg8TkBVFdXo9frSUxMBJAeQAJFZwIUoNXVoCG0t8I5aT1JGkL0
      ZT7fAgoPD6e0tJR169axbt063G63P+MSfYAmegiGs26nOQmAEjUE44w7ejcoIYTPujUURElJ
      CXv37mXy5MktVwL+IENB9C0ecymqtRJN4mgZBkGIPqK4uNj3K4Dq6mr++c9/kpiYyKuvvorV
      avVnbKIP0UQmo02eII2/EH2MzwmgqamJmJgYRo4cSXh4OA6Hw59xCSGE8DOfE0BqaipTpkzh
      X//6F3PmzCEmJsafcYleorqduEv34DGX9nYoQgg/8zkBlJeXU1VVxR133MHBgwflFlA/5DGX
      YP3XZdjeuw7r3y/Avu1vvR2SEMKPfE4ABoOBPXv2cODAAQ4ePChvA/cFqoq76hDuqkPgw7N+
      x7a/NY+301wYx5ZX5EpAiH7M5/cAYmJiuO6668jKymLx4sWEhHQ9eqPoXarbSePKJS0vamnT
      ZmG69KUuH9R6LBUnrgXVWgmRyX6MVAjRW3y+Aqirq+O1114jNzeXt99+G6fT6b2Q6DWuQ2va
      vKXrLtiI69CaLsvoMy5o81mJGoImcbRf4hNC9D6frwBcLheTJ0/myiuv9Gc84hRp/2se1A6+
      a00/9nIAnDlfoAlPxHDGrdK1U4h+rFujge7atYuCggIAli5dil4vjUOguIuzcOx4G2ieiNzb
      eDv69HNxfPdncB+7UtPq0abP6XojioJ+3BXox11xCiIWQgQ7n94EdrlcmM1tx0WPiYnx23hA
      8iZwW57qPKzvXNmmMQ+9frnXeWhdxVk4u5E0hBADh8+TwldVVbF8+fI2391yyy1yBXAS1CYz
      npp8NLHpXkecdOV/fbzxB3A7ced/5TUB6FKnSqMvhOiUTwkgKSmJ22+/3d+xDBiuws00rrqr
      eYITfSimBS90OV+tEt5+3KWOvhNCiO7wuRcQgNvtxmazYbPZZEKYk9C04enjs1s5bc2fu6Ab
      dRHatFktn7Vps9GNusifIQohBgCfHwJbLBaefvrplsb/j3/8o9wC6iHVWtHl5xMpWj2hC/+C
      uzoHAG1cBsh8DEKIk+RzAqirq+Pss8/GbDaj0Wior68nPj7en7H1W7qMC5onH2/1uSPrswrY
      sKOgg/852ubTM4vnnsrwhBADhM8JIDU1lcbGRmpqavjhhx+IjY31eSP19fVERUUBUFpchKIP
      IykxDo/LSW5eHkOGj8Bk7JtXE6qrCce213GX7UWbNB7DGYtRdF2/JR1y3uM4IlLalOlIRZ2V
      7IKurw6EEKKnfE4ANTU1FBYWcv7551NVVYXZbCY6OtpLKQ8r3nuP0gYHty2+kaKDu9iZW43H
      Wsbpcxaw49s1DM8YwwcfreAX1//0JKty8nrSmDd9+UTLr3l30RY8DSXN0wp2QdGFYJx55ymL
      WwghesKnBKCqKq+88golJSXs2rULh8PBhRde6ENJDYuuvpZP/vMfAPYdPMJFCxbgqTvKxv0F
      aPQmJk4YT3VRATYP6I91dXS5XNjt9h5Xqqfc65fhPriq+d9FW3Cbi9HOfaLLMq5DX7T7bJ+z
      7NTE43L5tFxv7CshRN+mqqpvCUBRFO69914qKioYNmxYtzbS+mUxDwoaRQGNBlB/nEoWDQqo
      tDxU1ul0GI3Gbm3nVGjIW9fmszt3HaHzn++yjDM8sdUIms3dM09V7FqdbxdovbGvhBB9m6Io
      viWAvXv3YrfbWb9+fct3d999t9deQKrbSX5BEbW1tRQUFjEqLZ4NG7/HU3uY06bPZefRfeQV
      FFBU28A5QTC6tBJ2QmMe5r2vfcjcR9r06Q+Z+4g/QxRCiFPGpwQwfvx4AEJDQzl48CDTp0/3
      uQuoy+1i5tln41ZVRo4/E+XQfhh2JmnJsaQuXMQP+w6ycNEigqFTY08ac93wmYTf/KXPb/UK
      IUSw8PkhcGlpKZ988gmLFi3i1Vdf5ZFHHsFgMHRZRtHqyczMbPPdiFHHhxc2hIQxecqUbobs
      Pz1tzJWQSLQpk/wcnRBCnFo+vwkcGhpKaGgoTU1NREREkJWVhcVi8WdsJ6+bM2LB8cZcfskL
      Ifq7bg0HPXbsWKqrq5k8eTJWqzWoJ4XpyYxYQggxkPicAPR6Pfv376empgaAhx56KKiHguhs
      Riz96Et7MSohhAgePieA4uJi0tLSSE5unh/WbrcHNAF0d0KUnsyIJYQQA4nPzwAGDRqEyWTC
      breza9cuNJpuDSR6UjzVediW34wr90tcuV/SuPxm3NX5XZbRp58LrW/3+DIjlhBCDCA+XQFY
      LBaKi4uZN28eAFlZWZhMJr8G1lpPJkTRxI3A9JM32syI5W0CFSGEGEh8SgDZ2dm4XK6WLp27
      d+8mLS2tWwPCnYyeTogiM2IJIUTnfEoAmZmZPP/885hMJhobG8nJyfFhILhTRzfqIrQHP2vV
      o0cmRBFCiJPlUwKIiYnhvvvuY9OmTRiNRh599NGAPgOQCVGEEOLU87kXUFxcHAsXLvRnLF1T
      FLTxo3pv+yepvNZKRa3V63Lj02WuXyFEYPicAOrrAy/k2gAADUlJREFU6/n888+55ppr/BlP
      v7VhRwHvrc/2utwnz/bP/fvGqh0UlNZ1uUxacjQ3LwieoUGE6O98TgAGg4HvvvsOh8NBWFgY
      CxcuROfjcMVCFJTW+TC7mW/DdQghTo1uvQm8ZMkSPB4PGo0moM8AhBBCnHo+JwCn08ny5ctR
      VZVBgwYxdOhQSQJCCNGH+dyCl5SUMH78eNLS0nA6ndhsNn/GJYQQws98TgDp6elYLBb2799P
      bGwsUVFR/oxLCCGEn/l0C8jj8fDCCy9gNptZvHgxgwcP9ndcQggh/MynK4Dc3FxGjRrF/fff
      z6pVq/wdkxBCiADw6QqgqamJr776ivz8fLKysrDb7dx2221BPR+AEEKIrvmUAMaOHcsTTzwB
      wE033dRcUN4BEEKIPs2nVlyj0RAeHg6AImPwCCFEv+DTM4C33nqLnJwcli9fjsvlwuVyofo4
      yboQQojg5NMVwIIFC/j73/9OYWEhhw8fBmDJkiXyDEAIIfownxJAXFwc99xzD/v27ePgwYNM
      mzZNGn8hhOjjfH4RrLq6mjVr1jBx4kTeeecdGhoa/BmXEEIIP/M5AXg8HgwGA2FhYeh0Ojwe
      jz/jEkII4Wc+J4CkpCTmzZvHunXrWLRokQwFIYQQfVy3OvOPGzeOcePG+SsWIYQQAeTzFUB9
      fT1bt24FYNOmTfIMQAgh+jifrgBUVeXFF1+kpKSEjRs3UlVVxbRp0/wdmxBCCD/yKQEoisLd
      d99NYWGh3AISQoh+olszgv373/8mNjYWgLvuuqvb7wKoHheVlTWgqETHxqPDQ25eHkOGj8Bk
      lPcKhBAikHxOAB6Ph6lTp3LVVVf1eGM1R3P5ZmcBI4cmoQ8J49t1qxmeMYYPPlrBL67/aY/X
      G2jrswrYsKPA63LPLJ4bgGiEEKJnfE4ABoOB7OxsCgsLAVi6dGm3rwDKKirQa/UYQyOIjgxD
      ozcxccJ4qosKsHlA73YC4HK5sNvt3Vp3IJVW1ZNdUOF1udZ1cLtcPq37ZMsEK1/eG/F41D5R
      FyH6A1VVu5cALrjggpbPPZkQPnPimQwZ1cTBXd/xXaMbjg0sqkEBlZaEotPpMBqN3V5/oGh9
      HAq7dR0CVSZY+XK+aDRKn6iLEP2Boii+dwNtbf369T0aDTTv0AFKK6qw2x0YjEactgbyCgoo
      qm3ApO1JJEIIIXqqWwnA7XbjdrtxuVzU19d3e2MjM0/DY7eRnDGJ00cPZ8HCRZhra1m4aBEy
      y4AQQgSWz7eAFEVpuUVz9dVXExcX1+2NaXUGRo893o3UEBLG5ClTur0eIYQQJ8/nBKDRaNi0
      aRNut5uQkBBGjx7do+cAQgghgoPPLXhxcTHJyck88MADmEwmamtr/RmXEEIIP/M5AQwbNozQ
      0FCee+45hgwZ0qNbQEIIIYKHT7eAiouLOXz4MFdccQUAH3/8MS6XC52P3RSFEEIEH5+uAIqL
      i7HZbC2fy8vLsVgsfgtKCCGE//n0E37KlCk8/fTTZGdnY7fbCQ8PJzo62t+xAVCUe4BGJYzM
      EUMCsj0hhBgofEoAOp2OZcuWUVNTg16vJyIiwt9xtfhu+w5cHg2jhl9BVZ2NhLhoqquriYmK
      ZG92NkmDhxMfZaKh0UlVZRWDkxPIyc0nIXkwSQmxVFWUUlpRS0pKCpGhBrL3HWD4yExiIsMC
      VgchhAhG3erHGRsbG9DG39VUh8YYQ6QBGpwqaz/7HNXjYM3aDXz26ccYwqNZuXwFlpoS/veP
      L1FZZ6GqrJyQ0DA+Wf4fassP858136D3NPDFtzv5+MMPiYqN5eOPPw5YHYQQIlgFdUf+Pd9v
      o7q2kqraGrZtP0BsuJYd328jY9J0amuqKS7IJTomArcHZp1/ETOmjqeg4CB79+6lrt5CZXk5
      U6adTcbINFChxlxPXk4OkTHxvV01IYTodUGdAA4eqeGWm37OL2/+FRWF+zhrxum8u+Ibpowe
      RvqIdGobbLhVUBQw6JvvZtXU1mEKMeJwuhg6chTbN61lxSdrQFFJSxmEze5AVb2PTCmEEP1d
      UPfjvPa6a5v/oWi5/mfN/37+6QfQKTBzzkU4HA50Oj0ajcLcpOZFF/7kGmxNDubPn4/TWsPI
      UZl4GsoISU3h7Mlzcdjt6AyGXqqREEIEj6BOAB1p/e6BoaOGXNEQagoBQB8Wy8SxGTg9o0lK
      bH5xzSDDDQshBBCkCaCmpoaNGzf2dhid2rnrMOW5h70ut3r18QfmgSoTrHL37Ka8vOsRZEMa
      oli9uilAEQkxsA0dOjQ4E0BsbCyXXHJJb4fRKXNINget2V6Xa12HQJUJVltKTDR5mUVtZFoC
      l1wyL0ARCTGwFRcXB/dDYCGEEP4jCUAIIQaooLwFJERPrc8qoKLO2uUyidGhzJuaHqCIhAhe
      kgD6mYUPved1madvnsP49EEBiCbwNuwoINvLs4ZxaQmSAIRAEoAQQUuuZoS/SQIQA1p5rZUN
      Owq8Ljd3ynAGxYQHIKLj5GpG+JskADGgVdRaeW+9966249ISAp4AhPA36QUkhBADlCQAIYQY
      oOQWkOi2vfkVPPLGBq/L9efeRkL0B5IARNAK1l4wwfzgWIjukAQgglaw9oKRB8eiv+jVZwDm
      mgpWr1xJUUllb4YhhBADUq9eAXy2Zh2XXfETln/4MdffcJ08ke4Fcj9fiIGrF9tcD2GRkYSG
      hDA8PpJGd+9FIoQQA1EvXgEoqJ7muXltDjda5dSs1ZexcK6ZO5Zrzxt/UmWEEKKv69UEEKFT
      +XztWsxOCOngWkQaZiGE8J9efQYw5+JFWK1WQkPDejMMIYQYkNolgIaGhoAHYbG03WZjYyOK
      ojAsPsRrWZPO0ybmQJQxaT0+lWm9jUCV8WV5j9PeUsbjbApImfhwrdcy8eG6NnUJRJlA1b8n
      elL/nnhj1Q4KSmu7XCYtOYabF0w5qe0I/1ufVcCGHflel3tm8TzcbjeKqqpq6/8wm81+C85X
      qqqiKL4/FPixCsFYxuPxoNF071l7IMoEa1zBXCZY4wrmMsEal7QZzTG1SwDBwO12o9Vqu7U8
      EJRlHA4HBoPB5+UDVcbpdKLX67u1jUCVkX0m+8zf9Zc2o7mMdL0XQogBKigTQEfZsqDg+Ngr
      1dXVlJeXt1n+xDJms5mqqqqWzzk5OTgcji7LFBcXY7fbgeZLt3379rWLq7tlOsrKBQUFLZeG
      DoeD3Nxcn8r86MT696RMR7+wvNWlozLe6tKTMqei/t6Of0/KyD7r3X3Wnbp4KyNtRnMZ7bJl
      y5a1KxmE6uvr2bt3L1arlYqKCjIyMrq8r2YwGDh06BAVFRUUFBQQHh5OQkJCl9swmUxs3boV
      p9PJzp07ycjIwGQynfIyGo2GzZs3A7Bnzx4mTJjg9RKxu/XvSZlA1SUQ9e/J8Q/UOSP7rGf7
      7Pvvv/fr+T8Q24ygvALoSFRUFOnp6eTm5jJixAicTmeXy7vdboYNG4bZbCYiIoKYmBg8x148
      66rMuHHj2L17t087uKdlNBoNkyZNYvv27UycOLHdr6yOdLf+PSkTqLoEov49Pf6BOGdkn/Vs
      nwXi/B9obUZQPgTuSE5OTpuDkZKSQkRERKfLNzU1cfjw4TbfjRw5ssudXVNTQ2Xl8YHpjEYj
      w4cP7zKunpQpLi7GYrG0fI6OjmbQoK7H2elu/XtSJlB1CUT9e3L8A3XOyD47+X3mj/N/ILYZ
      feYKICMjg8zMTDIzM8nIyODo0aNdLq/VaikvL6exsZHMzEyMRqPXXwCqqlJeXk5YWBglJSU+
      9a/WaDTodDp0Oh2FhYU+ZXOn00lmZiZOp7PdfbnOGI1GRowYQUlJCeXl5T51Kzt48CBhYWEt
      +83bH4yiKJSVlaHRaKioqPCp/nq9nrKyMnJzc6msrCQyMtJrGUVRKC8vp6qqirKyMp96LwTi
      +Ov1esrLy9FqtVRXV1NVVeW1a12gjr/b7SYzM5O6ujqqq6tb7iF3pbvH/8f6A1RWVvpUf6PR
      SF1dHcXFxRQVFQHee7yEhIRQVlZGVVUVFRUVXn9lA6Smpnbr+EPzLZCqqipGjhzJiBEjvO7r
      QB1/s9nccjzKyspoamryWsZfx7/PJIDVq1ezdetWtm7dyrZt22hsbOxy+fz8fMaPH09MTAwH
      DhzAYrG0dMnqTE5ODrNmzWLbtm3Mnj0bm83mNa6Kigry8/MJCwtDq9V6vZcHtJyIZrOZ2bNn
      k5eX1+XyLpeLiooKDh8+zNixY5k1a1a7B0cdSUhIwOFw8O2337Z5INSZnJwcZs+ezZEjR5g1
      a5ZPCeDAgQOcc845xMfHM2PGDLZv3+61TF5eHrNnz2bmzJnMnj2b7GzvY+sH4vjn5+czduxY
      qqurSUlJITExkZqami7LBOL4A5SWlqKqKh6Ph7POOovS0lKvZbp7/AsKChg3bhyVlZVMmzaN
      hIQEqquruyyTm5vLkCFDmDNnDlFRUdhsNurr67sss2vXLmbOnMnMmTOZNWuWT435xo0bu3X8
      PR4PHo+HyZMns2XLFjwej9d3nAJ9/AsLCznnnHO8bgP8d/z/Pw+8LMz4dAelAAAAAElFTkSu
      QmCC
    </thumbnail>
    <thumbnail height='384' name='Gender and Race of Individuals in a Fatal Police Shooting. Larger Text Represents being Part of the mean of the top 25% Highest Median Incomes. Smaller text is the average of all remaining median incomes.' width='384'>
      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
    </thumbnail>
    <thumbnail height='216' name='Gender and Signs of Mental Illness of Fatal Police Shootings. Colors and Numbers represent the count of individuals in that per capita range. High being the top 25%, middle the middle 50% and low the bottom 25%.' width='384'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='ID Sets' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAgAElEQVR4nOzdd5Ac150n+O9LV9Xeo2EbJLwnHAmABB0MKRGESImi7GpXhpo73cbqYhQ7
      MeviVrczezt3uxO3GzNxmtVIMyNpKHJIUaToJJAgCIIOjgBhCaJhugF0A22A9t3p8/6o7urK
      zNfoAogCCOb3E4Eg83W+zF/m+738VWU5EQRBACIiShzlRgdAREQ3BgsAEVFCsQAQESUUCwAR
      UUKxABARJRQLABFRQrEAEBElFAsAEdE1cOzAHuzafyy77Nu9+Kuf/Qr+p/ijViwARETXgKEb
      KCoqAgA4toW+3m5sf3cnPsXXf2g3OgAios+CCyc+RKM7A9VqN/73P/0zNEybiN4+80aHdVl8
      BkBEdA0Evg/PC/DGi8/haz/4U/y3v/gxysuKbnRYl8UCQER0DbmeC103EAQBPtX3f8BbQERE
      14SiKFBVgTUPPIg/+fH/iden1MN1BcSNDuwyBL8NlIjo2rLMISiqDl3/dD/GZgEgIkoovgZA
      RJRQN1UB8DzvRodARPSZcVMVAN6tIiK6dq7LKxT93R3Y9uYOlNZOxb1rV0Edflncd23s3vU+
      Bi0PWqoId965BudOfoRTZ84DEJizeBmm1lVejxCJiBKn4M8AAt/DC8//DktW3QOtvwU7DzRm
      /2YOdOP0uYtYvHgxFsybAwXA7r37MGf+QixevAjVZcWFDo+IKLEK/gzAtQahlVZj+uQ6TCy/
      Gy/+YQ+wdDYAoL+7HZanoKu7B1OmToUCD329fejp6kJNbR2KUjpc183e+vF9H77vFzpkIqJE
      KHgB8H0PQsl8GEJVU9DF6Au55TVTsXIJ0NVxAa+/9jr+xRPfx33334/BoSFse/V5zFh2L+5Y
      PDO0PUW5qV62ICL61Cp4AdCNFAZ7++H4AbraziIors7+TdGLsGDhIigCuHS+CV19FqZNnwnD
      0DC5pgRv7W+Fctvs7Pq+70NV1UKHTESUCAUvAIqWxrLZE/GP//gkrP4ePPbN7+D86Y9wpHUQ
      M6oVbHt3P8rL0jC9IkwoCfDMU7+AUVyOzs6L2PSlrxY6PCKixLpunwS2zCEomgFdCz+C9z0P
      juvBMHQIIYAggG3bUHUdauR2j+u60LRP90eriYhuFjfVV0GwABARXTt8RZWIKKFYAIiIEooF
      gIgooVgAiIgSigWAiCihWACIiBKK76n8FHrv8FkcOtWWXf7nD96GopR+AyMiynj2zSO41DcE
      AKguL8bj9y3Az17eB2/4O7punVSFB26feblNZB1r7sRbB5qyyw+vmYMpdeXXPOZc/7TtCLr7
      M/HXVhTjsXsXFHR/n3YsAJ9CR5s68OrOE9nlr61bxAJAnwpvHzyD5rYeAMD0iRV4/L4F2LL7
      JGw38x1fqxdOzbsAnO3oCeX5moXTCl4AdhxoxrmOXgDAjMlViS8AvAVERJRQLABERAnFAkBE
      lFAsAERECcUCQESUUCwAREQJxQJARJRQLABERAnFAkBElFAsAERECcUCQESUUCwAREQJxQJA
      RJRQLABERAnFAkBElFAF/z0A3/ewa8c2nLs4gPs3bERtRUn2b03HD+PEmQsAgAVLV2BiZSne
      3r4Vnf0u1m/YiMrSdKHDIyJKrII/Azi27110uCVYd+dy/Oa5FxCM/CEIsH/PB5i3ZCmWLVuG
      qrIS7HtvG+yiibhr2Tw898Iro+sSEdE1V+BnAAHOnmvB6vWPoabMQK3uYsgHihUgCAJ09vaj
      p7MdSk0dqg0dre0Xcc+m9ahIKygL3oftA4rnZLfm+z784Z+e+yyLHqPtOLBt3q2jGy8IgtD/
      27aNIOehWuD7sG07r225w78iNrrs5t33aoXiv4JYP6sKfgvIdV2omgoAKNI0ZM+/ENiwcT0G
      hmy89fsXMGPl/fA8D6qqQEAgrWkIAKiqGtqeonz2L4RCiNCypqqx80B0Q+TkpoCAqqoQoT+L
      vHNVjcxlRVEKnue5U+tKYv2sKnABECgrLUVb20VUT6/B+V4TKSUYLgIBJk2dgVTKwOQKDW98
      1IYyQ8fFrl6U1BShvd+BLgBFjCaJ7/uJGLBoAbgeE4MoHyKykMnL0FU171wVyo3I86uL9bOq
      4M8AVqy6E7/+p+fwgaFhzvLV0AIXzzz7Ah754iY886t/RLqiChc7O/CFx/8ZSoJpeOa3TyOl
      AUtWr4Mqxt8+ERFdnYIXgJKqenzniSfguj5SqRQggK989XEAwLee+D4c24am68O3dsrx3e99
      D64fIJ0yCh0aEVGiFbwAAICm6dAkexJCwEilwuvq+vUJiugT+M+/ehunWrsAAHWVxfiL/2XD
      DY7oyvzZL3ag6UI3AKC+ugT/1/fX3+CIkmPr3lN46o3D2eV//627MWNy1VVv74n/58Xsa6ur
      5k/BH31hRd59ea0lugrd/SY6ewYBAJp6870xobt/KBu/oSf7Pvj1NmS72XMPAK73yd7Z2Nk9
      mH0fVu+gdUV9b77MJSKia4IFgIgooVgAiIgSigWAiCihWACIiBLqpn8X0JHT7XjrQHN2+dG7
      52FyTVlB9/nk64fQM2ACAOqrSvDYvQvy6nemrQcvv388u7x++a2Y21A7br/TF7rx3uGz2eUH
      bp+JWVOqrzDqT675Qjde2dmYXd64cgZmT625Ztvfvr8JR5s7ssvff3g5dC3+DpVfbjmA/qHM
      d7hMrinDo3fPu6r92Y6Hn72yL7v88Jo5aKivuKptfZq9vuckGlsuAci89foHj6y8wRFdH6/u
      bMy+1dXQVDzx8PLrHkN0zmxYMaPg++wZMPHk64eyyyvnTsakmlK89F782nPTF4Cz7b3Ysvtk
      dvnepbcUvAC8fbAZ5y/2AwBmT63OuwB09gyGYp0/vTavAtDeNRDqt2Rm/Q0pAO3d4fgX3jLh
      mhaAI03teG3Pqezydx9aBl2y3lsfNmffRrfglrqrLgCu54eOZ9X8KZ/JAnDgZBvePngGQOa7
      cJJSAPYdP489x1oBAEUp7YYUgI6e6JypK/g+hyw3tM+KkjR0TQm1zWvIXHt4C4iIKKFYAIiI
      EuqmugV0+HQ7/uLJ97LL/+sneCr76s5G/PIPB7LLf/79dTfktsqN8K/+x+/R0TUAAJgzrQY/
      /s59+MZ/ei7797tvm44v3j0PP/rrLdm2x+9fgIb6ytB2LMfF1378m+zyuhW34sHbZ+JP/2Zr
      tu0bGxejvqoU/+8z72fbfvTVNbhwqR+/zrlP+X//4Oq/SsFxPXzrz5/PLt+37BZpbvzRf30J
      vQOZT0ounlmPP3589VXvMx8Dpo3v/cWL2eUH7piJ7z607Jpt/60Pm/CTF/Zml//dt+7Gkpn1
      12z719LRpg78p394K7v8/c3y2zFPbT2E373zcXb5r//4IdRWFBc8vlwd3QP4V//999nlR+6e
      h6+vX3RdY7hebqoC4PkBhmw3u+x+gh+HcT0/tK3cH4r4rDNtN3vsluMhQPi8Oq4HP4ic6zE+
      rp5PP88Pn2vP8+G4kfP/CX/nJ3dbduSHRkaEj9uVrnMtBUH8/FxLrhc+177/6c1hPzp3vQCy
      n/ZwPgXzMjpu0R+u+SzhLSAiooRiASAiSigWACKihGIBICJKKBYAIqKEYgEgIkooFgAiooRi
      ASAiSigWACKihGIBICJKKBYAIqKEKvh3Afmei/d3vIGWiwNYt+FB1FaWhP4+2HMR73xwDBvv
      vxPmQA/ee383vAAoq52CNcsXFjo8IqLEKvgzgI/2vYtLfgU23n0Hnn3ueeR+tVPge9jy6is4
      +PHHCAKg41wjLKMGt99+OxbMnl7o0IiIEq3AzwACnGtpxar1j6GqzMAEw8OQDxQrmb81HtyN
      9KR5mKZnfq2o7Xw7XL8c7Z2XMH16AwDAcZzs1vzIN1J6rhv7lkrXcWDbdiySS30mrOFv+BNC
      wPPC3/DnjNWvdwiWk1lXUQTqq0pC31AYBAFs287+QhiQ+fWh0iIDHd2D2bbSIgOuG/4GStf1
      0NU7kP2KYgCoKS+CH/mW03g/F5d6+tE3OBpvbUWR9OcTL/YOwb5M/H7gw7GdUB/P90PnHQA8
      z4PrhtuicXmeD8eJH6Msftn59yJj6dg2unoHLht/4PuxcfO9eBuQ+ZbH0X5BbB3XdaX9uvtN
      DFmjxzCxphRBzhiN5EBb10D2GzlTuoqUER4Pb4y48mE7Hi72DmWXy0tS8LzweXVcBxe7+7M/
      lwkAdZXFsXyybRu+JIejuvpMmDlzZmK1PPeDnId1vu9jyDTR3jWa+yVFOhw3mk8ufF+E2lzX
      keZF28XebBwQAuXFRmzOGHo890PHHWSOe7zcGdlnOFYffQNDuJRz/itKUyhOyX6vLsyVzAcv
      Mh/GvPb0DcGyM+dj5Py3dw9m54muqaitKAr18X3JfPY8SRwums9fKvwtINd1oQ5fmNKalp2E
      9mAP3tx5CI9//et49ZWTGLIszF5yO8o6LqGz9TTeemcvnvj2V6GqowOrKOGEURQVahBuU1UV
      mhY/rJ+/+iF2f5T5ebiUruKbGxdH+mnSfn/z0n7sb7wAIHMR/9W/fxTA6D6FENA0DT/8q9ey
      bXcvacDX1y8KtX3l/gWY1xD++URVUfDu4XP425f3Z9v+yx+tgxDxYwr3U/HWgbP4h5zfM/hv
      /9tGzJxcFYv/J7/bhwMn2wAAFSUp/MO/fQQiEr8aKRyKENAi+1QUJR6HZJ1oP1XST1FVKJHv
      AlY1WZuGv37+fRw+nfmd4KqyNP7uT7+Qe/qz5z+XUOJtmT9cvt9YufOr1w9jx4Ez2eXf/tnj
      oTESAtA0Df/2b9/MFuWls+rxr7+6JnzciiKPKw+NLd34d3+7Lbv8R5uXI6XHx+PV3Sfxm+0f
      Zdv+5kcPxfJJ07RwDgy3Rf381QPY9VELgMycefo/PpY52Gw/MbytUYoQ6B9yQ7n/6Nq5WDF3
      UmjbiqJAicQlzQtVw9///kO8f+RcJnZVwXc+vxR/+/Lobzn/l++vw7zp8Z9WDR338BiJcXIA
      QHw+KAInW7vxH/9+9PcM/uUXb8eGFbfG+sa2FZszChQ1eozyvPufL+7HvuFrT0laxz/+hy/i
      z3/1TvbB5qwpVfivP9gYiVWRxK9AicQRQOCHf/VaoQuAQFlpKS5c6ET19Bq09ppIKUHmu8H7
      BjC1YSr27nofra0tOPDRcSybNwtz59YBc2bjZOMv4ARAKjchIgkjFAHhR9uUWBJlIomsF00+
      RYzRD5H1lGgYsX5CiFixEkJAiMh6SrxNEUosttiyIuLxC3n80QNQFCV8IUS8nxACQtYWjT8W
      Zya2fGKNt8nPa3yclPBYSo5bjHEuRGQh736SGMLB5nsO4/vMl/wc5pE7Y53DUPj55478HOYx
      HrHcURBpksavyPJHkmN5j9s4sY7EEd1OdCzHnG/RGPK4DihjXLPC1Upy/iV5N7K96D5l1yPg
      OrwIvGL1XXjqn57DB7qGeSvWQAtcPPub3+HRxx7DpoemAAAs18XqpYux/72tOHSqHVpgoW72
      EqT4HiUiooIpeAEoqZyA73zv+3A8DykjBQjg8a98ObTO5oceAgCsWLsRS1e78ANA12+qHysj
      IrrpXJerrKppUPO896lqGuIv5xAR0bXGmyxERAnFAkBElFAsAERECfWZfKXV9fzQh4pkHxKh
      zzbb9RAMfyhLCPGpyQHfD+C4ox920lQFqsrHYXRjfCYLwK+2HMAL73ycXf77f/PIDYyGboT/
      8LNt+PjMRQBAfVUJfvonm29wRBknW7vwr/+/0Q9JffehZXhk7dwbGBEl2WeyACRVW1c/evpH
      PyI/c0r8k8F0eRd7BkNfuXDLxMobGA1dD8fPXsz+f2mRAe0TPCPr6B5AV5+ZXY5+Vc2nDQvA
      Z8hv3zqGP+w+kV1+6v947AZGc3N6bc9JPL3tSHb5Jz/adAOjoevh3/zPrfCGbxfetWgavv35
      pVe9rVfeb8Tzbx/LLv/LL97+ieMrJN58JCJKKBYAIqKEYgEgIkooFgAiooRiASAiSigWACKi
      hGIBICJKKH4OIMfRpg6caevJLq/P4yffiD6p1/eeyn51yYSqEiy8pQ5v7m/K/v2WSdfnw2hv
      fHAKjpuJo66y+Lrs81o51tyJpgvd2eX7l99S8H2ebe/BkeGfKwWAO+ZPueptfdTcgeYLo9ee
      ddfp2sMCkOPtg2fw6s7G7PJdi6fdwGgoKX728r7sj57fMX8Kbp1UiZ/8bm/274/cNRerF04t
      eBw/f2U/BszMD4qvmDvpE30i9np79/AZvPju8ezy9ThfR5o6QuM0dUL5VW/r7YNn8Mr71//a
      c/OMMBERXVMsAERECcUCQESUUCwAREQJxQJARJRQLABERAl1XQpAEAQIguCar0tERFev4J8D
      sAa68dTTz8BxAyxfuxErFs4I/b3lxGE8tWUPfvSDb2OotwNPP/sCPC/AnRs2YdGswr+Xl4go
      qQr+DGDvu2/htrUP4Xvf+zb2vLMNXs6De8cawNa396KmqgQA8N5bb2Htg1/Ed7/zTbz31hvw
      +USAiKhgClwAAvT09aGhYRIULYUp5WmYwz+RGQQB3n1jC267az2KjUwYA5aFyfU10IwS1Bdr
      sAPAtm1YlgXLsuB5XmjrjuPAcZxQm23bcCPrWZYFzw+3ua4bWceG50XbLHh+7m96BjBNE0FO
      ZQr8TFsuz/NgWVaozXVd2LYdi9914/HLjjO0bDux+DP9wm2mZcLP+U3SIBiOP+cWm+/7sMxw
      rJ7nwZbE7zjx+GP9YsfoxsdIctyWbcFzo+Nmws89/wGk8ZuS+ENjNMZxm1Z43DJxSXInMh6m
      GY5rZPvIecDieb4kBzzYdrTNQW5Hae54ktxxJefVtuFF82LM+OM5nPt4y/f8cO6M9Atk/XLO
      qyR+Txa/48Bx4jkcn5fR+AP5nJeOmyx3RtsyuROZu75s7sry2oErjcONrTdeP1num6YFP/ea
      FUjOfxCP3/dleefCtuNxANfhFpCiKMOJpMJ1fYjh9t62Juw8fBrr6hrQ1noBR0+cgiJEdpI6
      bua/hmFkt6Wqamjbuq5DiPCPLhuGAS2yXiqVgqqE2zRNi6xjQFWjbSmoSm6NFEin0xCKGG1R
      Mm25VFVFKpWK7S/3WEbidzwRajMMQ3qcoWVDh6aFBzTTLxx/OpWGkvNxfiGG4xej+1QUBal0
      OFZVVWFI4tf1ePyxfrFj1GLrGboOTQu3pYwUVC06bmkouedfQBp/WhJ/aIzGOO50Kjxumbgk
      uRMZj3Q6HNfI9pEzlKqqSHJAhWFE23TkdpTmjirJHU2DrofH2zAMqJG8NsaMP57DuZmoqEo4
      d0b6CVm/nPMqiV+Vxa/rUCIPPw3DkMzLaPwink+GMca4yXJntC2TO5G5q8jmriyvdQhfcu2J
      xB+bu7oOTQ/f2pDlfjqdgpJ7zRKS8y/i8SuKLO80GEY8DqDgzwAEJk6ow8FDRzHQ3Y62IaBI
      8XHu3DmkKybgm1//CiZNmoiS8lLUVFWirqoMh4+dQE9nK7o9DSkx/h6IiOjqFPw1gMWr7oHb
      eRK/e2UrNj36MAR8NDU1Q00VY9q0aZg2dSqWLVuK+tpq3H73BnSdPohXt76Dhx95CIIFgIio
      YAp+C0jVUnhw85dCbWvX3hVaXn7bUgCAkirGpi8+XuiQiIgI/CAYEVFisQAQESUUCwARUUKx
      ABARJRQLABFRQrEAEBElFAsAEVFCsQAQESUUCwARUUKxABARJRQLABFRQrEAEBElFAsAEVFC
      sQAQESUUCwARUUKxABARJRQLABFRQrEAEBElFAsAEVFCsQAQESUUCwARUUKxABARJRQLABFR
      Ql2XAhAEAYIguB67IiKiPGmF3oHZ34VfP/UMXC/A8rUbsXLRTABA4Lt47slfYsDXYJkWNj32
      VRT73XjuxTdQXl6CivrpePDeVYUOj4gosQpeAPa+uwMr7n0YS2bW4ac/+yWWLZwJVQAQKh75
      2regaRpaPvoAB48dx+xSEwvXrMPqBQ2FDouIKPEKfAsoQG9/H6ZOmwihGphSnobpZ/4ihEBP
      RyteevEFPP/GLty+eAG6ewdw/OAuvPDCizjd0gYAsG0blmXBsix4nhfauuM4cBwn1GbbNtzI
      epZlwfPDba7rRtax4XnRNgue74eOxzRNBP7o7azAz7Tl8jwPlmXF9mfbdix+143HLzvO0LLt
      xOLP9Au3mZYJ3xuNPwiG48+5Hef7PiwzHKvnebAl8TtOPP5Yv9gxuvExkhy3ZVvw3Oi4mfBz
      z38AafymJP7QGI1x3KYVHrdMXJLciYyHaYbjGtk+cu5yep4vyQEPth1tc5DbUZo7niR3XMl5
      tW140bwYM/54DufepPU9P5w7I/0CWb+c8yqJ35PF7zhwnHgOx+dlNP5APuel4ybLndG2TO5E
      5q4vm7uyvHbgSuNwY+uN10+W+6Zpwc+9ZgWS8x/E4/d9Wd65sO14HMB1eAagKMpwIqlwXB8i
      52/lVXVYuXIFdDg43NiMu+9aj8Wuh8G+Ljz9zMt44gdPwDCM7Pqqqoa2res6hPBDbYZhQIus
      l0qloCrhNk3TIusYUNVoWwqqklsjBdLpNIQyehRCybTlUlUVqVQqtr/cYxmJ3/FEqM0wDOlx
      hpYNHZoWHtBMv3D86VQaijoavxDD8YvRfSqKglQ6HKuqqjAk8et6PP5Yv9gxarH1DF2HpoXb
      UkYKqhYdtzSU3PMvII0/LYk/NEZjHHc6FR63TFyS3ImMRzodjmtk+7nJraqKJAdUGEa0TUdu
      R2nuqJLc0TToeni8DcOAGslrY8z44zmcm4mKqoRzZ6SfkPXLOa+S+FVZ/LoOJfLw0zAMybyM
      xi/i+WQYY4ybLHdG2zK5E5m7imzuyvJah/Al155I/LG5q+vQ9PDrobLcT6dTUHKvWUJy/kU8
      fkWR5Z0Gw4jHART8GYDApPoJ+PDAYfR1XUCbCRQpPs6eOQvXHsC59i7U1k3E4gWz0Np6AU2N
      H2PIcjMnV1Egxt8BERFdpYI/A1h0xz3YtuVVvPyHj/Hwo5sh4OPsubOYOLEWJ47uw769DhTV
      wKaNGzF48Sy2bnkVfgA88PDD0FgBiIgKpuAFQNUMbNz0aKjtzjvvBAA88PnNofaKkln4csOs
      QodERETgB8GIiBKLBYCIKKFYAIiIEooFgIgooVgAiIgSigWAiCihWACIiBKKBYCIKKFYAIiI
      EooFgIgooVgAiIgSigWAiCihWACIiBKKBYCIKKFYAIiIEooFgIgooVgAiIgSigWAiCihWACI
      iBKKBYCIKKFYAIiIEooFgIgooVgAiIgS6roUgCAIEATBNV+XiIiunlboHZj9l/DkU8/C8wIs
      vXMD7lgyCwAQ+C6ee/KXGPA1mKaJTV/6Giq1ITz1zPPwA2DN/Q9hydyGQodHRJRYBS8Ae999
      Gyvv24wlM2rx05/9EisWz4IqAAgVj3ztW9B1HWeP7sWhj49DvXgK9236MmZMKMLPf/UsFs35
      NhRR6AiJiJKpwLeAAvT29WHq1HoI1cCU8iKYfuYvQgj0tLfgd88/h+ff2IU7lizAoGVhYl01
      VL0Y9cU67ACwbRuWZcGyLHieF9q64zhwHCfUZts23Mh6lmXB88NtrutG1rHhedE2C57vh47H
      NE0E/ugtqsDPtOXyPA+WZcX2Z9t2LH7XjccvO87Qsu3E4s/0C7eZlgnfG40/CIbjz7nF5vs+
      LDMcq+d5sCXxO048/li/2DG68TGSHLdlW/Dc6LiZ8HPPfwBp/KYk/tAYjXHcphUet0xcktyJ
      jIdphuMa2T5y7lx6ni/JAQ+2HW1zkNtRmjueJHdcyXm1bXjRvBgz/ngO59549T0/nDsj/QJZ
      v5zzKonfk8XvOHCceA7H52U0/kA+56XjJsud0bZM7kTmri+bu7K8duBK43Bj643XT5b7pmnB
      z71mBZLzH8Tj931Z3rmw7XgcwHV4BqCqynAiqXBcD7kP6Mtr6rFq9Sqk9ryPgx+fhiKU7AE6
      bmagDMPI2ZYa2rau6xDCD7UZhgEtsl4qlYKqhNs0TYusY0BVo20pqEpujRRIp9MQOU9LhJJp
      Cx+zilQqFdtf7rGMxO944ac4hmFIjzO0bOjQtPCAZvqF40+n0lDU0fiFGI5fjO5TURSk0uFY
      VVWFIYlf1+Pxx/rFjlGLrWfoOjQt3JYyUlC16LiloeSefwFp/GlJ/KExGuO406nwuGXikuRO
      ZDzS6XBcI9vPTW5VVSQ5oMIwom06cjtKc0eV5I6mQdfD420YBtRIXhtjxh/P4dxMVFQlnDsj
      /YSsX855lcSvyuLXdSiRh5+GYUjmZTR+Ec8nwxhj3GS5M9qWyZ3I3FVkc1eW1zqEL7n2ROKP
      zV1dh6aHX+OU5X46nYKSe80SkvMv4vEriizvNBhGPA6g4M8ABCZNrMf+Dw+i9+J5tJkCRYqP
      5uYzcK0BnDnfiarqOiycOwPnz7djQnUFDh75GJfazqDbTyHF2z9ERAVT8GcAC2+/G+2v/R6/
      f/0kNn/xYQj4aG1txeRJdTj98UEc3G9D0Qxs2rABJZqPrVv+gK0nXXzhkc9DsAAQERVM4W8B
      aQY2PPRIqG3NmtUAgI2f2xRb/3Obv1jokIiICPwgGBFRYl3RM4CWlha0tLSgs7MTbW1t2fZv
      fvObsRdJiIjo0+2KCkBpaSkmTZqE6upqTJkyJdsefZcBERF9+l1RAaioqEBFRQX27duH/fv3
      Z9vnz5/PIkBEdJO5qheB/+7v/g5PPPFE9qLPiz8R0c3nqgpAQ0MD6urqsh8mEHy/JhHRTeeq
      CsCECRPwi1/8Invh/9GPfhT79BkREX26XVEBGPnunW984xuh70LhO4CIiG4+V1QAmpqacOLE
      CTQ3N6OpqSnb/uMf/zj2nRRERPTpdkUFYPbs2Zg9ezaCIMh+650Qgi8CExHdhK6oAPT09OCn
      P/0p/viP/xg//OEPUVRUhP7+fvzkJz9hESAiuslc0VdBtLW1oaKiAkIIzJ8/H83wO5gAACAA
      SURBVH/5l3+J+fPno7Ozs1DxERFRgVxRAaiurkZjYyNM08QPf/hD9Pf3o7GxEWVlZYWKj4iI
      CuSKbgHV1NRgw4YN+JM/+ROk02kMDQ3hy1/+MoqKigoVHxERFcgVFQAhBB544AGsW7cOnudB
      07TMry/xg2BERDedK/4gmBCZn2SL/tQZERHdXPh7AERECcUCQESUUCwAREQJxQJARJRQLABE
      RAnFAkBElFAsAERECXVdCkAQBPD94HrsioiI8nRVvwh2JYb6LuHJp56B7wO3rVmPVbfNBgAE
      gY+tLz+Hc539sEwTDz76OCqUfjz34jZUVJSion46Hrx3VaHDIyJKrIIXgL3v7cAd676AxbfW
      4qc//yVWLpkNVQAIAsxasAobZzbgYtNhvHnoYyyd4GPxneuxeuH0QodFRJR4Bb4FFKCvrx9T
      ptRDqAamlBXBHP4lSaGouHVmAzpbm/GbLe/gjqUL0N03hGMHduK5557DieZWAIBt27AsC5Zl
      wfO80NZHfqIyl23bcCPrWZYFzw+3jfygzeg6Njwv2mbBy/npSyCAaZoIcm5nBX6mLZfnebAs
      K7Y/27Zj8btuPH7ZcYaWbScWf6ZfuM20TPjeaPxBMBx/MBq/7/uwzHCsnufBlsTvOPH4Y/1i
      x+jGx0hy3JZtwXOj42aGfnoUAaTxm5L4Q2M0xnGbVnjcMnFJcicyHqYZjmtk+8i5y+l5viQH
      PNh2tM1Bbkdp7niS3HEl59W24UXzYsz44zmce5PW9/xw7oz0C2T9cs6rJH5PFr/jwHHiORyf
      l9H4A/mcl46bLHdG2zK5E5m7vmzuyvLagSuNw42tN14/We6bpgU/95oVSM5/EI/f92V558K2
      43EA1+EZgKoqw4mkwnY95H5t3MnDe7B110f40le+idqqMkytWY8lngdzoAdPPvU7TP/BE6Hf
      G47+6Iyu6xDCD7UZhgEtsl4qlYKqhNs0TYusY0BVo20pqEpujRRIp9MQyuhRCEXEfg5TVVWk
      UqnY/qK/nazrOhwv/EV6hmFIjzO0bOjQtPCAZvqF40+n0lDU0fiFGI4/58v7FEVBKh2OVVVV
      GJL4dT0ef6xf7Bi12HqGrkPTwm0pIwVVi45bGkru+ReQxp+WxB8aozGOO50Kj1smLknuRMYj
      nQ7HNbL93ORWVUWSAyoMI9qmI7ejNHdUSe5oGnQ9PN6GYUCN5LUxZvzxHM7NREVVwrkz0k/I
      +uWcV0n8qix+XYcSefhpGIZkXkbjF/F8Mowxxk2WO6NtmdyJzF1FNndlea1D+JJrTyT+2NzV
      dWh6+PVQWe6n0ykoudcsITn/Ih6/osjyToNhxOMACv4MQGDypInYt+8Aujtb0G4KFCk+mpqa
      4Hk2/rB9F7782KMo0gUc28HJj4+id2C4Sqsq+B2jRESFU/BnAAtXrkXH1i14bdtpfOGLmyHg
      48KFNkyZUo+GyZPx1ratAIBZC5ejvrwU72zfCs8HPr95MzRWACKigil4AVA0A+s+tznUtnp1
      5t09m7/0pdj6j069tdAhERER+EEwIqLEYgEgIkooFgAiooRiASAiSigWACKihGIBICJKKBYA
      IqKEYgEgIkooFgAiooRiASAiSigWACKihGIBICJKKBYAIqKEYgEgIkooFgAiooRiASAiSigW
      ACKihGIBICJKKBYAIqKEYgEgIkooFgAiooRiASAiSigWACKihLouBSAIAvh+kPe6QZDfukRE
      dPW0Qu9gqPcinnzqGfiBwOLV67Bm6RwAQBD4eP3F36Dl0gAscwgPPPIV1KYcPP3sCwgC4I77
      Po9l828pdHhERIlV8AKw9/23sWr9o1h0ay3+9ue/wB23zYEqAAQB5i5egwdmTENn0yFsP/wx
      ygdbsG7zV3BrXRH+7lfPYMm8b2fWJSKia67At4AC9Pb1Y/KUCRCqjsnlRTD9zF+EomL6jGno
      aGnCb7a8i1VLF2LQslBfWwVVL8KEYh1OANi2DcuyYFkWPM8Lbd1xHDiOE2qzbRtuZD3LsuD5
      4TbXdSPr2PC8aJsFz/dDx2OaJoKc21mBn2nL5XkeLMuK7c+27Vj8rhuPX3acoWXbicWf6Rdu
      My0TvjcafxAMx59zi833fVhmOFbP82BL4necePyxfrFjdONjJDluy7bgudFxM+Hnnv8A0vhN
      SfyhMRrjuE0rPG6ZuCS5ExkP0wzHNbJ95Ny59DxfkgMebDva5iC3ozR3PEnuuJLzatvwonkx
      ZvzxHM698ep7fjh3RvoFsn4551USvyeL33HgOPEcjs/LaPyBfM5Lx02WO6NtmdyJzF1fNndl
      ee3AlcbhxtYbr58s903Tgp97zQok5z+Ix+/7srxzYdvxOIDr8AxAU5XhRFJhOx5yH9CfOLQL
      b+w5ji9/9Z+hprIE+xUle4C240MAMAwju76qqqFt67oOIfxQm2EY0CLrpVIpqEq4TdO0yDoG
      VDXaloKq5NZIgXQ6DaGMHoVQMm25VFVFKpWK7S/3WEbid7zwUxzDMKTHGVo2dGhaeEAz/cLx
      p1NpKOpo/EIMxy9G96koClLpcKyqqsKQxK/r8fhj/WLHqMXWM3QdmhZuSxkpqFp03NJQcs+/
      gDT+tCT+0BiNcdzpVHjcMnFJcicyHul0OK6R7ecmt6oqkhxQYRjRNh25HaW5o0pyR9Og6+Hx
      NgwDaiSvjTHjj+dwbiYqqhLOnZF+QtYv57xK4ldl8es6lMjDT8MwJPMyGr+I55NhjDFustwZ
      bcvkTmTuKrK5K8trHcKXXHsi8cfmrq5D08OvccpyP51OQcm9ZgnJ+Rfx+BVFlncaDCMeB1Dw
      ZwACUyZPwt4P9qOr/RzaLQVFiodTp07Dc238YftufOnRzTAUH5btYGJtFT48eBQdrafRizQM
      3v4hIiqYgr8LaMHKu1BkdeCNHbvwyBc3QwDo7OiAH/i4ddo0vLtjO7Zt24bGplYsv2sd7M7T
      2LHzIB555CEIFgAiooIp+C0gRTVw3wObQm13rLoDALDp0Udj62986AuFDomIiMAPghERJRYL
      ABFRQrEAEBElFAsAEVFCsQAQESUUCwARUUKxABARJRQLABFRQrEAEBElFAsAEVFCsQAQESUU
      CwARUUKxABARJRQLABFRQrEAEBElFAsAEVFCsQAQESUUCwARUUKxABARJRQLABFRQrEAEBEl
      FAsAEVFCsQAQESWUVugd+L6HXTu2oeXSAO5bvxG1FSWhvx358APUTp+PSTVlGBroxs6de+EF
      QFnNZKxatqDQ4RERJVbBnwEc2/cuOtwS3L9mOX7z3AsIhtuDwMfLzz2JPXt2oflCNwCg4+wJ
      DCqVWLZsGebOmFbo0IiIEq3ABSDA2XMtWL1qJWomNaBWdzHkZ/4iIPDwY9/C6tvmZ9duP9+G
      ABa6untRVFQEAHAcJ/vP9/3Q1j3Xg+u5oTbXceBF1nMcB34Q6et5kXVc+H60zYEfBDktAWzb
      RpDTFgSZtly+78NxnNj+XDcSq+vBi8TvuLLjjPZz4/G78fhtx0bg58QKSOL34diRWH0fbh7x
      R+PyPR+OE13Hi8fvyeJ34HnRcbPD5yKQxO/7sCPx+54fPu5gZNxyNuUHsJ3wuLmuK8+dSJtt
      2why2vLPAR+uG21zMwd2uX6+JHc8We648GN5LY/fl+Rwbqb7fhA+RshyZ6RfZDwi8fu+Jz1u
      1w3HKs1rSfzxeeRKcsfJM3ci4xbIzn98PrieCy+P+ONzNz4fHMeB70XHyAmd/9H4c5qu5NoT
      m5eZ5YI/A3AdF6qmAgCKNG30AISAoojQujMXr8SM+iqcP9OIX/76t/ADQFXV7D9FhNdXFAWK
      oobaZOupmgoh6Rvup0AR0bZoPwFVVQGMtgkx0obLtmViVcZti+8TUCLbUhV1jH7hNk3VQtsS
      I+uFg82OT3Z/smNSFKhqJH7pOvG26HrKGPHH28LxQ2TWyz0AIQQ0LbpPEekn5P3U8B1Qae5I
      xkPTIud1JK7cGKQ5IKAq8bwYL58UITn30txRJDkQjz+TA5fPC0WI0LZG1kEon0SsX+a8Rs+F
      LAcUqFc7H6LrKGrsWhLrJ0baQoHlN255zmdVNsejc1cd4xiVaI7Jxy2cw/G8UyRzUJHNweHl
      AhcAgbKyUrS1XUQQeDjfayKlBAiCIFSJRxSVVmD+/PlYe+96pNx+OMHoiVYUBYicEKGI2IQV
      ihJPGKGEEh6APKkkbeEWSRJBPvmjgyxrUxQRm7CKiMcfW45e4DAyYWXHJIk1MollsYporCIe
      azxOxCaikm+sQomdV0UyltGLF8Y41wjPfUnhi19IxBjncPxckV9I8jmvsnMqj2v88VCEEruQ
      yOZDPhdCCEhzJ3oOow+IxhqP6IMrIYl1rHM9XgGQzocxjnvcB295z4f8zrVsObatfHJMSM6/
      JO+yfSP7jM7Lkf0V/EXgFavuxK//6Tf4wNAwZ/kaaIGLZ559AY8+9ii2PP8btLa3w9XPwOpZ
      hhKvA4dPd0ALTNTMWowU36NERFQwBS8AJVX1+M4T34fr+kilUoAAvvLVxwEAmx//emz9ZWsc
      +IGArhc8NCKiRLsuV1lN06HluSdV0xF/UkNERNcab7IQESUUCwARUUKxABARJRQLABFRQrEA
      EBElFAsAEVFCsQAQESUUCwARUUKxABARJRQLABFRQrEAEBElFAsAEVFCsQAQESUUCwARUUKx
      ABARJRQLABFRQrEAEBElFAsAEVFCsQAQESUUCwARUUKxABARJRQLABFRQl2XAhAEAYIguObr
      EhHR1dMKvQNroBtP/9NvYLs+VqzdiOULbh3+S4CLbS34/SuvYtn9j2LhrRMw0NOBZ559Aa4X
      4M4Nm7Bw5pRCh0dElFgFfwaw970dWHzng/jed/85dr/zBrzhB/dBEODI0aOYOqkGfYMWAOD9
      t7ZjzcZH8O1/8XW8u30rfD4RICIqmAIXgAA9vb2Y3jAZipbGlLI0TD/zFyEU3HP/A5hQVZFd
      t9+0MGViLfRUKSYUabADwLZtWJYFy7LgeV5o647jwHGcUJtt23Aj61mWBc8Pt7muG1nHhudF
      2yx4vh86HtM0EeRUpsDPtOXyPA+WZcX2Z9t2LH7XjccvO87Qsu3E4s/0C7eZlgnfG40/CIbj
      z7nF5vs+LDMcq+d5sCXxO048/li/2DG68TGSHLdlW/Dc6LiZ8HPPfwBp/KYk/tAYjXHcphUe
      t0xcktyJjIdphuMa2T5yHrB4ni/JAQ+2HW1zkNtRmjueJHdcyXm1bXjRvBgz/ngO5z7e8j0/
      nDsj/QJZv5zzKonfk8XvOHCceA7H52U0/kA+56XjJsud0bZM7kTmri+bu7K8duBK43Bj643X
      T5b7pmnBz71mBZLzH8Tj931Z3rmw7XgcwHW4BaQoCvzAB6DC9QKIy60rRHaSesNPFQzDyP5d
      VdXQ+rquQwg/1GYYBrTIeqlUCqoSbtM0LbKOAVWNtqWgKrk1UiCdTkMoo0chlExbLlVVkUql
      YvvLPZaR+B0vfEYMw5AeZ2jZ0KFp4QHN9AvHn06loaij8QsxHL8Y3aeiKEilw7GqqgpDEr+u
      x+OP9YsdoxZbz9B1aFq4LWWkoGrRcUtDyT3/AtL405L4Q2M0xnGnU+Fxy8QlyZ3IeKTT4bhG
      tp+b3KqqSHJAhWFE23TkdpTmjirJHU2DrofH2zAMqJG8NsaMP57DuZmoqEo4d0b6CVm/nPMq
      iV+Vxa/rUCIPPw3DkMzLaPwink+GMca4yXJntC2TO5G5q8jmriyvdQhfcu2JxB+bu7oOTQ/f
      2pDlfjqdgpJ7zRKS8y/i8SuKLO80GEY8DqDgzwAEJtbV4tChYxjs7cSFQR9Fio+Wllb4QQDP
      deH5Pjzfg+cFqK0sw9Hjp9B76TwuuRpSl6sWRET0iRT8GcDi1ffitVdewm9PHMSmRx6GgI9T
      p05hQn0dXn/xefTZPqDswnsDPVhzzwb8/pWX8dIhF5sfeRiCBYCIqGAKXgBULYXPP/LlUNvd
      d68FADz0pa/E1t8saSMiomuPHwQjIkooFgAiooRiASAiSigWACKihGIBICJKKBYAIqKEYgEg
      IkooFgAiooRiASAiSigWACKihGIBICJKKBYAIqKEYgEgIkooFgAiooRiASAiSigWACKihGIB
      ICJKKBYAIqKEYgEgIkooFgAiooRiASAiSigWACKihGIBICJKqOtSAIIgQBAEY/zNH/NvRERU
      OFqhd2ANdOOpp5+B4wZYvnYjViycMfyXAId2vo2dh45D0dP4xje/AbPrHJ5/eRtKS4tROXE6
      HrhnVaHDIyJKrIIXgL3v7sBtax/CbTPr8NOf/wpLF8yAKgDftbDzYCO+/cT3cOKD7Xh/30do
      SHdh/h33YfXC6YUOi4go8Qp8CyhAT18vGhomQdFSmFKehuln/uJZvSipaoCuCMyaOwcdFy+h
      q3sAxw/twYsvvoTm1g4AgG3bsCwLlmXB87zQ1h3HgeM4oTbbtuFG1rMsC54fbnNdN7KODc+L
      tlnwfD90PKZpIvBHb1kFfqYtl+d5sCwrtj/btmPxu248ftlxhpZtJxZ/pl+4zbRM+N5o/EEw
      HH/OLTff92GZ4Vg9z4Mtid9x4vHH+sWO0Y2PkeS4LduC50bHzYSfe/4DSOM3JfGHxmiM4zat
      8Lhl4pLkTmQ8TDMc18j2kXMn0/N8SQ54sO1om4PcjtLc8SS540rOq23Di+bFmPHHczj3Rqzv
      +eHcGekXyPrlnFdJ/J4sfseB48RzOD4vo/EH8jkvHTdZ7oy2ZXInMnd92dyV5bUDVxqHG1tv
      vH6y3DdNC37uNSuQnP8gHr/vy/LOhW3H4wCuwzMARVGGE0mF6/oQw+1CUREEmQP0HBeKEFh+
      13osdl0M9l3C08++iO//4AkYhpHdlqqqoW3rug4h/FCbYRjQIuulUimoSrhN07TIOgZUNdqW
      gqrk1kiBdDoNoYjRFiXTlktVVaRSqdj+co9lJH7HE6E2wzCkxxlaNnRoWnhAM/3C8adTaSjq
      aPxCDMcvRvepKApS6XCsqqrCkMSv6/H4Y/1ix6jF1jN0HZoWbksZKahadNzSUHLPv4A0/rQk
      /tAYjXHc6VR43DJxSXInMh7pdDiuke0jZyhVVZHkgArDiLbpyO0ozR1VkjuaBl0Pj7dhGFAj
      eW2MGX88h3MzUVGVcO6M9BOyfjnnVRK/Kotf16FEHn4ahiGZl9H4RTyfDGOMcZPlzmhbJnci
      c1eRzV1ZXusQvuTaE4k/Nnd1HZoefs1TlvvpdApK7jVLSM6/iMevKLK802AY8TiAgj8DEJg4
      oQ4HDx3FQE872oaAIsXHuXPnIIxyDF5qQvfAEHbv+QDTG6ai+VQjLNfPTjAx/g6IiOgqFfxd
      QItX3QO38yR+9/JWbHr0YQj4aGpqRiA0bPr8Orz6wm/RrdRg5YLpSKc0vPbqS3jxldexcdMm
      aKwAREQFU/BbQKqWwoObvxRqW7v2LgDA5Olz8I3pc7Ltk6fPxuPTZxc6JCIiAj8IRkSUWCwA
      REQJxQJARJRQLABERAnFAkBElFAsAERECcUCQESUUCwAREQJxQJARJRQLABERAnFAkBElFAs
      AERECcUCQESUUCwAREQJxQJARJRQLABERAnFAkBElFAsAERECVXwAhAEAU4f/wg7d++F6bih
      v1mDfdj1/ns40dSCIAgQBD5OfHQIu/fuh+16hQ6NiCjRCl4Aznz8IXbsO4YiYeHp517NtgeB
      j+ef/jXUonLs2vYiTp3vxvEPd2LPR2eh2N147uU3Ch0aEVGiFfxH4RuPN2LDA5sxpboIR4/8
      PUwfSCuA7/TBSdVj5dJFmFmr4c0jx2D0NuOBB7+E6hINH//iH2EHgCEKHSERUTIV+BlAgKGh
      IaSLDABAZVEKXpD5i2cOQhglAIDyykq4jgvLtmEYOgQUVKQN+EFhoyMiSrICFwCBktIS9Pb0
      A0GA9l4T+vAe1aIyuENdCAB0nL+A4uI0ilIGBgZMBIGHzgEbGh/9ExEVTMFvAS25bSmee/FZ
      TKkrQ/m0mTDg4MUX/4DPb9qE2hIHv3vlD2hpPoXHvv5teBfTeOm3z2BCuY76mfNYAIiICqjg
      BaB2ykx8/SvV6B+yUV9fDwDYsGE9NEXg8498Be3t7Si+526UlxVDVC7C49WTMGT7qK+vK3Ro
      RESJVvACACFQXlmN8srRpuLiYgCAqumYNHlKaN3K6lpUgoiICk0EQfCpfqnVtm2MhDhoOjjX
      0Zv928TqUgQA2i71Z9umTahAv2mjq3co2zZzSjXaLvWjf8gGACiKQG1FMdq7BrLrNNRXoHfQ
      QnefmW2bNaUa5y/1Y2C4n6oomDmlCqfPd8MZ/pxCOqWhYUIFjp+9mO1XXpJCTXkxTp/vyrbV
      VBSjyNDC8deUwveDWBx9gza6+kbjr68uDR3j5NoyOK6Pju7RftMnVqKn30R3f078U6vR2tmH
      QdPJxK8qmDk5HH9RSse0CeXjxl9bUYyUoaElJ/5oXBWlaVSWptF8oTvbVldZAl1T0NrZN278
      3f0menLinz21Bi2dvdn4NVXBjMlVOHW+C67rZ+OfOqEcjTnxV5SkYbsehqxMP11TceukSpxs
      7YLnZfoVp3VMri3DiXOXsv2m1JXDtF1c7BnMtt06qQoXewfRO2Bl2+ZMq8GZ9h6Yljvm9kvS
      BibVloa2X1mWRkVxGs1tOeenqgQXewbhD7/jobTIQH11KU62jParKitCabGBs209o+e+qhRC
      AS5cHD3/UyeUY8h0cbE3J/7JVejsHkTf4HD8QmDO1GqcaeuBaWfiN3QVt0ysxImWLvj+cPxF
      BoQA+geH54wQmDW1Gs0XemANf54nZWiYXl+BxnOXsnO0tNjAhMoSnGodzZ3q8iKUpA2cbc+J
      v7oUAsCFyNwdMG1cypm7MyZXoSMnfiEE6irjczc6Z2RzftaUajRd6IbteGPGX1acQl1lcSz+
      4rSOc+3jX3ui8UfnyKSaMni+f9XXntz404aGhvrwtaesJIXaimKcbr38tWckrk99AciH4zjQ
      NA1CXPmLBrZtwzCMK+7neZlBUFX1ivq5rgshxBX3A64+Vt/34fs+NO3KnvB5nocgCK64H3D1
      sX6SY/Q8D7quX3Ffz/Ou63hcbe58kn1e79wZ2aeu61c8L6821iAI4LruFefA1fYDMtceVVWh
      KFf+fprrPZaya0/hbwFdB1czkT5pXyHEVRUcRVGuqh/wyWK9mgRVFAVX+/jgamP9JMf4Sfpe
      jeu9v0+yz+udO59knzdiPn+Sftc7f662n+za85l4BkBERFdO/fGPf/zjGx3EtXLu3DmUl5fn
      te7g4CAOHTqExsZGnD9/HsXFxSgqKrrq/ZaVlV3RI4Hz58+jqKgor0dXAwMDMAwDAwMD2Ldv
      H3p7e1FbWzvu/gYGBrJP31tbW/Hhhx+irKwsr+M8evQodF1HOp3O+5gAYGhoCI2NjaisrERz
      czNOnTqFCRMm5HWc58+fx8WLF5FOp7F7926oqoqysrJx+wVBgNOnT+PQoUM4c+YMNE3Lazxc
      18WxY8eQTqdx5MgR9PT0oKamZtx+QRCgvb0dBw8exOnTp9HT04OqqqorfmR2Jfnqui4++ugj
      HD16FBcuXEBxcTHS6XResR47dgzt7e3ZnGlpaUFxcfEVPbK/klh930djYyOOHj2KM2fOIAgC
      VFRU5DU/2tra0NHRgfLycuzbtw+maaKysvKyfX3fh2ma0HUdbW1tOHDgABRFySte27bxwQcf
      QAiBsrIyBEGAs2fPoqKi4rL9giBAV1cXioqKMDQ0hN27d8O2bVRVVY0ba26/Xbt2wXXdcY9x
      ZJ8XLlzAgQMHcPr06bz7AUBnZycOHTqEqqoqGIYBx3HQ1tZ2c38bqO/7eOmll7BlyxZs2bIl
      +/9dXV2X7ee6LrZs2YJJkyZh5cqVmDNnDnbu3In29vZx9+k4DgYHB0P/Ghsb84r39ddfz8b6
      8ssvY8uWLWhtbR33GHfv3o0gCPDOO+9gzpw5UFUVx44dG3d/Z8+eRWdnJ2zbxr59+3Dbbbdh
      586dcF133L5NTU04cuQIXnvtNXR1deV1K2gkxuLiYmzfvh3nzp1DfX09Pvzww3H7dnd34+jR
      o+jv78drr72G+fPn48CBAzBNc9y+u3btQk9PDxYtWgTHcdDa2op9+/aN22/nzp1Ip9PYsWMH
      JkyYgIGBATQ1NY3br7m5GUeOHMHChQuxcuVKVFZWYsuWLdl7+2MZHBzMjntuvg4ODl62XxAE
      2Lp1K1KpFKZPnw5VVbFv3z6cOXNm3FhbW1sxODgIXdexZ88eBEGA5uZmOI5z2X5tbW145ZVX
      QrFu37593NwJggA7duyA67pYvnw5li1bhkuXLmH37t3jxjowMIADBw6gr68Pr7zyCiZMmIAz
      Z85gYGDgsv3a29tx6tQpuK6L3bt347bbbsPx48fR399/2X5AJgdmzJiB48eP48KFCwCAEydO
      jNsvCIJsXr/99tuYN28e2tvbcf78+cv28zwPhw8fBgC89dZbWLhwIVpaWvK69jQ2NuL48eNY
      vHgxLMuC4zjYvn37uHMzCALs2bMHc+fOxZtvvgnbtmHbNs6cOXNzFwAhBKqqqjBx4kRs2LAB
      CxYswIMPPoiqqqrL9jNNE7W1tZg4cSKKi4tRXV2NhQsXorOzc9x9Hjt2DC+99BL279+f/Xfx
      4sVx+wFAdXU1qqqqsG7dOixevBjr16/H5MmTL9tn5AUqANA0DVVVVaivr0dPT89l+43wPA89
      PT1oaGhAeXk5qqqqYFnWuP1SqRTuuusu3HfffThy5Ai2bt2KS5cujdtPVVXccsstUBQF8+fP
      x5QpU/KKtaurCzNnzsSsWbNQUlKCqqoqTJ48Gb29veP2HRgYwNKlS1FVVYUgCLBy5cpxHwQA
      mWJ+6623YvHixZg8eTJmzJiRVw60tbVh6dKlqKioQHFxMaZNm4aSkpJxk69ATQAAFEBJREFU
      L46GYaC0tBQNDQ3YuHFjNl9H3hY9Ft/3kUqlMHPmTNTW1sL3faxfvz6vBx79/f2oq6vDnDlz
      shf/fJSWlsIwDMyfPx8PPPAAFixYgPvuuy+vF4Nt28a8efNQUlKC0tJSLFmyJO9xnDRpEhYv
      XoyhoSE0NDRg0qRJ447lyBzxfR8VFRUoLS1FTU0N+vr6LtsPyDwYrKqqwtq1a/HBBx9gaGho
      3D4jct8kUVNTg1mzZuWVPyP9DMNAVVUVZs6cmdc1pKOjA3fccQfKy8uhqirmz5+f9wMzwzBQ
      UVGB1atX4+233872u6lfBBZC4K677kJrayu2b9+e14ADQElJCYQQeP3111FcXJytiOvWrRu3
      74IFC9DT04M777wz+9Trvffey2u/K1asQGdnJ3bs2JF3rKqqoqGhAa+//jra2tqwY8cO9Pb2
      Yv369eP2raurw4EDBzA0NIS5c+fC933Ytp3XLaCR2xmGYWDt2rWwLGvcmIUQ2aeXy5YtQ1lZ
      GTo6OsYtyAAwefJkbN26FSdPnkQ6nca7776LS5cuYdGiReP2nT59Ot58800AwNSpU+H7fl77
      rK+vxxtvvAHP83Dq1CkMDAxgzZo14/ZbtGgR3nzzTZSUlEDTNAwMDKCurm7cd2ZomoZ7770X
      TU1N2L59+7iP/EeM3Ap755130N/fj5UrV2JoaAgTJ04ct++MGTPw/vvvo6GhAXfccQfee+89
      nD17FsuXL79sv5KSEqxfvx5Hjx7FO++8M+4zhhFCCMyaNQuvvvoqysvLEQQBent7sXLlynH7
      lpeX4+TJkwCA+++/H0Cm2I7Xt76+Hk1NTXj77bfR0tICz/PgeR6WLFky7j5nzZqFU6dOYfbs
      2bjnnnuwY8eO7FthxztOwzCwbdu27K20c+fO4dZbb71sP0VRoCgKtm3bli2mLS0tmDt37rj7
      nD17Nnbs2IGSkpLsrdF8bpEqioKSkhIMDg6itrYWM2bMwPbt2zF58uTPzovAruviyJEjuO22
      2/JaPwgCOI4D27ZDbyFNpVJ59R3hOA6EEFf0NlTP83D06FHMnz8/77fXua6LwcFBKIqCoqIi
      uK6bV6wjfN/H4OAgUqlUXm93G3kLn2VZ0DQt7zg9z8u+28DzvMyXAabTefV3HAdBEEDXdXR1
      daGsrCyvWIMg86WDAwMDKCkpQVFRUV5jEQQBTNNEKpVCT08PdF1HaWlpXsc50nfkUX9paekV
      vQZkWRYaGxvzKnAj+xsYGICu6/B9H6qq5v1WQN/34TgOTNPMPtu4knzt6+vD+fPnMWfOnLzW
      BzL5evHiRSiKgpqamrxfb3BdN5srlmXB87y8x9OyLJimCcdxUF1dnfc+fd+HoijZ/sXFxVf8
      ltCRuZlKpS4b60je5D4Iy/dt7CPnw/f97IPYfI1cs0b6uK6LgYGBm/sZwMi9rUuXLmH27Nk4
      d+4cWltbsW7dusteHDM/PhOELmxnz55FEAS45ZZbLrvPxsZGTJw4EUIIbNmyBdXV1SgqKsKq
      VavGjffw4cNYtGgROjs7cfr0aZw9exb3339/Xo/INU3Lvqg1MDCAY8eOYcWKFZftc+LECZSU
      lKC+vh4vv/wyKisrYds21q9fP27yNDc34+jRoxBCoK+vD5WVlbj77rvHfWFt37596OjowNSp
      U9Hc3Axd1zFv3rxxz2tHRwd6e3sxY8YM7NixA0NDQwiCAJ/73OfGjfXcuXPYu3cvSktLceHC
      BVT+/+1d208b1/b+ZuwYbDAmMyHGGBscwqXhFoGhNCFpAlEhidKqj33sf9aXqu1Dq+QhStO0
      NIQAuWBw3HAxYMzN2MYGj6+YscdzHtDsYk6P9yS/c6qT3+GTrEhIO3t7z5691vrWt5arq+F0
      OmGxWEqOW1xchN/vR0VFBRKJBFiWxdWrV6nRw9LSEs6dOweO4/D48WMSkl+/fp368r958wY7
      OztgWZYYZafTSb2snj9/jmvXrsHn88Hr9UKSJPT19VGjgMPDQzx+/BgVFRUwGAxIJBLQarXU
      aDccDoNlWZw7dw7z8/PY399HPB6H0+mkfseVlRUsLS2B4zgUCgXs7++jt7cXNput5Jy5XA6/
      /PILZFlGU1MT1tfXIYoi7t69W9KBSCQSCAaDaG5uxpMnT8BxHPb29nDnzh1qYt7r9ZI8XCqV
      QjKZRHd3N9rb20uOKxQKmJqawuDgIGZmZiAIAlKpFG7dulXSicjn8/j222/R2NiIy5cvg+d5
      1cbG7XYjEAjAbrejq6vrnWoBFAOg/CtJEhYXFz9sA6C8QJ999hnu37+PL7/8EoFAAKurqyUf
      oCRJ+P7774suiFgspipMDYfDsNlsWF5exuDgIMxmM8bGxlStNxwOo6OjA/Pz8xgdHcXBwQHc
      bjeVdvjpp5+KLl5R/LOvUink83mSA6irq4PT6cTk5CQODg5K8s6Kqubzzz+HJEmYnJxEf38/
      pqenS14csiwjmUzizp07ePToEbq7u1FfX4+nT59SDUAul8Ph4SFE8ajycXR0FC6XC/v7++B5
      vuTYxcVFfPHFF2AYBmNjY7hx4wZ+++03qgEIBoO4e/cupqenMTw8DFEU4ff7qQYgl8tBkiTs
      7e2RF3l8fBy5XK7kS7m/v490Oo3bt2+TS3R2dhY7Ozuor68vOaeyL+vr6xgdHYUsyxgfH6ca
      gJWVFfT29sJq/bPliuI0ldrXVCpFqANRFHH79m1MTExQz46yxnv37pHvKEkSxsbGqAYgFovB
      ZrOhvb0d33zzDb7++mssLy8jHA4Xrf8kBEEAy7LI5/OoqqrClStX4PV6EQqFSo4D/vSInU4n
      UqkUdnd3VdExwJ/PRBAEDA8PIxwOw+/3o7Ozs+S4lpYW9Pf3kxxiR0cHcSpLQaPRYHh4GAcH
      B3j69ClMJhO6urpUOZA//vgjOI4reiZGo/HDNgAMw0AURXJx5HI5IpksBYVX7+rqQnX1Ueeh
      zc1NVdyf3W7H9PQ0amtrEQqFkEwmyUGgIRaLYWNjg1TyqUnGAoDFYsHFixdRU3PUIE+JAGgo
      KyuDx+OBRqOBxWIh4acaj0Or1SIWi0EQBFRWVqqu6FRC1AsXLoDneUIhqZlveXkZyWSSeG0K
      fURDZWUlAoEAABBppJrwX5ZlSJKES5cuoby8HIIgqPKqdDod5ubmAACNjY2ETqR5m2fOnEEi
      kYAoiigrK0Mul8P+/j71YgSO9mJiYgLRaBQsyyIajaqSOVqtVjx79gySJMFgMCAWiyEQCODy
      5cvUscpZVegttTJXg8EAl8uFhoYGFAoFrK6uUo04cHReFSqlp6cHLMuSJHYpKLkcrVaLbDaL
      QCCAt2/f4t69e9Q5W1paUFtbi5mZGRgMBlRWVqo6rwzDIBqNEoeKYRgIgqBaKlteXo5PPvkE
      h4eH+OOPP6DX68ldRENtbS3MZjMikQgWFhbQ09NDfTebm5vB8zw5a4oy8IPOAciyjLW1NWxu
      bqKnpwcvXrxAZWUlBgYGqIf1uLIGAMn+06ypov9dXl7GwcEBzGYzWlpaVB2aeDyOcDiMXC6H
      9vZ2+Hw+1NXVUeeUJAmHh4fE88rn80gkEuA4jrpWxbPW6XTQaDTY29tTFT1ks1m43W7o9Xp0
      dHSQ/4u21r29PZhMJrIfCg9M86plWYYoikgmk9DpdKiqqsLGxgYaGhqoa5UkCfPz85BlGe3t
      7dBoNP/Es/4VBEGAXq9HWVkZZFnG9vY2ampqqEZH2YtMJkP09Gr2VZZlBINBzM/Pk/YTra2t
      sNls1BdYkiSSszIajYhGozh79qyqc5dOp+H3+5HNZlFVVQWHw0F1AiRJQjgcRjQahcViAc/z
      WFxcxKVLl6hrLRQK2NnZQTgcBsMwsFqtOH/+vCqdezQaLbrwfT4fHA4H1aCLooiVlRXs7+/D
      aDSipaVFde5AWfPS0hJMJhM1alDWqjyTfD4Po9GIUChErXkpFArY3d0titxO8vP/CorR1+l0
      RXlINd/xeKsUhQJPJpMffgTQ1NSEpqYmAMDIyIjqsSdfHEEQIMsy9dJgGAYcx2FgYID87e3b
      t2hvb6c+CFEUEY/H8dFHHwEAbDYbIpEI9cBtbW1hY2MDPT09mJubgyRJuHr1askxwBFVoWih
      c7kcZmZm0N/fD1mWVRVJtbW1AQA8Hg+MRiOVpgCOEoY8zyObzWJiYgIajUbVWtPpNJHnrq2t
      YXJykkobKVhbW0NXVxfRRedyOfT391OfZSqVgslkwt7eHlwuF8rKylQpa/x+P/x+P5xOJ4mM
      1BhV4OhFtFgsaGpqgsvlUlXnABxFqEtLS+js7CRFR2pkmbIsY3NzE1tbW0ilUuB5nnxKQaPR
      oLy8HIeHh1haWiJSUjWXjVIbo0S46XQaJpNJVTSXyWRIHkBRFKmZU6fTFdG+q6urqKuro9JV
      0WgUs7OzqKmpIVGR2+1WFSF5PB5Eo1GieGNZFsFgsOT7zDAMtre34fF40NvbC57nEQqFwDAM
      9ezp9XqMj4/DbDajvLycGMfW1lbqHiWTScJweDwetLa24uzZsx92HcD7QpIkTExMYGpqinxc
      LpcqKmd3dxezs7NFHzV6bFmWMTMzgwsXLmB8fJwUcmxtbVHHLS0twel04tGjR7Db7SSPQMP2
      9jYePHgAn8+HtbU1hEIhUplJw88//4yXL1/C6/WSil41WmVFxudyudDb24vu7m7MzMxQxyUS
      Cezu7iKfz2NlZQUjIyMIBoPUIiAApCDK6/WipaUFw8PDhKIpBa/XC4ZhsLu7i1u3bqG1tRWL
      i4vUcel0Gg0NDfB4PPj9999V1RwAR1Gm1+tFVVUVHj58iM7OToRCIVU697W1NYyMjGBmZgYD
      AwP49NNP8fr1a+qcW1tbEAQBIyMjsFgs6Ovrw/T0NJV+jEQimJ6eRkNDAzKZDDQaDZ48eUIt
      dpNlGZOTk+jp6cHo6ChGRkbQ1tamSiotCAJWVlZw8+ZNjIyMYGhoCH6/n3rulErc4x/FUaLB
      4/FgaGgIOp0OCwsLAKCq3qVQKEAQBAwNDeHVq1fIZrPIZrNUaa8oikin07h58yampqYgiiIy
      mYyq+oOFhQU4nU5IkkRyQdvb29RxwFEe0e12Y3V1FTs7O/D5fB9+BPC+YFkWgiDg+vXrxINS
      u5HZbBaJRKJIY6zmwCjFGBzH4eOPP8bz589VKYcUWWRFRQWqq6thNpuJ7JEGh8NBuPW+vj6k
      02lV2mgAuHfvHmZnZ4mKp7q6WpV3rORkDg8PwXEcoa/UIJPJEIqDZVlUV1cjm82ioqKi5Lh8
      Po9IJIJkMonGxkbVEkeWZRGPx4l0TxAE1XJXo9GIixcvIp1Ow+12Q5IkDA4Olgz/lQjHZrPB
      7XbDZDKhtrYW8XicSucBxaG+Wmrj4OAAVqsVLMsSCsBqtSKVSpVUym1vb2NgYAA8z0Ov16Oh
      oQHxeByJRIJK5xUKBZJLUfTyavJr+XweBoOBPAOtVquqwE5pdXLjxg2yL2rrFpT1Xrp0CWNj
      Y6rqRwAQmbNWq8W1a9fw66+/UpVDx8edOXMG169fx5MnT9Dc3KwqZ6XMp5y7d5GBfvXVV3j1
      6hUMBgMcDge6u7uh1+v/f/UCUguGYcDzPCmw0el05KDSQsaqqipkMhnY7XbSPyiVSsFsNpd8
      IAzDkKIok8kEjUaD6elpUvFaalwsFkNdXR1sNhvKysrg9/thNpupRSAMw8BkMsFut2Nubg7Z
      bJbQZTRotVrU19eDZVlMTU2hqamJehEDR4nOhYUFSJKECxcuYGNjAxaLhbpWnU6HSCSC5eVl
      1NXVged5rK+vo7m5mXrQOY7D9vY2UqkUHA4HkskkysrKqJdqfX09Xr9+jUAgAJ/PB5Zlcfny
      Zep8qVQKlZWV0Ov10Ol0sNlssNls1E6vOp0OHo+HfMeFhQUEg0GqDFRJar948QI9PT1wu93w
      +XwYHBykcvk8z2Nubg7Ly8uorq6GzWZDJpNBbW1tyTnPnj2LZ8+eIRKJQBRFXLx4Ebu7u7Ba
      rSXzawqV8fz5c6yurmJ1dRWhUAhXr16lrtVgMEAQBMzOzsLn85E102ggpSaC4zhUVFSgvLwc
      uVwOVVVVqvYnFAqB4zg0NjZifn4eDMOoyj2JokiqwWtqauByudDY2FjyrLMsS/ob6fV68DwP
      t9sNh8NBfb+U/kEcx8FutxOJrdVqpZ5ZrVYLu92Og4MDuFwudHR0HDlKH3IS+EOH2uTPv3O+
      95mrUCi8d/vrU/w1ZFkmyfn3bbf8n4YkSchkMu9c5HYSsiwjEAioyiGdxN7eHrnU33WcGgNw
      EooYQI0y6yRSqRREUVQVzR1HIpFAoVBQrQI6js3NTVUiguMoFAqksdz/JAX034K/+0J93/n+
      Wy+oDxkMw7zzpfZ3Q2031pNIp9NFFIwsy/D5fFQDoHT1PI719XU4HI6Se6Woso77smtra2hr
      a6MagEwm808U5crKCtUAKGrA43NGIhFoNJqSBuCvxgWDQULxloJS7X4cXq9XlbGKx+NFNJyS
      fzw1AKc4xSn+rXj27BkMBgOhNJQLmoZsNovvvvuOqOQAdf11UqkUfvjhh6JWFVtbW0TFVgpz
      c3NIp9NFqii1DeHu37+P7u5u4ljFYjHY7faSYwqFAh48eFDUsiYajaK5uZk63/r6OrxebxE9
      pUYkAQAPHz4syjUQGbyq0ac4xSlOoRJXrlyB3+8nUkpZlvHy5UvqOIPBgPb2dnR2dhLjobQj
      KQWj0YjW1lb09fWRSOHNmzeq1trf34/Xr1+TtiqyLOPFixfUcQzD4MqVK+A4DufPnwdwVOlP
      u5A1Gg36+/tRW1tLjI7SwI6GlpYWxGKxojyVWoHF4OAgJEkixjSXy+HNmzenOYBTnOIU/1n8
      Hb+5ezKfpjR5fFf68v+yVoVbf9cfBlKomfehWvP5/Hv9LKVSyHZqAE5xilOc4n8U/wB8Y3MN
      EDvmsgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Income of Fatal Police Shootings Indiviudals vs. Fleeing Type During Shooting' width='384'>
      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
      7RyL6gN7KT9QQUNLFE8ogxEjRpKfGUp2ZeI8ki4gIYRwKaXUWd6kRAghxIeOBECC2XbHO0AK
      IURySAAkmGXJFZZCiJ5BAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAI
      IVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAI
      IVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAI
      IVxKAkAIIVxKAkAIIVxKAkAIIVxKAkAIIVzKk+wCRPJoK4ZzZBs62oiRUYJK74NSsk8gus+K
      x9i/dw9Hjx4jJyeL4pL+eLzeZJclzkBprXWyi0gMTW3VfvZVHMGyNSlZeQwo7UvA036DF22s
      ZfPWnUQsh1B6LsOGDsRvHm+jbeqOHMFMySYt9N7K7dhxqisPEczKJyPs77KKaDSK3991m/NN
      23GsnfOILvsNuvEQaA2Ggaf0EnwX/TtG9iCUUkmtUfQOtm2xdUc5j/5zBZXNHhytMZSiX7rN
      Z26YzJCBpRimmewyRSeUUsoVAaAdi11r3+D5OUuoa7YwTY3tmAybPINbr730RAg0Ht7HC88+
      yYY9RwkFvbRGLEZffB2zZ04hxWeC3cKcJ/9ONO9ibrhiWFv/mbbZt34hjz+/kGvuvJ/JZfld
      1tITAiC+bQ7Rtx5Etx7tMEdh5A4heNPvMUJZSalN9C5btu/mV8+upLoZ4OSdBk1hiuI/bp3M
      oIGlySlOdEkppVzRBdR0pJx/PPkiRZNu5L5rLiPN77B24Ss8+cLTFA0YxhWjCoA4i158itUV
      8IWvfpOBeSG2L5/L7556kfy+BVw5oQyUJtbSRGM0wrupWV+5g6eem0fWkOmMKclJ5sc8K9qK
      EV3yi042/gAa58g24mv/D9+UL6AM2XMTp2fFYzz1xgaqmzs7WlQcaoJn3tzAAyV9pDuoh3JF
      ANRXbqc6OJTPXTGVzLAPgHGXzKB8zx7WL1vKpKGz8TeU8/buBmZcdzuDizIAGHbR1Vy2aTVv
      r9rC9AlldNwcOtFG/vXcUzQF+/HJGy4j4EvcBvPQoUN873vf6/6CWqObUoHU07fZsBz1xLZu
      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
    </thumbnail>
    <thumbnail height='384' name='KPI' width='384'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='Per Capita Count and Avg. Median Income of Individuals in a Fatal Police Shooting from 2015' width='384'>
      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
      ERkAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
