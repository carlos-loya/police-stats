df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ",'oraclerest.cs.utexas.edu:5048/rest/native/?query="SELECT all_cleaned_data.imgT, all_cleaned_data.targetImg, all_cleaned_data.distractImg, all_cleaned_data.correct, all_cleaned_data.eye_accuracy, all_cleaned_data.RT FROM `all_cleaned_data` LIMIT 100"')),httpheader=c(DB='jdbc:data:world:sql:exsorest:s-17-edv-project-1', USER='exsorest', PASS="eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmV4c29yZXN0IiwiaXNzIjoiYWdlbnQ6ZXhzb3Jlc3Q6OmY5ODk0YTlhLWZkNjAtNDI2NC04YTk3LTlhYjUwOWYzODZiZSIsImlhdCI6MTQ4NDY5NzMzNiwicm9sZSI6WyJ1c2VyX2FwaV93cml0ZSIsInVzZXJfYXBpX3JlYWQiXSwiZ2VuZXJhbC1wdXJwb3NlIjp0cnVlfQ.WLINQ3z7bGjvYCmpDR3Fvl3LZ4fFDLBDCngivFE3nfoF1EgGQQ0WCxZElC2bxC3YUoUiYEJ6hz8rxVW3yHoecg", MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
print(summary(df))
print(head(df))
ggplot(data = diamonds) +
geom_point(aes(x=cut, y=price, color=color)) +
#facet_grid(~clarity) +
#facet_grid(clarity~cut, labeller=label_both) +
#theme_classic() +
#theme(axis.ticks.y=element_blank(), axis.text.y=element_blank()) +
theme(axis.text.x=element_text(angle=50, size=10, vjust=0.5)) +
labs(title="Grammar of Graphics Example")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ggplot(data = diamonds) +
geom_point(aes(x=cut, y=price, color=color)) +
#facet_grid(~clarity) +
#facet_grid(clarity~cut, labeller=label_both) +
#theme_classic() +
#theme(axis.ticks.y=element_blank(), axis.text.y=element_blank()) +
theme(axis.text.x=element_text(angle=50, size=10, vjust=0.5)) +
labs(title="Grammar of Graphics Example")
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard. Also change cannata:test-emp-and-dept to yourAccount:yourDataset.
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ",'oraclerest.cs.utexas.edu:5000/rest/native/?query="SELECT all_cleaned_data.imgT, all_cleaned_data.targetImg, all_cleaned_data.distractImg, all_cleaned_data.correct, all_cleaned_data.eye_accuracy, all_cleaned_data.RT FROM `all_cleaned_data` LIMIT 100"')),httpheader=c(DB='jdbc:data:world:sql:exsorest:s-17-edv-project-1', USER='exsorest', PASS="eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmV4c29yZXN0IiwiaXNzIjoiYWdlbnQ6ZXhzb3Jlc3Q6OmY5ODk0YTlhLWZkNjAtNDI2NC04YTk3LTlhYjUwOWYzODZiZSIsImlhdCI6MTQ4NDY5NzMzNiwicm9sZSI6WyJ1c2VyX2FwaV93cml0ZSIsInVzZXJfYXBpX3JlYWQiXSwiZ2VuZXJhbC1wdXJwb3NlIjp0cnVlfQ.WLINQ3z7bGjvYCmpDR3Fvl3LZ4fFDLBDCngivFE3nfoF1EgGQQ0WCxZElC2bxC3YUoUiYEJ6hz8rxVW3yHoecg", MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
print(summary(df))
print(head(df))
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard. Also change cannata:test-emp-and-dept to yourAccount:yourDataset.
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ",'oraclerest.cs.utexas.edu:5048/rest/native/?query="SELECT all_cleaned_data.imgT, all_cleaned_data.targetImg, all_cleaned_data.distractImg, all_cleaned_data.correct, all_cleaned_data.eye_accuracy, all_cleaned_data.RT FROM `all_cleaned_data` LIMIT 100"')),httpheader=c(DB='jdbc:data:world:sql:exsorest:s-17-edv-project-1', USER='exsorest', PASS="eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmV4c29yZXN0IiwiaXNzIjoiYWdlbnQ6ZXhzb3Jlc3Q6OmY5ODk0YTlhLWZkNjAtNDI2NC04YTk3LTlhYjUwOWYzODZiZSIsImlhdCI6MTQ4NDY5NzMzNiwicm9sZSI6WyJ1c2VyX2FwaV93cml0ZSIsInVzZXJfYXBpX3JlYWQiXSwiZ2VuZXJhbC1wdXJwb3NlIjp0cnVlfQ.WLINQ3z7bGjvYCmpDR3Fvl3LZ4fFDLBDCngivFE3nfoF1EgGQQ0WCxZElC2bxC3YUoUiYEJ6hz8rxVW3yHoecg", MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
print(summary(df))
print(head(df))
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard. Also change cannata:test-emp-and-dept to yourAccount:yourDataset.
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ",'oraclerest.cs.utexas.edu:5048/rest/native/?query="SELECT all_cleaned_data.imgT, all_cleaned_data.targetImg, all_cleaned_data.distractImg, all_cleaned_data.correct, all_cleaned_data.eye_accuracy, all_cleaned_data.RT FROM `all_cleaned_data` LIMIT 100"')),httpheader=c(DB='jdbc:data:world:sql:exsorest:s-17-edv-project-1', USER='exsorest', PASS="eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmV4c29yZXN0IiwiaXNzIjoiYWdlbnQ6ZXhzb3Jlc3Q6OmY5ODk0YTlhLWZkNjAtNDI2NC04YTk3LTlhYjUwOWYzODZiZSIsImlhdCI6MTQ4NDY5NzMzNiwicm9sZSI6WyJ1c2VyX2FwaV93cml0ZSIsInVzZXJfYXBpX3JlYWQiXSwiZ2VuZXJhbC1wdXJwb3NlIjp0cnVlfQ.WLINQ3z7bGjvYCmpDR3Fvl3LZ4fFDLBDCngivFE3nfoF1EgGQQ0WCxZElC2bxC3YUoUiYEJ6hz8rxVW3yHoecg", MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
print(summary(df))
print(head(df))
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard. Also change cannata:test-emp-and-dept to yourAccount:yourDataset.
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ",'oraclerest.cs.utexas.edu:5048/rest/native/?query="SELECT all_cleaned_data.imgT, all_cleaned_data.targetImg, all_cleaned_data.distractImg, all_cleaned_data.correct, all_cleaned_data.eye_accuracy, all_cleaned_data.RT FROM `all_cleaned_data` LIMIT 100"')),httpheader=c(DB='jdbc:data:world:sql:exsorest:s-17-edv-project-1', USER='exsorest', PASS="eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmV4c29yZXN0IiwiaXNzIjoiYWdlbnQ6ZXhzb3Jlc3Q6OmY5ODk0YTlhLWZkNjAtNDI2NC04YTk3LTlhYjUwOWYzODZiZSIsImlhdCI6MTQ4NDY5NzMzNiwicm9sZSI6WyJ1c2VyX2FwaV93cml0ZSIsInVzZXJfYXBpX3JlYWQiXSwiZ2VuZXJhbC1wdXJwb3NlIjp0cnVlfQ.WLINQ3z7bGjvYCmpDR3Fvl3LZ4fFDLBDCngivFE3nfoF1EgGQQ0WCxZElC2bxC3YUoUiYEJ6hz8rxVW3yHoecg", MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
print(summary(df))
print(head(df))
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard. Also change cannata:test-emp-and-dept to yourAccount:yourDataset.
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ",'oraclerest.cs.utexas.edu:5048/rest/native/?query="SELECT all_cleaned_data.imgT, all_cleaned_data.targetImg, all_cleaned_data.distractImg, all_cleaned_data.correct, all_cleaned_data.eye_accuracy, all_cleaned_data.RT FROM `all_cleaned_data` LIMIT 100"')),httpheader=c(DB='jdbc:data:world:sql:exsorest:s-17-edv-project-1', USER='exsorest', PASS="eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmV4c29yZXN0IiwiaXNzIjoiYWdlbnQ6ZXhzb3Jlc3Q6OmY5ODk0YTlhLWZkNjAtNDI2NC04YTk3LTlhYjUwOWYzODZiZSIsImlhdCI6MTQ4NDY5NzMzNiwicm9sZSI6WyJ1c2VyX2FwaV93cml0ZSIsInVzZXJfYXBpX3JlYWQiXSwiZ2VuZXJhbC1wdXJwb3NlIjp0cnVlfQ.WLINQ3z7bGjvYCmpDR3Fvl3LZ4fFDLBDCngivFE3nfoF1EgGQQ0WCxZElC2bxC3YUoUiYEJ6hz8rxVW3yHoecg", MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
print(summary(df))
print(head(df))
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard. Also change cannata:test-emp-and-dept to yourAccount:yourDataset.
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ",'oraclerest.cs.utexas.edu:5000/rest/native/?query="SELECT all_cleaned_data.imgT, all_cleaned_data.targetImg, all_cleaned_data.distractImg, all_cleaned_data.correct, all_cleaned_data.eye_accuracy, all_cleaned_data.RT FROM `all_cleaned_data` LIMIT 100"')),httpheader=c(DB='jdbc:data:world:sql:exsorest:s-17-edv-project-1', USER='exsorest', PASS="eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmV4c29yZXN0IiwiaXNzIjoiYWdlbnQ6ZXhzb3Jlc3Q6OmY5ODk0YTlhLWZkNjAtNDI2NC04YTk3LTlhYjUwOWYzODZiZSIsImlhdCI6MTQ4NDY5NzMzNiwicm9sZSI6WyJ1c2VyX2FwaV93cml0ZSIsInVzZXJfYXBpX3JlYWQiXSwiZ2VuZXJhbC1wdXJwb3NlIjp0cnVlfQ.WLINQ3z7bGjvYCmpDR3Fvl3LZ4fFDLBDCngivFE3nfoF1EgGQQ0WCxZElC2bxC3YUoUiYEJ6hz8rxVW3yHoecg", MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
print(summary(df))
print(head(df))
source('~/Code/DataVisualization/01 RESTful Data Access/Access data.world Database.R', echo=TRUE)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard. Also change cannata:test-emp-and-dept to yourAccount:yourDataset.
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ",'oraclerest.cs.utexas.edu:5048/rest/native/?query="SELECT all_cleaned_data.imgT, all_cleaned_data.targetImg, all_cleaned_data.distractImg, all_cleaned_data.correct, all_cleaned_data.eye_accuracy, all_cleaned_data.RT FROM `all_cleaned_data` LIMIT 100"')),httpheader=c(DB='jdbc:data:world:sql:exsorest:s-17-edv-project-1', USER='exsorest', PASS="eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmV4c29yZXN0IiwiaXNzIjoiYWdlbnQ6ZXhzb3Jlc3Q6OmY5ODk0YTlhLWZkNjAtNDI2NC04YTk3LTlhYjUwOWYzODZiZSIsImlhdCI6MTQ4NDY5NzMzNiwicm9sZSI6WyJ1c2VyX2FwaV93cml0ZSIsInVzZXJfYXBpX3JlYWQiXSwiZ2VuZXJhbC1wdXJwb3NlIjp0cnVlfQ.WLINQ3z7bGjvYCmpDR3Fvl3LZ4fFDLBDCngivFE3nfoF1EgGQQ0WCxZElC2bxC3YUoUiYEJ6hz8rxVW3yHoecg", MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
print(summary(df))
print(head(df))
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard. Also change cannata:test-emp-and-dept to yourAccount:yourDataset.
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ",'oraclerest.cs.utexas.edu:5048/rest/native/?query="select all_cleaned_data.imgT, all_cleaned_data.targetImg, all_cleaned_data.distractImg, all_cleaned_data.correct, all_cleaned_data.eye_accuracy, all_cleaned_data.RT FROM `all_cleaned_data` LIMIT 100"')),httpheader=c(DB='jdbc:data:world:sql:exsorest:s-17-edv-project-1', USER='exsorest', PASS="eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmV4c29yZXN0IiwiaXNzIjoiYWdlbnQ6ZXhzb3Jlc3Q6OmY5ODk0YTlhLWZkNjAtNDI2NC04YTk3LTlhYjUwOWYzODZiZSIsImlhdCI6MTQ4NDY5NzMzNiwicm9sZSI6WyJ1c2VyX2FwaV93cml0ZSIsInVzZXJfYXBpX3JlYWQiXSwiZ2VuZXJhbC1wdXJwb3NlIjp0cnVlfQ.WLINQ3z7bGjvYCmpDR3Fvl3LZ4fFDLBDCngivFE3nfoF1EgGQQ0WCxZElC2bxC3YUoUiYEJ6hz8rxVW3yHoecg", MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
print(summary(df))
print(head(df))
ggplot(data = diamonds) +
geom_point(aes(x=cut, y=price, color=color)) +
#facet_grid(~clarity) +
facet_grid(clarity~cut, labeller=label_both) +
#theme_classic() +
#theme(axis.ticks.y=element_blank(), axis.text.y=element_blank()) +
theme(axis.text.x=element_text(angle=50, size=10, vjust=0.5)) +
labs(title="Grammar of Graphics Example")
ggplot(data=mpg) +
geom_point(aes(x=class,y=hwy))
ggplot(data=mpg) +
geom_point(aes(x=class,y=hwy, color=year))
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard. Also change cannata:test-emp-and-dept to yourAccount:yourDataset.
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ",'oraclerest.cs.utexas.edu:5048/rest/native/?query="select all_cleaned_data.imgT, all_cleaned_data.targetImg, all_cleaned_data.distractImg, all_cleaned_data.correct, all_cleaned_data.eye_accuracy, all_cleaned_data.RT FROM `all_cleaned_data` LIMIT 100"')),httpheader=c(DB='jdbc:data:world:sql:exsorest:s-17-edv-project-1', USER='exsorest', PASS="eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmV4c29yZXN0IiwiaXNzIjoiYWdlbnQ6ZXhzb3Jlc3Q6OmY5ODk0YTlhLWZkNjAtNDI2NC04YTk3LTlhYjUwOWYzODZiZSIsImlhdCI6MTQ4NDY5NzMzNiwicm9sZSI6WyJ1c2VyX2FwaV93cml0ZSIsInVzZXJfYXBpX3JlYWQiXSwiZ2VuZXJhbC1wdXJwb3NlIjp0cnVlfQ.WLINQ3z7bGjvYCmpDR3Fvl3LZ4fFDLBDCngivFE3nfoF1EgGQQ0WCxZElC2bxC3YUoUiYEJ6hz8rxVW3yHoecg", MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
print(summary(df))
print(head(df))
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard. Also change cannata:test-emp-and-dept to yourAccount:yourDataset.
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ",'oraclerest.cs.utexas.edu:5048/rest/native/?query="select all_cleaned_data.imgT, all_cleaned_data.targetImg, all_cleaned_data.distractImg, all_cleaned_data.correct, all_cleaned_data.eye_accuracy, all_cleaned_data.RT FROM `all_cleaned_data` LIMIT 100"')),httpheader=c(DB='jdbc:data:world:sql:exsorest:s-17-edv-project-1', USER='exsorest', PASS="eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmV4c29yZXN0IiwiaXNzIjoiYWdlbnQ6ZXhzb3Jlc3Q6OmY5ODk0YTlhLWZkNjAtNDI2NC04YTk3LTlhYjUwOWYzODZiZSIsImlhdCI6MTQ4NDY5NzMzNiwicm9sZSI6WyJ1c2VyX2FwaV93cml0ZSIsInVzZXJfYXBpX3JlYWQiXSwiZ2VuZXJhbC1wdXJwb3NlIjp0cnVlfQ.WLINQ3z7bGjvYCmpDR3Fvl3LZ4fFDLBDCngivFE3nfoF1EgGQQ0WCxZElC2bxC3YUoUiYEJ6hz8rxVW3yHoecg", MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
print(summary(df))
print(head(df))
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% dplyr::arrange(desc(x)) %>% tbl_df
require(tidyr)
require(dplyr)
require(ggplot2)
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% dplyr::arrange(desc(x)) %>% tbl_df
diamonds %>% dplyr::mutate(minxy = pmin(x,y)) %>% tbl_df
diamonds %>% dplyr::mutate(between_x = between(x,4,4.1)) %>% tbl_df
lapply('alphabet begins with abc', gsub, pattern="[abc]",replacement= "")
lapply('alphabet begins with xyz', gsub, pattern="xyz",replacement= "")
lapply('alphabet begins with abc', gsub, pattern="[^ac]",replacement= "")
lapply('alphabet begins with abc', gsub, pattern="^[abc]",replacement= "")
lapply('alphabet begins with --- abc', gsub, pattern="[a-e]",replacement= "")
lapply('alphabet begins with [] abc', gsub, pattern="[ae[]",replacement= "")
lapply('alphabet begins with [] abc', gsub, pattern="[ae]]",replacement= "")
file_path = "../../CSVs/PreETL_Diamonds.csv"
setwd("~/OneDrive/school/ut/spring17/cs 329 - Elements of DataVisualization/projects/dvproject-3-loya-stewart-nguyen/00 Doc")
file_path = "../01 Data/fatal-police-shootings-data.csv"
df <- read.csv(file_path, header=TRUE, stringsAsFactors=FALSE)
df$name <- NULL
names(df)
str(df)
measures <- c("id", "age")
dimensions <- setdiff(names(df), measures)
dimensions
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
df["state"] <- data.frame(lapply(df["state"], toupper))
df$race <- gsub("W", "WHITE", df$race)
df$race <- gsub("^[H]", "HISPANIC", df$race)
df$race <- gsub("^[B]", "BLACK", df$race)
df$race <- gsub("^[N]", "NATIVE AMERICAN", df$race)
df$race <- gsub("^[A]", "ASIAN", df$race)
df$race <- gsub("^[O]", "OTHER", df$race)
df["race"]
df$gender <- gsub("F", "FEMALE", df$gender)
df$gender <- gsub("^[M]", "MALE", df$gender)
df["gender"]
head(df)
na2emptyString <- function (x) {
x[is.na(x)] <- ""
return(x)
}
if(length(dimensions) > 0) {
for(d in dimensions) {
# Change NA to the empty string.
df[d] <- data.frame(lapply(df[d], na2emptyString))
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
na2zero <- function (x) {
x[is.na(x)] <- 0
return(x)
}
if( length(measures) > 1) {
for(m in measures) {
print(m)
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
df[m] <- data.frame(lapply(df[m], na2zero))
df[m] <- data.frame(lapply(df[m], function(x) as.numeric(as.character(x))))
}
}
str(df)
knitr::opts_chunk$set(echo=TRUE)
sessionInfo(package=NULL)
sessionInfo()
knitr::opts_chunk$set(echo=TRUE)
sessionInfo(package=NULL)
knitr::opts_chunk$set(echo=TRUE)
sessionInfo(package=NULL)
sessionInfo(package=NULL)
sessionInfo()
knitr::opts_chunk$set(echo=TRUE)
sessionInfo(package=NULL)
source('../01 Data/finalplots.R')
summary(fatalPoliceShootings)
summary(incomeOfTheFatallyShot)
plot(boxplot)
plot(histogram)
plot(scatterplot)
plot(fleePlot)
plot(genderRacePlot)
plot(raceFleePlot)
plot(incomeByRacePlot)
plot(inequalityPlot)
require(ggplot2)
require(dplyr)
income <- read.csv(file="../01 Data/census-income-data.csv", header=TRUE, sep=",")
fatalPoliceShootings <- read.csv(file="../01 Data/fatal-police-shootings-data.csv", header=TRUE, sep=",")
incomeOfTheFatallyShot <- read.csv(file="../01 Data/fatal-police-shootings-and-census-income-data.csv", header=TRUE, sep=",")
histogram <- ggplot(incomeOfTheFatallyShot) + geom_histogram(aes(Per_Capita_Income, fill = Per_Capita_Income  ))
boxplot <- ggplot(incomeOfTheFatallyShot) + geom_boxplot(aes(x = flee, y = Median_Family_Income, fill = flee)  )
scatterplot <- ggplot(incomeOfTheFatallyShot) + geom_point(aes(x = GINI, y = Median_Family_Income, color = armed))
genderMentalIll <- dplyr::select(incomeOfTheFatallyShot, Per_Capita_Income, gender, signs_of_mental_illness)
countTotal <- genderMentalIll %>% mutate(Per_Capita_Range = ifelse(Per_Capita_Income < 26500, "low", ifelse(Per_Capita_Income < 31000 & Per_Capita_Income > 26500, "medium","high"))) %>% dplyr::count(Per_Capita_Range, gender, signs_of_mental_illness)
lowCapitaRange <- countTotal %>% filter(Per_Capita_Range == "low")
mediumCapitaRange <- countTotal %>% filter(Per_Capita_Range == "medium")
highCapitaRange <- countTotal %>% filter(Per_Capita_Range == "high")
capitaRangePlot <- ggplot() +
geom_text(data = lowCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = -0.2, size=10) +
geom_text(data = mediumCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0, size=10) +
geom_text(data = highCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0.2, size=10)
plotDF <- dplyr::inner_join(income, fatalPoliceShootings, by = c("State" = "state")) %>%
dplyr::group_by(gender, race) %>%
dplyr::summarize(avg_median_income = mean(Median_Income))
subset <- dplyr::inner_join(income,fatalPoliceShootings, by = c("State" = "state")) %>% dplyr::filter(Median_Income >= 46000 & Median_Income <= 62000) %>%
dplyr::group_by(gender, race) %>%
dplyr::summarize(avg_median_income = mean(Median_Income))
genderRacePlot <- ggplot() +
geom_text(data = plotDF, aes(x= gender, y=race, label = avg_median_income), size=10) +
geom_text(data = subset, aes(x=gender, y=race, label = avg_median_income), nudge_y = -.5, size=4)
test <- incomeOfTheFatallyShot %>% dplyr::group_by(race,flee) %>% dplyr::summarise(income = median(Median_Income), MedianFamilyIncomePerCapitaIncomeRatio = median(Median_Family_Income/Per_Capita_Income))
raceFleePlot <- ggplot(test) +
theme(axis.text.x=element_text(angle=90, size=16, vjust=0.5)) +
theme(axis.text.y=element_text(size=16, hjust=0.5)) +
geom_text(aes(x=race, y=flee, label = income), size=6)+
geom_tile(aes(x=race, y=flee, fill=MedianFamilyIncomePerCapitaIncomeRatio), alpha=0.50)
incomeByRace <- incomeOfTheFatallyShot %>% dplyr::group_by(race, gender) %>% dplyr::summarize(avg_median_income = mean(Median_Income), sum_income = sum(Median_Income)) %>% dplyr::group_by(race, gender, avg_median_income) %>% dplyr::summarize(window_avg_income = mean(sum_income))
sessionInfo()
knitr::opts_chunk$set(echo=TRUE)
sessionInfo(package=NULL)
source('../01 Data/finalplots.R')
summary(fatalPoliceShootings)
summary(incomeOfTheFatallyShot)
plot(boxplot)
plot(histogram)
plot(scatterplot)
plot(fleePlot)
plot(genderRacePlot)
plot(raceFleePlot)
plot(incomeByRacePlot)
plot(inequalityPlot)
histogram <- ggplot(incomeOfTheFatallyShot) + geom_histogram(aes(Per_Capita_Income, fill = Per_Capita_Income  )) + ggtitle("Plant growth")
plot (histogram)
histogram <- ggplot(incomeOfTheFatallyShot) + geom_histogram(aes(Per_Capita_Income, fill = Per_Capita_Income  )) + ggtitle("Count of the per capita of Fatal Police Shooting Individuals")
plot (histogram)
plot(histogram)
plot(histogram)
histogram <- ggplot(incomeOfTheFatallyShot) + geom_histogram(aes(Per_Capita_Income, fill = Per_Capita_Income), binwidth = 30) + ggtitle("Count of the per capita of Fatal Police Shooting Individuals")
plot (histogram)
histogram <- ggplot(incomeOfTheFatallyShot) + geom_histogram(aes(Per_Capita_Income, fill = Per_Capita_Income), binwidth = 300) + ggtitle("Count of the per capita of Fatal Police Shooting Individuals")
plot (histogram)
histogram <- ggplot(incomeOfTheFatallyShot) + geom_histogram(aes(Per_Capita_Income, fill = Per_Capita_Income), binwidth = 3000) + ggtitle("Count of the per capita of Fatal Police Shooting Individuals")
plot (histogram)
histogram <- ggplot(incomeOfTheFatallyShot) + geom_histogram(aes(Per_Capita_Income, fill = Per_Capita_Income), binwidth = 1000) + ggtitle("Count of the per capita of Fatal Police Shooting Individuals")
plot (histogram)
histogram <- ggplot(incomeOfTheFatallyShot) + geom_histogram(aes(Per_Capita_Income, fill = Per_Capita_Income), binwidth = 900) + ggtitle("Count of the per capita of Fatal Police Shooting Individuals")
plot (histogram)
histogram <- ggplot(incomeOfTheFatallyShot) + geom_histogram(aes(Per_Capita_Income, fill = Per_Capita_Income), binwidth = 800) + ggtitle("Count of the per capita of Fatal Police Shooting Individuals")
plot (histogram)
histogram <- ggplot(incomeOfTheFatallyShot) + geom_histogram(aes(Per_Capita_Income, fill = Per_Capita_Income), binwidth = 700) + ggtitle("Count of the per capita of Fatal Police Shooting Individuals")
plot (histogram)
plot(histogram)
plot(histogram)
boxplot <- ggplot(incomeOfTheFatallyShot) + geom_boxplot(aes(x = flee, y = Median_Family_Income, fill = flee)  ) + ggtitle("Count of the per capita of Fatal Police Shooting Individuals")
plot(boxplot)
boxplot <- ggplot(incomeOfTheFatallyShot) + geom_boxplot(aes(x = flee, y = Median_Family_Income, fill = flee)  ) + ggtitle("Median Family Income Boxplot of Individuals who suffered form Fatal Police Shootings in 2015. The x axis is the fleeing type, i.e. if anyone was fleeing and if so how.")
plot(boxplot)
plot(boxplot)
plot(boxplot)
boxplot <- ggplot(incomeOfTheFatallyShot) + geom_boxplot(aes(x = flee, y = Median_Family_Income, fill = flee)  ) + ggtitle("Median Family Income Boxplot of Individuals who suffered form Fatal Police \nShootings in 2015. The x axis is the fleeing type, i.e. if anyone was fleeing and if so how.")
plot(boxplot)
plot(boxplot)
boxplot <- ggplot(incomeOfTheFatallyShot) + geom_boxplot(aes(x = flee, y = Median_Family_Income, fill = flee)  ) + ggtitle("Median Family Income Boxplot of Individuals who suffered from \nFatal Police Shootings in 2015. The x axis is the fleeing type, i.e. if anyone was fleeing and if so how.")
plot(boxplot)
boxplot <- ggplot(incomeOfTheFatallyShot) + geom_boxplot(aes(x = flee, y = Median_Family_Income, fill = flee)  ) + ggtitle("Median Family Income Boxplot of Individuals who suffered from \nFatal Police Shootings in 2015. \n\nThe x axis is the fleeing type, i.e. if anyone was fleeing and if so how.")
plot(boxplot)
plot(boxplot)
plot(boxplot)
scatterplot <- ggplot(incomeOfTheFatallyShot) + geom_point(aes(x = GINI, y = Median_Family_Income, color = armed)) + ggtitle("Median Family Income Boxplot of Individuals who suffered from \nFatal Police Shootings in 2015. \n\nThe x axis is the fleeing type, i.e. if anyone was fleeing and if so how.")
plot(scatterplot)
scatterplot <- ggplot(incomeOfTheFatallyShot) + geom_point(aes(x = GINI, y = Median_Family_Income, color = armed)) + ggtitle("This plot shows the median family income vs. the gini index for individuals from fatal police shootings in 2015. The color is the weapon said individuals were armed with")
plot(scatterplot)
scatterplot <- ggplot(incomeOfTheFatallyShot) + geom_point(aes(x = GINI, y = Median_Family_Income, color = armed)) + ggtitle("This plot shows the median family income vs. the gini index for individuals \nfrom fatal police shootings in 2015. The color is the weapon said individuals were armed with")
plot(scatterplot)
scatterplot <- ggplot(incomeOfTheFatallyShot) + geom_point(aes(x = GINI, y = Median_Family_Income, color = armed)) + ggtitle("This plot shows the median family income vs. the gini index for individuals \nfrom fatal police shootings in 2015. \n\nThe color is the weapon said individuals were armed with")
plot(scatterplot)
genderMentalIll <- dplyr::select(incomeOfTheFatallyShot, Per_Capita_Income, gender, signs_of_mental_illness)
countTotal <- genderMentalIll %>% mutate(Per_Capita_Range = ifelse(Per_Capita_Income < 26500, "low", ifelse(Per_Capita_Income < 31000 & Per_Capita_Income > 26500, "medium","high"))) %>% dplyr::count(Per_Capita_Range, gender, signs_of_mental_illness)
lowCapitaRange <- countTotal %>% filter(Per_Capita_Range == "low")
mediumCapitaRange <- countTotal %>% filter(Per_Capita_Range == "medium")
highCapitaRange <- countTotal %>% filter(Per_Capita_Range == "high")
capitaRangePlot <- ggplot() +
geom_text(data = lowCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = -0.2, size=10) +
geom_text(data = mediumCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0, size=10) +
geom_text(data = highCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0.2, size=10)  + ggtitle("This plot shows the median family income vs. the gini index for individuals \nfrom fatal police shootings in 2015. \n\nThe color is the weapon said individuals were armed with.")
plotDF <- dplyr::inner_join(income, fatalPoliceShootings, by = c("State" = "state")) %>%
dplyr::group_by(gender, race) %>%
dplyr::summarize(avg_median_income = mean(Median_Income))
plot(capitaRangePlot)
capitaRangePlot <- ggplot() +
geom_text(data = lowCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = -0.2, size=10, colour = lowCapitaRange) +
geom_text(data = mediumCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0, size=10) +
geom_text(data = highCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0.2, size=10)  + ggtitle("This plot shows the signs of mental illness vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe color is the weapon said individuals were armed with.")
plot(capitaRangePlot)
capitaRangePlot <- ggplot() +
geom_text(data = lowCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n, colour = lowCapitaRange),nudge_x = -0.2, size=10) +
geom_text(data = mediumCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0, size=10) +
geom_text(data = highCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0.2, size=10)  + ggtitle("This plot shows the signs of mental illness vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe color is the weapon said individuals were armed with.")
plot(capitaRangePlot)
capitaRangePlot <- ggplot() +
geom_text(data = lowCapitaRange, colour="#CC0000", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = -0.2, size=10) +
geom_text(data = mediumCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0, size=10) +
geom_text(data = highCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0.2, size=10)  + ggtitle("This plot shows the signs of mental illness vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe color is the weapon said individuals were armed with.")
plot(capitaRangePlot)
capitaRangePlot <- ggplot() +
geom_text(data = lowCapitaRange, colour="#CC0000", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = -0.2, size=10) +
geom_text(data = mediumCapitaRange, colour="000099", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0, size=10) +
geom_text(data = highCapitaRange, aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0.2, size=10)  + ggtitle("This plot shows the signs of mental illness vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe color is the weapon said individuals were armed with.")
plot(capitaRangePlot)
capitaRangePlot <- ggplot() +
geom_text(data = lowCapitaRange, colour="#CC0000", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = -0.2, size=10) +
geom_text(data = mediumCapitaRange, colour="000099", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0, size=10) +
geom_text(data = highCapitaRange, colour="blue", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0.2, size=10)  + ggtitle("This plot shows the signs of mental illness vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe color is the weapon said individuals were armed with.")
plot(capitaRangePlot)
capitaRangePlot <- ggplot() +
geom_text(data = lowCapitaRange, colour="#CC0010", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = -0.2, size=10) +
geom_text(data = mediumCapitaRange, colour="000099", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0, size=10) +
geom_text(data = highCapitaRange, colour="blue", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0.2, size=10)  + ggtitle("This plot shows the signs of mental illness vs. gender for individuals \nfrom fatal police shootings in 2015. The text is ranges of count of per capita income for the individuals in each category. ")
plot(capitaRangePlot)
capitaRangePlot <- ggplot() +
geom_text(data = lowCapitaRange, colour="#CC0000", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = -0.2, size=10) +
geom_text(data = mediumCapitaRange, colour="000099", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0, size=10) +
geom_text(data = highCapitaRange, colour="blue", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0.2, size=10)  + ggtitle("This plot shows the signs of mental illness vs. gender for individuals \nfrom fatal police shootings in 2015. The text is ranges of count of per capita income for the individuals in each category. Red is the low per capita income, green is the middle and blue is the high.")
plot(capitaRangePlot)
capitaRangePlot <- ggplot() +
geom_text(data = lowCapitaRange, colour="#CC0000", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = -0.2, size=10) +
geom_text(data = mediumCapitaRange, colour="000099", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0, size=10) +
geom_text(data = highCapitaRange, colour="blue", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0.2, size=10)  + ggtitle("This plot shows the signs of mental illness vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe text is ranges of count of per capita income for the individuals in each category. Red is the low per capita income, green is the middle and blue is the high.")
plot(capitaRangePlot)
capitaRangePlot <- ggplot() +
geom_text(data = lowCapitaRange, colour="#CC0000", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = -0.2, size=10) +
geom_text(data = mediumCapitaRange, colour="000099", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0, size=10) +
geom_text(data = highCapitaRange, colour="blue", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0.2, size=10)  + ggtitle("This plot shows the signs of mental illness vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe text is ranges of count of per capita income for the individuals in \neach category. Red is the low per capita income, green is the middle and blue is the high.")
plot(capitaRangePlot)
capitaRangePlot <- ggplot() +
geom_text(data = lowCapitaRange, colour="#CC0000", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = -0.2, size=10) +
geom_text(data = mediumCapitaRange, colour="000099", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0, size=10) +
geom_text(data = highCapitaRange, colour="blue", aes(x=gender, y=signs_of_mental_illness, label = n),nudge_x = 0.2, size=10)  + ggtitle("This plot shows the signs of mental illness vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe text is ranges of count of per capita income for the individuals in \neach category. Red is the low per capita income, green is the middle \nand blue is the high.")
plot(capitaRangePlot)
shiny::runApp('~/Documents/Data Visualization (Spring 2017)/Projects/Final Project/02 Shiny')
runApp('~/Documents/Data Visualization (Spring 2017)/Projects/Final Project/02 Shiny')
runApp('~/Documents/Data Visualization (Spring 2017)/Projects/Final Project/02 Shiny')
plotDF <- dplyr::inner_join(income, fatalPoliceShootings, by = c("State" = "state")) %>%
dplyr::group_by(gender, race) %>%
dplyr::summarize(avg_median_income = mean(Median_Income))
subset <- dplyr::inner_join(income,fatalPoliceShootings, by = c("State" = "state")) %>% dplyr::filter(Median_Income >= 46000 & Median_Income <= 62000) %>%
dplyr::group_by(gender, race) %>%
dplyr::summarize(avg_median_income = mean(Median_Income))
genderRacePlot <- ggplot() +
geom_text(data = plotDF, aes(x= gender, y=race, label = avg_median_income), size=10) +
geom_text(data = subset, aes(x=gender, y=race, label = avg_median_income), nudge_y = -.5, size=4)   + ggtitle("This plot shows the signs of mental illness vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe text is ranges of count of per capita income for the individuals in \neach category. Red is the low per capita income, green is the middle \nand blue is the high.")
plot(genderRacePlot)
genderRacePlot <- ggplot() +
geom_text(data = plotDF, aes(x= gender, y=race, label = avg_median_income), size=8) +
geom_text(data = subset, aes(x=gender, y=race, label = avg_median_income), nudge_y = -.5, size=4)   + ggtitle("This plot shows the signs of mental illness vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe text is ranges of count of per capita income for the individuals in \neach category. Red is the low per capita income, green is the middle \nand blue is the high.")
plot(genderRacePlot)
genderRacePlot <- ggplot() +
geom_text(data = plotDF, aes(x= gender, y=race, label = avg_median_income), size=8) +
geom_text(data = subset, aes(x=gender, y=race, label = avg_median_income), nudge_y = -.5, size=4)   + ggtitle("This plot shows the race vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe large text Represents being Part of the mean of the top 25% Highest Median Incomes. Smaller text is the average of all remaining median incomes.")
plot(genderRacePlot)
genderRacePlot <- ggplot() +
geom_text(data = plotDF, aes(x= gender, y=race, label = avg_median_income), size=8) +
geom_text(data = subset, aes(x=gender, y=race, label = avg_median_income), nudge_y = -.5, size=4)   + ggtitle("This plot shows the race vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe large text Represents being Part of the mean of the top 25% \nHighest Median Incomes. Smaller text is the average of all remaining median incomes.")
plot(genderRacePlot)
genderRacePlot <- ggplot() +
geom_text(data = plotDF, aes(x= gender, y=race, label = avg_median_income), size=8) +
geom_text(data = subset, aes(x=gender, y=race, label = avg_median_income), nudge_y = -.5, size=4)   + ggtitle("This plot shows the race vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe large text Represents being Part of the mean of the top 25% \nHighest Median Incomes. Smaller text is the average of all \nremaining median incomes.")
plot(genderRacePlot)
test <- incomeOfTheFatallyShot %>% dplyr::group_by(race,flee) %>% dplyr::summarise(income = median(Median_Income), MedianFamilyIncomePerCapitaIncomeRatio = median(Median_Family_Income/Per_Capita_Income))
raceFleePlot <- ggplot(test) +
theme(axis.text.x=element_text(angle=90, size=16, vjust=0.5)) +
theme(axis.text.y=element_text(size=16, hjust=0.5)) +
geom_text(aes(x=race, y=flee, label = income), size=6)+
geom_tile(aes(x=race, y=flee, fill=MedianFamilyIncomePerCapitaIncomeRatio), alpha=0.50)
plot(raceFleePlot)
runApp('~/Documents/Data Visualization (Spring 2017)/Projects/Final Project/02 Shiny')
raceFleePlot <- ggplot(test) +
theme(axis.text.x=element_text(angle=90, size=16, vjust=0.5)) +
theme(axis.text.y=element_text(size=16, hjust=0.5)) +
geom_text(aes(x=race, y=flee, label = income), size=6)+
geom_tile(aes(x=race, y=flee, fill=MedianFamilyIncomePerCapitaIncomeRatio), alpha=0.50)
raceFleePlot <- ggplot(test) +
theme(axis.text.x=element_text(angle=90, size=16, vjust=0.5)) +
theme(axis.text.y=element_text(size=16, hjust=0.5)) +
geom_text(aes(x=race, y=flee, label = income), size=6)+
geom_tile(aes(x=race, y=flee, fill=MedianFamilyIncomePerCapitaIncomeRatio), alpha=0.50) + ggtitle("This R visualization was created using the calculated fields of Median(MedianFamilyIncome/PerCapitaIncome) and plotting based on how the individual from the fatal police shooting fled against the race of the individual shot.")
plot(raceFleePlot)
raceFleePlot <- ggplot(test) +
theme(axis.text.x=element_text(angle=90, size=16, vjust=0.5)) +
theme(axis.text.y=element_text(size=16, hjust=0.5)) +
geom_text(aes(x=race, y=flee, label = income), size=6)+
geom_tile(aes(x=race, y=flee, fill=MedianFamilyIncomePerCapitaIncomeRatio), alpha=0.50) + ggtitle("This R visualization was created using the calculated fields of \nMedian(MedianFamilyIncome/PerCapitaIncome) and plotting based on how the individual from the fatal police shooting fled against the race of the individual shot.")
plot(raceFleePlot)
raceFleePlot <- ggplot(test) +
theme(axis.text.x=element_text(angle=90, size=16, vjust=0.5)) +
theme(axis.text.y=element_text(size=16, hjust=0.5)) +
geom_text(aes(x=race, y=flee, label = income), size=6)+
geom_tile(aes(x=race, y=flee, fill=MedianFamilyIncomePerCapitaIncomeRatio), alpha=0.50) + ggtitle("This R visualization was created using the calculated fields of \nMedian(MedianFamilyIncome/PerCapitaIncome) and \nplotting based on how the individual from the fatal police shooting fled against the race of the individual shot.")
plot(raceFleePlot)
raceFleePlot <- ggplot(test) +
theme(axis.text.x=element_text(angle=90, size=16, vjust=0.5)) +
theme(axis.text.y=element_text(size=16, hjust=0.5)) +
geom_text(aes(x=race, y=flee, label = income), size=6)+
geom_tile(aes(x=race, y=flee, fill=MedianFamilyIncomePerCapitaIncomeRatio), alpha=0.50) + ggtitle("This R visualization was created using the calculated fields of \nMedian(MedianFamilyIncome/PerCapitaIncome) and \nplotting based on how the individual from the fatal police \nshooting fled against the race of the individual shot.")
plot(raceFleePlot)
incomeByRace <- incomeOfTheFatallyShot %>% dplyr::group_by(race, gender) %>% dplyr::summarize(avg_median_income = mean(Median_Income), sum_income = sum(Median_Income)) %>% dplyr::group_by(race, gender, avg_median_income) %>% dplyr::summarize(window_avg_income = mean(sum_income))
incomeByRacePlot <- ggplot(incomeByRace, aes(x = gender, y = avg_median_income)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~race, ncol=1) +
coord_flip() +
geom_text(mapping=aes(x=gender, y=avg_median_income, label=round(avg_median_income - window_avg_income)),colour="blue", hjust=-.5)  + ggtitle("This plot shows the race vs. gender for individuals \nfrom fatal police shootings in 2015. \n\nThe large text Represents being Part of the mean of the top 25% \nHighest Median Incomes. Smaller text is the average of all \nremaining median incomes.")
plot(incomeByRacePlot)
incomeByRacePlot <- ggplot(incomeByRace, aes(x = gender, y = avg_median_income)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~race, ncol=1) +
coord_flip() +
geom_text(mapping=aes(x=gender, y=avg_median_income, label=round(avg_median_income - window_avg_income)),colour="blue", hjust=-.5)  + ggtitle("This plot shows the race vs. gender for individuals \nfrom fatal police shootings in 2015 the bars are the average median income. \n\The blue numbers are a table calculation (the sum of the median income - the window average of the median income).")
plot(incomeByRacePlot)
incomeByRacePlot <- ggplot(incomeByRace, aes(x = gender, y = avg_median_income)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~race, ncol=1) +
coord_flip() +
geom_text(mapping=aes(x=gender, y=avg_median_income, label=round(avg_median_income - window_avg_income)),colour="blue", hjust=-.5)  + ggtitle("This plot shows the race vs. gender for individuals \nfrom fatal police shootings in 2015 the bars are the average median income. \n\The blue numbers are a table calculation (the sum of the median income - the window average of the median income).")
incomeByRacePlot <- ggplot(incomeByRace, aes(x = gender, y = avg_median_income)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~race, ncol=1) +
coord_flip() +
geom_text(mapping=aes(x=gender, y=avg_median_income, label=round(avg_median_income - window_avg_income)),colour="blue", hjust=-.5)  + ggtitle("This plot shows the race vs. gender for individuals \nfrom fatal police shootings in 2015 the bars are the average median income. \nThe blue numbers are a table calculation (the sum of the median income - the window average of the median income).")
plot(incomeByRacePlot)
incomeByRacePlot <- ggplot(incomeByRace, aes(x = gender, y = avg_median_income)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~race, ncol=1) +
coord_flip() +
geom_text(mapping=aes(x=gender, y=avg_median_income, label=round(avg_median_income - window_avg_income)),colour="blue", hjust=-.5)  + ggtitle("This plot shows the race vs. gender for individuals \nfrom fatal police shootings in 2015 the bars are the \naverage median income. \nThe blue numbers are a table calculation (the sum of the median income - the window average of the median income).")
plot(incomeByRacePlot)
incomeByRacePlot <- ggplot(incomeByRace, aes(x = gender, y = avg_median_income)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~race, ncol=1) +
coord_flip() +
geom_text(mapping=aes(x=gender, y=avg_median_income, label=round(avg_median_income - window_avg_income)),colour="blue", hjust=-.5)  + ggtitle("This plot shows the race vs. gender for individuals \nfrom fatal police shootings in 2015 the bars are the \naverage median income. \n\nThe blue numbers are a table calculation (the sum of the median \nincome - the window average of the median income).")
plot(incomeByRacePlot)
fleeMentalIncome <- incomeOfTheFatallyShot %>% dplyr::select(flee,signs_of_mental_illness,Median_Income) %>% group_by(signs_of_mental_illness,flee) %>% dplyr::filter(flee %in% c('Car','Foot','Not fleeing')) %>% summarise(Median_income = median(Median_Income))
fleePlot <- ggplot(fleeMentalIncome, aes(x=signs_of_mental_illness, y=Median_income, fill=signs_of_mental_illness)) +
theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) +
theme(axis.text.y=element_text(size=12, hjust=0.5)) +
geom_bar(stat = "identity") +
facet_wrap(~flee, ncol=1) +
coord_flip() +
geom_hline(aes(yintercept = median(Median_income)), color="purple")
plot(fleePlot)
fleePlot <- ggplot(fleeMentalIncome, aes(x=signs_of_mental_illness, y=Median_income, fill=signs_of_mental_illness)) +
theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) +
theme(axis.text.y=element_text(size=12, hjust=0.5)) +
geom_bar(stat = "identity") +
facet_wrap(~flee, ncol=1) +
coord_flip() +
geom_hline(aes(yintercept = median(Median_income)), color="purple")
fleePlot <- ggplot(fleeMentalIncome, aes(x=signs_of_mental_illness, y=Median_income, fill=signs_of_mental_illness)) +
theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) +
theme(axis.text.y=element_text(size=12, hjust=0.5)) +
geom_bar(stat = "identity") +
facet_wrap(~flee, ncol=1) +
coord_flip() +
geom_hline(aes(yintercept = median(Median_income)), color="purple") + ggtitle("Income of Individuals from a Fatal Police Shooting. Broken up by if they were feeling and/or had signs of mental illness.")
plot(fleePlot)
fleePlot <- ggplot(fleeMentalIncome, aes(x=signs_of_mental_illness, y=Median_income, fill=signs_of_mental_illness)) +
theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) +
theme(axis.text.y=element_text(size=12, hjust=0.5)) +
geom_bar(stat = "identity") +
facet_wrap(~flee, ncol=1) +
coord_flip() +
geom_hline(aes(yintercept = median(Median_income)), color="purple") + ggtitle("Income of Individuals from a Fatal Police Shooting. \nBroken up by if they were feeling and/or had signs of mental illness.")
plot(fleePlot)
plot(inequalityPlot)
inequalityIndexforHighIncome <- incomeOfTheFatallyShot %>% dplyr::select(id,GINI,Median_Income) %>% mutate(Median_Income_Range = ifelse(Median_Income < 50000, "low", ifelse(Median_Income < 60000 & Median_Income > 50000, "medium","high"))) %>% dplyr::filter(Median_Income_Range == 'high',id > 1000)
inequalityPlot <- ggplot(inequalityIndexforHighIncome, aes(x=id, y=GINI, fill=Median_Income)) +
theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) +
theme(axis.text.y=element_text(size=12, hjust=0.5)) +
geom_bar(stat = "identity") + ggtitle("This plot shows the race vs. gender for individuals \nfrom fatal police shootings in 2015 the bars are the \naverage median income. \n\nThe blue numbers are a table calculation (the sum of the median \nincome - the window average of the median income).")
plot(inequalityPlot)
inequalityPlot <- ggplot(inequalityIndexforHighIncome, aes(x=id, y=GINI, fill=Median_Income)) +
theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) +
theme(axis.text.y=element_text(size=12, hjust=0.5)) +
geom_bar(stat = "identity") + ggtitle("Inequality Index For High Income Individuals from 2015 Fatal Police Shootings. Each ID represents a person.")
plot(inequalityPlot)
inequalityPlot <- ggplot(inequalityIndexforHighIncome, aes(x=id, y=GINI, fill=Median_Income)) +
theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) +
theme(axis.text.y=element_text(size=12, hjust=0.5)) +
geom_bar(stat = "identity") + ggtitle("Inequality Index For High Income Individuals from 2015 Fatal Police \nShootings. Each ID represents a person.")
plot(inequalityPlot)
runApp('~/Documents/Data Visualization (Spring 2017)/Projects/Final Project/02 Shiny')
runApp('~/Documents/Data Visualization (Spring 2017)/Projects/Final Project/02 Shiny')
sessionInfo()
knitr::opts_chunk$set(echo=TRUE)
sessionInfo(package=NULL)
source('../01 Data/finalplots.R')
summary(fatalPoliceShootings)
summary(incomeOfTheFatallyShot)
plot(boxplot)
plot(histogram)
plot(scatterplot)
plot(fleePlot)
plot(genderRacePlot)
plot(raceFleePlot)
plot(incomeByRacePlot)
plot(inequalityPlot)
runApp('~/Documents/Data Visualization (Spring 2017)/Projects/Final Project/02 Shiny')
